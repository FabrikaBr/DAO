{"version":3,"file":"sdk-ipfs.cjs.production.min.js","sources":["../src/internal/network.ts","../src/internal/helpers.ts","../src/internal/api.ts","../src/errors.ts","../src/client.ts"],"sourcesContent":["import { IClientConfig } from \"../interfaces\";\nimport { GenericRecord } from \"../typings\";\nimport fetch from \"isomorphic-unfetch\";\nimport { InvalidResponseError, MissingBodyeError } from \"../errors\";\n\nexport namespace Network {\n  /**\n   * Performs a request and returns a JSON object with the response\n   */\n  export async function request(\n    config: IClientConfig,\n    path: string,\n    {\n      method,\n      params,\n      body,\n      signal,\n    }: {\n      method?: string;\n      params?: GenericRecord;\n      body?: BodyInit;\n      signal?: AbortSignal;\n    },\n  ) {\n    const { url, headers } = config;\n    const endpoint = new URL(path, url);\n    for (const [key, value] of Object.entries(params || {})) {\n      if (value != null) {\n        endpoint.searchParams.set(key, String(value));\n      }\n    }\n\n    const response = await fetch(endpoint.href, {\n      method: method || \"GET\",\n      headers,\n      body,\n      signal,\n    });\n\n    if (!response.ok) {\n      throw new InvalidResponseError(response);\n    }\n    return response.json();\n  }\n\n  export async function* stream(\n    { url, headers }: IClientConfig,\n    path: string,\n    {\n      method,\n      params,\n      body,\n      signal,\n    }: {\n      method?: string;\n      params?: GenericRecord;\n      body?: BodyInit;\n      signal?: AbortSignal;\n    },\n  ) {\n    const endpoint = new URL(path, url);\n    for (const [key, value] of Object.entries(params || {})) {\n      if (value != null) {\n        endpoint.searchParams.set(key, String(value));\n      }\n    }\n\n    method = method || \"GET\";\n    const res = await fetch(endpoint.href, { method, headers, body, signal });\n\n    if (!res.ok) {\n      throw new InvalidResponseError(res);\n    }\n\n    if (!res.body) {\n      throw new MissingBodyeError(res);\n    }\n    yield* streamedBytes(res.body);\n  }\n\n  async function* streamedBytes(\n    stream: ReadableStream<Uint8Array>,\n  ): AsyncGenerator<Uint8Array> {\n    let error = null;\n    const reader = stream.getReader();\n    try {\n      while (true) {\n        const result = await reader.read();\n        if (result.done) {\n          break;\n        }\n        yield result.value;\n      }\n    } catch (err) {\n      error = err;\n    } finally {\n      reader.cancel();\n      reader.releaseLock();\n    }\n    if (error) throw error;\n  }\n}\n","import { BodyParseError } from \"../errors\";\nimport {\n  AddOptions,\n  CatOptions,\n  NodeInfoOptions,\n  PinOptions,\n  VersionOptions,\n} from \"../interfaces\";\nimport {\n  AddResponse,\n  GenericRecord,\n  NodeInfoResponse,\n  PinResponse,\n  VersionResponse,\n} from \"../typings\";\n\nexport namespace Helpers {\n  export function getName(file: File | (Blob & { name?: string })) {\n    return file.name;\n  }\n\n  export function handleError(error: Error & { response?: Response }) {\n    if (error.response?.ok) {\n      return new BodyParseError(error.response);\n    } else {\n      return error;\n    }\n  }\n\n  export async function streamToUInt8Array(\n    stream: AsyncGenerator<Uint8Array>,\n  ): Promise<Uint8Array> {\n    const chunks: Uint8Array[] = [];\n    let byteCount = 0;\n    for await (const chunk of stream) {\n      chunks.push(chunk);\n      byteCount += chunk.length;\n    }\n\n    const mergedArray = new Uint8Array(byteCount);\n    let lastIndex = 0;\n    for (const chunk of chunks) {\n      mergedArray.set(chunk, lastIndex);\n      lastIndex += chunk.length;\n    }\n    return mergedArray;\n  }\n\n  export function toVersionResponse(data: {\n    [k: string]: any;\n  }): VersionResponse {\n    const {\n      Version: version,\n      Commit: commit,\n      Repo: repo,\n      System: system,\n      Golang: golang,\n    } = data;\n    return {\n      version,\n      commit,\n      repo,\n      system,\n      golang,\n    };\n  }\n\n  export function toNodeInfoResponse(data: {\n    [k: string]: any;\n  }): NodeInfoResponse {\n    const {\n      ID: id,\n      Addresses: addresses,\n      AgentVersion: agentVersion,\n      ProtocolVersion: protocolVersion,\n      Protocols: protocols,\n      PublicKey: publicKey,\n    } = data;\n\n    return {\n      id,\n      addresses,\n      agentVersion,\n      protocolVersion,\n      protocols,\n      publicKey,\n    };\n  }\n\n  export function toAddResponse(data: { [k: string]: any }): AddResponse {\n    const { Bytes: bytes, Hash: hash, Name: name, Size: size } = data;\n    return {\n      bytes,\n      hash,\n      name,\n      size,\n    };\n  }\n\n  export function toPinResponse(data: { [k: string]: any }): PinResponse {\n    const { Pins: pins, Progress: progress } = data;\n    return { pins, progress };\n  }\n\n  export function getVersionParams(\n    options: VersionOptions = {},\n  ): GenericRecord {\n    return encodeParams({\n      number: options.number,\n      commit: options.commit,\n      all: options.all,\n    });\n  }\n\n  export function getNodeInfoParams(\n    options: NodeInfoOptions = {},\n  ): GenericRecord {\n    return encodeParams({\n      arg: options.arg,\n      format: options.format,\n      \"peerid-base\": options.peeridBase,\n    });\n  }\n\n  export function getAddParams(options: AddOptions = {}): GenericRecord {\n    return encodeParams({\n      quiet: options.quiet,\n      quieter: options.quieter,\n      silent: options.silent,\n      progress: options.progress,\n      trickle: options.trickle,\n      \"only-hash\": options.onlyHash,\n      \"wrap-with-directory\": options.wrapWithDirectory,\n      chunker: options.chunker,\n      pin: options.pin,\n      \"raw-leaves\": options.rawLeaves,\n      nocopy: options.noCopy,\n      fscache: options.fsCache,\n      \"cid-version\": options.cidVersion,\n      hash: options.hash,\n      inline: options.inline,\n      \"inline-limit\": options.inlineLimit,\n    });\n  }\n\n  export function getCatParams(options: CatOptions = {}): GenericRecord {\n    return encodeParams({\n      offset: options.offset,\n      length: options.length,\n      progress: options.progress,\n    });\n  }\n\n  export function getPinOptions(options: PinOptions = {}): GenericRecord {\n    return encodeParams({\n      recursive: options.recursive,\n      progress: options.progress,\n    });\n  }\n\n  export function getUnpinOptions(options: PinOptions = {}): GenericRecord {\n    return encodeParams({\n      recursive: options.recursive,\n    });\n  }\n\n  function encodeParams<T extends {}>(\n    options: T,\n  ): { [K in keyof T]: Exclude<T[K], undefined> } {\n    // @ts-ignore\n    return Object.fromEntries(\n      Object.entries(options).filter(([, v]) => v != null),\n    );\n  }\n}\n","import {\n  AddOptions,\n  CatOptions,\n  IClientConfig,\n  NodeInfoOptions,\n  PinOptions,\n  UnpinOptions,\n  VersionOptions,\n} from \"../interfaces\";\nimport { Network } from \"./network\";\nimport {\n  AddResponse,\n  NodeInfoResponse,\n  PinResponse,\n  VersionResponse,\n} from \"../typings\";\nimport { Helpers } from \"./helpers\";\n\nexport namespace API {\n  /** Gets cluster version */\n  export function version(\n    cluster: IClientConfig,\n    options: VersionOptions = {},\n  ): Promise<VersionResponse> {\n    return Network.request(cluster, \"version\", {\n      method: \"POST\",\n      params: Helpers.getVersionParams(options),\n      signal: options.signal,\n    })\n      .then((response) => Helpers.toVersionResponse(response))\n      .catch((e) => {\n        throw Helpers.handleError(e);\n      });\n  }\n\n  /** Gets the cluster node information */\n  export function nodeInfo(\n    cluster: IClientConfig,\n    options = {} as NodeInfoOptions,\n  ): Promise<NodeInfoResponse> {\n    return Network.request(cluster, \"id\", {\n      method: \"POST\",\n      params: Helpers.getNodeInfoParams(options),\n      signal: options.signal,\n    })\n      .then((response) => Helpers.toNodeInfoResponse(response))\n      .catch((e) => {\n        throw Helpers.handleError(e);\n      });\n  }\n\n  /** Upload a file to the cluster and pin it */\n  export function add(\n    cluster: IClientConfig,\n    file: File | Blob | Uint8Array | string,\n    options: AddOptions = {},\n  ): Promise<AddResponse> {\n    if (\n      !(file instanceof File) &&\n      !(file instanceof Blob) &&\n      !(file instanceof Uint8Array) &&\n      typeof file !== \"string\"\n    ) {\n      throw new Error(\"Invalid file\");\n    }\n\n    const body = new FormData();\n    if (typeof file === \"string\") {\n      body.append(\"path\", file);\n    } else if (file instanceof Uint8Array) {\n      body.append(\"path\", new Blob([file]));\n    } else {\n      body.append(\"path\", file, getName(file) || \"file\");\n    }\n\n    return Network.request(cluster, \"add\", {\n      params: Helpers.getAddParams(options),\n      method: \"POST\",\n      body,\n      signal: options.signal,\n    })\n      .then((response) => Helpers.toAddResponse(response))\n      .catch((e) => {\n        throw Helpers.handleError(e);\n      });\n  }\n\n  /** Fetches the data behind the given path or CiD and returns it as bytes */\n  export async function cat(\n    cluster: IClientConfig,\n    path: string,\n    options: CatOptions = {},\n  ): Promise<Uint8Array> {\n    if (!path) {\n      throw new Error(\"Invalid CID\");\n    }\n    const stream = Network.stream(cluster, \"cat\", {\n      method: \"POST\",\n      params: {\n        ...Helpers.getCatParams(options),\n        arg: path,\n      },\n      signal: options.signal,\n    });\n    return Helpers.streamToUInt8Array(stream);\n  }\n\n  /** Pins the given path or CiD or IPFS/IPNS path to the cluster */\n  export function pin(\n    cluster: IClientConfig,\n    path: string,\n    options: PinOptions = {},\n  ): Promise<PinResponse> {\n    return Network\n      .request(cluster, \"pin/add\", {\n        params: {\n          ...Helpers.getPinOptions(options),\n          arg: path,\n        },\n        method: \"POST\",\n        signal: options.signal,\n      })\n      .then((response) => Helpers.toPinResponse(response));\n  }\n\n  /** Unpins the given path or CiD or IPFS/IPNS path from the cluster */\n  export function unpin(\n    cluster: IClientConfig,\n    path: string,\n    options: UnpinOptions = {},\n  ): Promise<PinResponse> {\n    return Network\n      .request(cluster, \"pin/rm\", {\n        params: {\n          ...Helpers.getUnpinOptions(options),\n          arg: path,\n        },\n        method: \"POST\",\n        signal: options.signal,\n      })\n      .then((response) => Helpers.toPinResponse(response));\n  }\n}\n\nconst getName = (file: File | (Blob & { name?: string })) => file.name;\n","export class ClientError extends Error {\n  public response: Response;\n  constructor(res: Response) {\n    super(res.statusText);\n    this.name = \"ClientError\";\n    this.response = res;\n  }\n}\n\nexport class InvalidResponseError extends ClientError {\n  constructor(res: Response) {\n    super(res);\n    this.message = \"Invalid response\";\n  }\n}\nexport class MissingBodyeError extends ClientError {\n  constructor(res: Response) {\n    super(res);\n    this.message = \"Missing response body\";\n  }\n}\nexport class BodyParseError extends ClientError {\n  constructor(res: Response) {\n    super(res);\n    this.message = \"Error parsing body\";\n  }\n}\n","import { API } from \"./internal/api\";\nimport {\n  AddResponse,\n  NodeInfoResponse,\n  PinResponse,\n  VersionResponse,\n} from \"./typings\";\nimport {\n  AddOptions,\n  CatOptions,\n  PinOptions,\n  RequestOptions,\n  UnpinOptions,\n  VersionOptions,\n} from \"./interfaces\";\n\nexport class Client {\n  readonly url: URL;\n  readonly headers: Record<string, string>;\n\n  /** Create a new instance of the IPFS cluster client */\n  constructor(url: string | URL, headers?: Record<string, string>) {\n    const newUrl = typeof url === \"string\" ? new URL(url) : url;\n    if (!newUrl.pathname.endsWith(\"/\")) {\n      newUrl.pathname += \"/\";\n    }\n    this.url = newUrl;\n\n    this.headers = headers || {};\n  }\n\n  /**\n   * Get Cluster version.\n   * @param {API.RequestOptions} [options]\n   */\n  version(options?: VersionOptions): Promise<VersionResponse> {\n    return API.version(this, options);\n  }\n\n  /**\n   * Get Cluster peer information.\n   */\n  nodeInfo(options?: RequestOptions): Promise<NodeInfoResponse> {\n    return API.nodeInfo(this, options);\n  }\n\n  /**\n   * Imports a file to the cluster. First argument must be a `File` or `Blob`.\n   * Note: by default this module uses v1 CIDs and raw leaves enabled.\n   */\n  add(\n    file: File | Blob | Uint8Array | string,\n    options?: AddOptions,\n  ): Promise<AddResponse> {\n    return API.add(this, file, options);\n  }\n\n  /** Fetches the contents behind the cid and returns them as an Uint8Array */\n  cat(path: string, options?: CatOptions): Promise<Uint8Array> {\n    return API.cat(this, path, options);\n  }\n\n  /**\n   * Tracks a path with the given replication factor and a name for\n   * human-friendliness.\n   */\n  pin(path: string, options?: PinOptions): Promise<PinResponse> {\n    return API.pin(this, path, options);\n  }\n\n  /**\n   * Untracks a path on the cluster.\n   */\n  unpin(path: string, options?: UnpinOptions): Promise<PinResponse> {\n    return API.unpin(this, path, options);\n  }\n}\n"],"names":["Network","Helpers","API","ClientError","_Error","res","_this","call","statusText","name","response","_inheritsLoose","_wrapNativeSuper","Error","InvalidResponseError","_ClientError","_this2","message","MissingBodyeError","_ClientError2","_this3","BodyParseError","_ClientError3","_this4","_request","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","config","path","_ref","method","params","body","signal","headers","endpoint","_i2","_Object$entries2","_Object$entries2$_i","key","value","wrap","_context3","prev","next","URL","url","Object","entries","length","searchParams","set","String","fetch","href","sent","ok","abrupt","json","stop","apply","arguments","_stream","_wrapAsyncGenerator","_ref2","_ref3","_callee","_i","_Object$entries","_Object$entries$_i","_context","_awaitAsyncGenerator","delegateYield","_asyncGeneratorDelegate","_asyncIterator","streamedBytes","_x4","_streamedBytes","_callee2","stream","error","reader","result","_context2","getReader","read","done","t0","cancel","releaseLock","finish","_x5","_x6","_x7","_x","_x2","_x3","_streamToUInt8Array","chunks","byteCount","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","mergedArray","lastIndex","_chunks","_chunk","push","Uint8Array","encodeParams","options","fromEntries","filter","file","_error$response","data","version","Version","commit","Commit","repo","Repo","system","System","golang","Golang","id","ID","addresses","Addresses","agentVersion","AgentVersion","protocolVersion","ProtocolVersion","protocols","Protocols","publicKey","PublicKey","bytes","Bytes","hash","Hash","Name","size","Size","pins","Pins","progress","Progress","number","all","arg","format","peerid-base","peeridBase","quiet","quieter","silent","trickle","only-hash","onlyHash","wrap-with-directory","wrapWithDirectory","chunker","pin","raw-leaves","rawLeaves","nocopy","noCopy","fscache","fsCache","cid-version","cidVersion","inline","inline-limit","inlineLimit","offset","recursive","_cat","cluster","_extends","getCatParams","streamToUInt8Array","request","getVersionParams","then","toVersionResponse","e","handleError","getNodeInfoParams","toNodeInfoResponse","File","Blob","FormData","append","getName","getAddParams","toAddResponse","getPinOptions","toPinResponse","getUnpinOptions","Client","newUrl","pathname","endsWith","this","_proto","prototype","nodeInfo","add","cat","unpin"],"mappings":"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"}