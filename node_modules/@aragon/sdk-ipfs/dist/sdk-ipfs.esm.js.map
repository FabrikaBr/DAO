{"version":3,"file":"sdk-ipfs.esm.js","sources":["../src/errors.ts","../src/internal/network.ts","../src/internal/helpers.ts","../src/internal/api.ts","../src/client.ts"],"sourcesContent":["export class ClientError extends Error {\n  public response: Response;\n  constructor(res: Response) {\n    super(res.statusText);\n    this.name = \"ClientError\";\n    this.response = res;\n  }\n}\n\nexport class InvalidResponseError extends ClientError {\n  constructor(res: Response) {\n    super(res);\n    this.message = \"Invalid response\";\n  }\n}\nexport class MissingBodyeError extends ClientError {\n  constructor(res: Response) {\n    super(res);\n    this.message = \"Missing response body\";\n  }\n}\nexport class BodyParseError extends ClientError {\n  constructor(res: Response) {\n    super(res);\n    this.message = \"Error parsing body\";\n  }\n}\n","import { IClientConfig } from \"../interfaces\";\nimport { GenericRecord } from \"../typings\";\nimport fetch from \"isomorphic-unfetch\";\nimport { InvalidResponseError, MissingBodyeError } from \"../errors\";\n\nexport namespace Network {\n  /**\n   * Performs a request and returns a JSON object with the response\n   */\n  export async function request(\n    config: IClientConfig,\n    path: string,\n    {\n      method,\n      params,\n      body,\n      signal,\n    }: {\n      method?: string;\n      params?: GenericRecord;\n      body?: BodyInit;\n      signal?: AbortSignal;\n    },\n  ) {\n    const { url, headers } = config;\n    const endpoint = new URL(path, url);\n    for (const [key, value] of Object.entries(params || {})) {\n      if (value != null) {\n        endpoint.searchParams.set(key, String(value));\n      }\n    }\n\n    const response = await fetch(endpoint.href, {\n      method: method || \"GET\",\n      headers,\n      body,\n      signal,\n    });\n\n    if (!response.ok) {\n      throw new InvalidResponseError(response);\n    }\n    return response.json();\n  }\n\n  export async function* stream(\n    { url, headers }: IClientConfig,\n    path: string,\n    {\n      method,\n      params,\n      body,\n      signal,\n    }: {\n      method?: string;\n      params?: GenericRecord;\n      body?: BodyInit;\n      signal?: AbortSignal;\n    },\n  ) {\n    const endpoint = new URL(path, url);\n    for (const [key, value] of Object.entries(params || {})) {\n      if (value != null) {\n        endpoint.searchParams.set(key, String(value));\n      }\n    }\n\n    method = method || \"GET\";\n    const res = await fetch(endpoint.href, { method, headers, body, signal });\n\n    if (!res.ok) {\n      throw new InvalidResponseError(res);\n    }\n\n    if (!res.body) {\n      throw new MissingBodyeError(res);\n    }\n    yield* streamedBytes(res.body);\n  }\n\n  async function* streamedBytes(\n    stream: ReadableStream<Uint8Array>,\n  ): AsyncGenerator<Uint8Array> {\n    let error = null;\n    const reader = stream.getReader();\n    try {\n      while (true) {\n        const result = await reader.read();\n        if (result.done) {\n          break;\n        }\n        yield result.value;\n      }\n    } catch (err) {\n      error = err;\n    } finally {\n      reader.cancel();\n      reader.releaseLock();\n    }\n    if (error) throw error;\n  }\n}\n","import { BodyParseError } from \"../errors\";\nimport {\n  AddOptions,\n  CatOptions,\n  NodeInfoOptions,\n  PinOptions,\n  VersionOptions,\n} from \"../interfaces\";\nimport {\n  AddResponse,\n  GenericRecord,\n  NodeInfoResponse,\n  PinResponse,\n  VersionResponse,\n} from \"../typings\";\n\nexport namespace Helpers {\n  export function getName(file: File | (Blob & { name?: string })) {\n    return file.name;\n  }\n\n  export function handleError(error: Error & { response?: Response }) {\n    if (error.response?.ok) {\n      return new BodyParseError(error.response);\n    } else {\n      return error;\n    }\n  }\n\n  export async function streamToUInt8Array(\n    stream: AsyncGenerator<Uint8Array>,\n  ): Promise<Uint8Array> {\n    const chunks: Uint8Array[] = [];\n    let byteCount = 0;\n    for await (const chunk of stream) {\n      chunks.push(chunk);\n      byteCount += chunk.length;\n    }\n\n    const mergedArray = new Uint8Array(byteCount);\n    let lastIndex = 0;\n    for (const chunk of chunks) {\n      mergedArray.set(chunk, lastIndex);\n      lastIndex += chunk.length;\n    }\n    return mergedArray;\n  }\n\n  export function toVersionResponse(data: {\n    [k: string]: any;\n  }): VersionResponse {\n    const {\n      Version: version,\n      Commit: commit,\n      Repo: repo,\n      System: system,\n      Golang: golang,\n    } = data;\n    return {\n      version,\n      commit,\n      repo,\n      system,\n      golang,\n    };\n  }\n\n  export function toNodeInfoResponse(data: {\n    [k: string]: any;\n  }): NodeInfoResponse {\n    const {\n      ID: id,\n      Addresses: addresses,\n      AgentVersion: agentVersion,\n      ProtocolVersion: protocolVersion,\n      Protocols: protocols,\n      PublicKey: publicKey,\n    } = data;\n\n    return {\n      id,\n      addresses,\n      agentVersion,\n      protocolVersion,\n      protocols,\n      publicKey,\n    };\n  }\n\n  export function toAddResponse(data: { [k: string]: any }): AddResponse {\n    const { Bytes: bytes, Hash: hash, Name: name, Size: size } = data;\n    return {\n      bytes,\n      hash,\n      name,\n      size,\n    };\n  }\n\n  export function toPinResponse(data: { [k: string]: any }): PinResponse {\n    const { Pins: pins, Progress: progress } = data;\n    return { pins, progress };\n  }\n\n  export function getVersionParams(\n    options: VersionOptions = {},\n  ): GenericRecord {\n    return encodeParams({\n      number: options.number,\n      commit: options.commit,\n      all: options.all,\n    });\n  }\n\n  export function getNodeInfoParams(\n    options: NodeInfoOptions = {},\n  ): GenericRecord {\n    return encodeParams({\n      arg: options.arg,\n      format: options.format,\n      \"peerid-base\": options.peeridBase,\n    });\n  }\n\n  export function getAddParams(options: AddOptions = {}): GenericRecord {\n    return encodeParams({\n      quiet: options.quiet,\n      quieter: options.quieter,\n      silent: options.silent,\n      progress: options.progress,\n      trickle: options.trickle,\n      \"only-hash\": options.onlyHash,\n      \"wrap-with-directory\": options.wrapWithDirectory,\n      chunker: options.chunker,\n      pin: options.pin,\n      \"raw-leaves\": options.rawLeaves,\n      nocopy: options.noCopy,\n      fscache: options.fsCache,\n      \"cid-version\": options.cidVersion,\n      hash: options.hash,\n      inline: options.inline,\n      \"inline-limit\": options.inlineLimit,\n    });\n  }\n\n  export function getCatParams(options: CatOptions = {}): GenericRecord {\n    return encodeParams({\n      offset: options.offset,\n      length: options.length,\n      progress: options.progress,\n    });\n  }\n\n  export function getPinOptions(options: PinOptions = {}): GenericRecord {\n    return encodeParams({\n      recursive: options.recursive,\n      progress: options.progress,\n    });\n  }\n\n  export function getUnpinOptions(options: PinOptions = {}): GenericRecord {\n    return encodeParams({\n      recursive: options.recursive,\n    });\n  }\n\n  function encodeParams<T extends {}>(\n    options: T,\n  ): { [K in keyof T]: Exclude<T[K], undefined> } {\n    // @ts-ignore\n    return Object.fromEntries(\n      Object.entries(options).filter(([, v]) => v != null),\n    );\n  }\n}\n","import {\n  AddOptions,\n  CatOptions,\n  IClientConfig,\n  NodeInfoOptions,\n  PinOptions,\n  UnpinOptions,\n  VersionOptions,\n} from \"../interfaces\";\nimport { Network } from \"./network\";\nimport {\n  AddResponse,\n  NodeInfoResponse,\n  PinResponse,\n  VersionResponse,\n} from \"../typings\";\nimport { Helpers } from \"./helpers\";\n\nexport namespace API {\n  /** Gets cluster version */\n  export function version(\n    cluster: IClientConfig,\n    options: VersionOptions = {},\n  ): Promise<VersionResponse> {\n    return Network.request(cluster, \"version\", {\n      method: \"POST\",\n      params: Helpers.getVersionParams(options),\n      signal: options.signal,\n    })\n      .then((response) => Helpers.toVersionResponse(response))\n      .catch((e) => {\n        throw Helpers.handleError(e);\n      });\n  }\n\n  /** Gets the cluster node information */\n  export function nodeInfo(\n    cluster: IClientConfig,\n    options = {} as NodeInfoOptions,\n  ): Promise<NodeInfoResponse> {\n    return Network.request(cluster, \"id\", {\n      method: \"POST\",\n      params: Helpers.getNodeInfoParams(options),\n      signal: options.signal,\n    })\n      .then((response) => Helpers.toNodeInfoResponse(response))\n      .catch((e) => {\n        throw Helpers.handleError(e);\n      });\n  }\n\n  /** Upload a file to the cluster and pin it */\n  export function add(\n    cluster: IClientConfig,\n    file: File | Blob | Uint8Array | string,\n    options: AddOptions = {},\n  ): Promise<AddResponse> {\n    if (\n      !(file instanceof File) &&\n      !(file instanceof Blob) &&\n      !(file instanceof Uint8Array) &&\n      typeof file !== \"string\"\n    ) {\n      throw new Error(\"Invalid file\");\n    }\n\n    const body = new FormData();\n    if (typeof file === \"string\") {\n      body.append(\"path\", file);\n    } else if (file instanceof Uint8Array) {\n      body.append(\"path\", new Blob([file]));\n    } else {\n      body.append(\"path\", file, getName(file) || \"file\");\n    }\n\n    return Network.request(cluster, \"add\", {\n      params: Helpers.getAddParams(options),\n      method: \"POST\",\n      body,\n      signal: options.signal,\n    })\n      .then((response) => Helpers.toAddResponse(response))\n      .catch((e) => {\n        throw Helpers.handleError(e);\n      });\n  }\n\n  /** Fetches the data behind the given path or CiD and returns it as bytes */\n  export async function cat(\n    cluster: IClientConfig,\n    path: string,\n    options: CatOptions = {},\n  ): Promise<Uint8Array> {\n    if (!path) {\n      throw new Error(\"Invalid CID\");\n    }\n    const stream = Network.stream(cluster, \"cat\", {\n      method: \"POST\",\n      params: {\n        ...Helpers.getCatParams(options),\n        arg: path,\n      },\n      signal: options.signal,\n    });\n    return Helpers.streamToUInt8Array(stream);\n  }\n\n  /** Pins the given path or CiD or IPFS/IPNS path to the cluster */\n  export function pin(\n    cluster: IClientConfig,\n    path: string,\n    options: PinOptions = {},\n  ): Promise<PinResponse> {\n    return Network\n      .request(cluster, \"pin/add\", {\n        params: {\n          ...Helpers.getPinOptions(options),\n          arg: path,\n        },\n        method: \"POST\",\n        signal: options.signal,\n      })\n      .then((response) => Helpers.toPinResponse(response));\n  }\n\n  /** Unpins the given path or CiD or IPFS/IPNS path from the cluster */\n  export function unpin(\n    cluster: IClientConfig,\n    path: string,\n    options: UnpinOptions = {},\n  ): Promise<PinResponse> {\n    return Network\n      .request(cluster, \"pin/rm\", {\n        params: {\n          ...Helpers.getUnpinOptions(options),\n          arg: path,\n        },\n        method: \"POST\",\n        signal: options.signal,\n      })\n      .then((response) => Helpers.toPinResponse(response));\n  }\n}\n\nconst getName = (file: File | (Blob & { name?: string })) => file.name;\n","import { API } from \"./internal/api\";\nimport {\n  AddResponse,\n  NodeInfoResponse,\n  PinResponse,\n  VersionResponse,\n} from \"./typings\";\nimport {\n  AddOptions,\n  CatOptions,\n  PinOptions,\n  RequestOptions,\n  UnpinOptions,\n  VersionOptions,\n} from \"./interfaces\";\n\nexport class Client {\n  readonly url: URL;\n  readonly headers: Record<string, string>;\n\n  /** Create a new instance of the IPFS cluster client */\n  constructor(url: string | URL, headers?: Record<string, string>) {\n    const newUrl = typeof url === \"string\" ? new URL(url) : url;\n    if (!newUrl.pathname.endsWith(\"/\")) {\n      newUrl.pathname += \"/\";\n    }\n    this.url = newUrl;\n\n    this.headers = headers || {};\n  }\n\n  /**\n   * Get Cluster version.\n   * @param {API.RequestOptions} [options]\n   */\n  version(options?: VersionOptions): Promise<VersionResponse> {\n    return API.version(this, options);\n  }\n\n  /**\n   * Get Cluster peer information.\n   */\n  nodeInfo(options?: RequestOptions): Promise<NodeInfoResponse> {\n    return API.nodeInfo(this, options);\n  }\n\n  /**\n   * Imports a file to the cluster. First argument must be a `File` or `Blob`.\n   * Note: by default this module uses v1 CIDs and raw leaves enabled.\n   */\n  add(\n    file: File | Blob | Uint8Array | string,\n    options?: AddOptions,\n  ): Promise<AddResponse> {\n    return API.add(this, file, options);\n  }\n\n  /** Fetches the contents behind the cid and returns them as an Uint8Array */\n  cat(path: string, options?: CatOptions): Promise<Uint8Array> {\n    return API.cat(this, path, options);\n  }\n\n  /**\n   * Tracks a path with the given replication factor and a name for\n   * human-friendliness.\n   */\n  pin(path: string, options?: PinOptions): Promise<PinResponse> {\n    return API.pin(this, path, options);\n  }\n\n  /**\n   * Untracks a path on the cluster.\n   */\n  unpin(path: string, options?: UnpinOptions): Promise<PinResponse> {\n    return API.unpin(this, path, options);\n  }\n}\n"],"names":["ClientError","_Error","_inheritsLoose","res","_this","call","statusText","name","response","_wrapNativeSuper","Error","InvalidResponseError","_ClientError","_this2","message","MissingBodyeError","_ClientError2","_this3","BodyParseError","_ClientError3","_this4","Network","request","_x5","_x6","_x7","_request","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","config","path","_ref","method","params","body","signal","url","headers","endpoint","_i2","_Object$entries2","_Object$entries2$_i","key","value","wrap","_callee3$","_context3","prev","next","URL","Object","entries","length","searchParams","set","String","fetch","href","sent","ok","abrupt","json","stop","stream","_x","_x2","_x3","_stream","_wrapAsyncGenerator","_ref2","_ref3","_callee","_i","_Object$entries","_Object$entries$_i","_callee$","_context","_awaitAsyncGenerator","delegateYield","_asyncGeneratorDelegate","_asyncIterator","streamedBytes","_x4","_streamedBytes","_callee2","error","reader","result","_callee2$","_context2","getReader","read","done","t0","cancel","releaseLock","finish","Helpers","getName","file","handleError","_error$response","streamToUInt8Array","_streamToUInt8Array","chunks","byteCount","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","mergedArray","lastIndex","_chunks","_chunk","push","Uint8Array","toVersionResponse","data","version","Version","commit","Commit","repo","Repo","system","System","golang","Golang","toNodeInfoResponse","id","ID","addresses","Addresses","agentVersion","AgentVersion","protocolVersion","ProtocolVersion","protocols","Protocols","publicKey","PublicKey","toAddResponse","bytes","Bytes","hash","Hash","Name","size","Size","toPinResponse","pins","Pins","progress","Progress","getVersionParams","options","encodeParams","number","all","getNodeInfoParams","arg","format","peeridBase","getAddParams","quiet","quieter","silent","trickle","onlyHash","wrapWithDirectory","chunker","pin","rawLeaves","nocopy","noCopy","fscache","fsCache","cidVersion","inline","inlineLimit","getCatParams","offset","getPinOptions","recursive","getUnpinOptions","fromEntries","filter","v","API","cluster","then","e","nodeInfo","add","File","Blob","FormData","append","cat","_cat","_extends","unpin","Client","newUrl","pathname","endsWith","_proto","prototype"],"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"}