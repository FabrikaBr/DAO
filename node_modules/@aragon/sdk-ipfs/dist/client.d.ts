import { AddResponse, NodeInfoResponse, PinResponse, VersionResponse } from "./typings";
import { AddOptions, CatOptions, PinOptions, RequestOptions, UnpinOptions, VersionOptions } from "./interfaces";
export declare class Client {
    readonly url: URL;
    readonly headers: Record<string, string>;
    /** Create a new instance of the IPFS cluster client */
    constructor(url: string | URL, headers?: Record<string, string>);
    /**
     * Get Cluster version.
     * @param {API.RequestOptions} [options]
     */
    version(options?: VersionOptions): Promise<VersionResponse>;
    /**
     * Get Cluster peer information.
     */
    nodeInfo(options?: RequestOptions): Promise<NodeInfoResponse>;
    /**
     * Imports a file to the cluster. First argument must be a `File` or `Blob`.
     * Note: by default this module uses v1 CIDs and raw leaves enabled.
     */
    add(file: File | Blob | Uint8Array | string, options?: AddOptions): Promise<AddResponse>;
    /** Fetches the contents behind the cid and returns them as an Uint8Array */
    cat(path: string, options?: CatOptions): Promise<Uint8Array>;
    /**
     * Tracks a path with the given replication factor and a name for
     * human-friendliness.
     */
    pin(path: string, options?: PinOptions): Promise<PinResponse>;
    /**
     * Untracks a path on the cluster.
     */
    unpin(path: string, options?: UnpinOptions): Promise<PinResponse>;
}
