/// <reference types="node" />
/** Decodes a hex string and returns it as a buffer */
export declare function hexToBytes(hexString: string): Uint8Array;
/** Encodes a buffer into a hex string with the "0x" prefix */
export declare function bytesToHex(buff: Uint8Array, skip0x?: boolean): string;
/** Encodes the given big integer as a 32 byte big endian buffer */
export declare function bigIntToBuffer(number: bigint): Uint8Array;
/** Encodes the given big integer as a 32 byte little endian buffer */
export declare function bigIntToLeBuffer(number: bigint): Uint8Array;
/** Transforms the given (big endian) buffer into a big int */
export declare function bufferToBigInt(bytes: Buffer | Uint8Array): bigint;
/** Transforms the given (little endian) buffer into a endian big int */
export declare function bufferLeToBigInt(bytes: Buffer | Uint8Array): bigint;
export declare function ensure0x(value: string): string;
export declare function strip0x(value: string): string;
/**
 * Encodes a 0-1 ratio within the given digit precision for storage on a smart contract
 *
 * @export
 * @param {number} ratio
 * @param {number} digits
 * @return {*}  {bigint}
 */
export declare function encodeRatio(ratio: number, digits: number): number;
/**
 * Decodes a value received from a smart contract to a number with
 *
 * @export
 * @param {bigint} onChainValue
 * @param {number} digits
 * @return {*}  {number}
 */
export declare function decodeRatio(onChainValue: bigint | number, digits: number): number;
/** Encodes the particles of a proposalId into a globally unque value for subgraph */
export declare function encodeProposalId(pluginAddress: string, id: number): string;
/** Decodes a proposalId from subgraph and returns the original pluginAddress and the nonce */
export declare function decodeProposalId(proposalId: string): {
    pluginAddress: string;
    id: number;
};
/** Gets the extended version of a proposal id from the compact one */
export declare const getExtendedProposalId: (proposalId: string) => string;
/** Gets the compact version of a proposal id from the extended one */
export declare const getCompactProposalId: (proposalId: string) => string;
/** Transforms an array of booleans into a bitmap big integer */
export declare function boolArrayToBitmap(bools?: Array<boolean>): bigint;
/** Transforms an array of booleans into a bitmap big integer */
export declare function bitmapToBoolArray(bitmap: bigint): Array<boolean>;
