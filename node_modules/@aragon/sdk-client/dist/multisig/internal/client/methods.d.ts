import { ApproveMultisigProposalParams, ApproveProposalStepValue, CanApproveParams, CreateMultisigProposalParams, MultisigPluginPrepareInstallationParams, MultisigProposal, MultisigProposalListItem, MultisigVotingSettings } from "../../types";
import { ClientCore, ExecuteProposalStepValue, PrepareInstallationStepValue, ProposalCreationStepValue, ProposalMetadata, ProposalQueryParams } from "../../../client-common";
import { IMultisigClientMethods } from "../../interfaces";
/**
 * Methods module the SDK Address List Client
 */
export declare class MultisigClientMethods extends ClientCore implements IMultisigClientMethods {
    /**
     * Creates a new proposal on the given multisig plugin contract
     *
     * @param {CreateMultisigProposalParams} params
     * @return {*}  {AsyncGenerator<ProposalCreationStepValue>}
     * @memberof MultisigClientMethods
     */
    createProposal(params: CreateMultisigProposalParams): AsyncGenerator<ProposalCreationStepValue>;
    /**
     * Pins a metadata object into IPFS and retruns the generated hash
     *
     * @param {ProposalMetadata} params
     * @return {*}  {Promise<string>}
     * @memberof MultisigClientMethods
     */
    pinMetadata(params: ProposalMetadata): Promise<string>;
    /**
     * Allow a wallet in the multisig give approval to a proposal
     *
     * @param {ApproveMultisigProposalParams} params
     * @return {*}  {AsyncGenerator<ApproveProposalStepValue>}
     * @memberof MultisigClientMethods
     */
    approveProposal(params: ApproveMultisigProposalParams): AsyncGenerator<ApproveProposalStepValue>;
    /**
     * Allow a wallet in the multisig give approval to a proposal
     *
     * @param {string} proposalId
     * @return {*}  {AsyncGenerator<ExecuteMultisigProposalStepValue>}
     * @memberof MultisigClientMethods
     */
    executeProposal(proposalId: string): AsyncGenerator<ExecuteProposalStepValue>;
    /**
     * Prepares the installation of a multisig plugin in a given dao
     *
     * @param {MultisigPluginPrepareInstallationParams} params
     * @return {*}  {AsyncGenerator<PrepareInstallationStepValue>}
     * @memberof MultisigClientMethods
     */
    prepareInstallation(params: MultisigPluginPrepareInstallationParams): AsyncGenerator<PrepareInstallationStepValue>;
    /**
     * Checks whether the current proposal can be approved by the given address
     *
     * @param {string} addressOrEns
     * @return {*}  {Promise<boolean>}
     * @memberof MultisigClientMethods
     */
    canApprove(params: CanApproveParams): Promise<boolean>;
    /**
     * Checks whether the current proposal can be executed
     *
     * @param {string} proposalId
     * @return {*}  {Promise<boolean>}
     * @memberof MultisigClientMethods
     */
    canExecute(proposalId: string): Promise<boolean>;
    /**
     * Returns the voting settings
     *
     * @param {string} addressOrEns
     * @return {*}  {Promise<MultisigVotingSettings>}
     * @memberof MultisigClientMethods
     */
    getVotingSettings(pluginAddress: string): Promise<MultisigVotingSettings>;
    /**
     * returns the members of the multisig
     *
     * @param {string} addressOrEns
     * @return {*}  {Promise<string[]>}
     * @memberof MultisigClientMethods
     */
    getMembers(pluginAddress: string): Promise<string[]>;
    /**
     * Returns the details of the given proposal
     *
     * @param {string} proposalId
     * @return {*}  {(Promise<MultisigProposal | null>)}
     * @memberof MultisigClientMethods
     */
    getProposal(proposalId: string): Promise<MultisigProposal | null>;
    /**
     * Returns a list of proposals on the Plugin, filtered by the given criteria
     *
     * @param {ProposalQueryParams} {
     *       daoAddressOrEns,
     *       limit = 10,
     *       status,
     *       skip = 0,
     *       direction = SortDirection.ASC,
     *       sortBy = ProposalSortBy.CREATED_AT,
     *     }
     * @return {*}  {Promise<MultisigProposalListItem[]>}
     * @memberof MultisigClientMethods
     */
    getProposals({ daoAddressOrEns, limit, status, skip, direction, sortBy, }: ProposalQueryParams): Promise<MultisigProposalListItem[]>;
}
