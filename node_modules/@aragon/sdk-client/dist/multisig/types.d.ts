import { CreateProposalBaseParams, ProposalBase, ProposalListItemBase, VersionTag } from "../client-common";
export declare type MultisigPluginInstallParams = MultisigPluginSettings;
export declare type MultisigPluginPrepareInstallationParams = {
    settings: MultisigPluginSettings;
    daoAddressOrEns: string;
    versionTag?: VersionTag;
};
export declare type MultisigVotingSettings = {
    minApprovals: number;
    onlyListed: boolean;
};
export declare type MultisigPluginSettings = {
    members: string[];
    votingSettings: MultisigVotingSettings;
};
export declare type UpdateAddressesParams = {
    pluginAddress: string;
    members: string[];
};
export declare type RemoveAddressesParams = UpdateAddressesParams;
export declare type AddAddressesParams = UpdateAddressesParams;
export declare type UpdateMultisigVotingSettingsParams = {
    pluginAddress: string;
    votingSettings: MultisigVotingSettings;
};
export declare type CreateMultisigProposalParams = CreateProposalBaseParams & {
    approve?: boolean;
    tryExecution?: boolean;
    startDate?: Date;
    /** Date at which the proposal will expire if not approved */
    endDate?: Date;
};
export declare type ApproveMultisigProposalParams = {
    proposalId: string;
    tryExecution: boolean;
};
export declare type CanApproveParams = {
    proposalId: string;
    approverAddressOrEns: string;
};
export declare enum ApproveProposalStep {
    APPROVING = "approving",
    DONE = "done"
}
export declare type ApproveProposalStepValue = {
    key: ApproveProposalStep.APPROVING;
    txHash: string;
} | {
    key: ApproveProposalStep.DONE;
};
export declare type MultisigProposalListItem = ProposalListItemBase & {
    approvals: string[];
    settings: MultisigVotingSettings;
};
export declare type MultisigProposal = ProposalBase & {
    approvals: string[];
    settings: MultisigVotingSettings;
};
