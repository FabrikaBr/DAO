import { ITokenVotingClient, ITokenVotingClientDecoding, ITokenVotingClientEncoding, ITokenVotingClientEstimation, ITokenVotingClientMethods } from "./interfaces";
import { ClientCore, ContextPlugin, PluginInstallItem } from "../client-common";
import { Networkish } from "@ethersproject/providers";
import { TokenVotingPluginInstall } from "./types";
/**
 * Provider a generic client with high level methods to manage and interact a Token Voting plugin installed in a DAO
 */
export declare class TokenVotingClient extends ClientCore implements ITokenVotingClient {
    methods: ITokenVotingClientMethods;
    encoding: ITokenVotingClientEncoding;
    decoding: ITokenVotingClientDecoding;
    estimation: ITokenVotingClientEstimation;
    constructor(context: ContextPlugin);
    static encoding: {
        /**
         * Computes the parameters to be given when creating the DAO,
         * so that the plugin is configured
         *
         * @param {TokenVotingPluginInstall} params
         * @param {Networkish} [network="mainnet"]
         * @return {*}  {PluginInstallItem}
         * @memberof TokenVotingClient
         */
        getPluginInstallItem: (params: TokenVotingPluginInstall, network?: Networkish) => PluginInstallItem;
    };
}
