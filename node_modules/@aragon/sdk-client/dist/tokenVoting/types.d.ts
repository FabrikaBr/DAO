import { MajorityVotingProposalSettings, ProposalBase, ProposalListItemBase, ProposalVoteBase, TokenType, VersionTag, VotingSettings } from "../client-common";
export declare type TokenVotingPluginInstall = {
    votingSettings: VotingSettings;
    newToken?: NewTokenParams;
    useToken?: ExistingTokenParams;
};
declare type ExistingTokenParams = {
    tokenAddress: string;
    wrappedToken: {
        name: string;
        symbol: string;
    };
};
declare type NewTokenParams = {
    name: string;
    symbol: string;
    decimals: number;
    minter?: string;
    balances: {
        address: string;
        balance: bigint;
    }[];
};
export declare type TokenVotingProposalVote = ProposalVoteBase & {
    weight: bigint;
};
export declare type TokenVotingProposal = ProposalBase & {
    result: TokenVotingProposalResult;
    settings: MajorityVotingProposalSettings;
    token: Erc20TokenDetails | Erc721TokenDetails | null;
    usedVotingWeight: bigint;
    votes: TokenVotingProposalVote[];
    totalVotingWeight: bigint;
};
export declare type TokenVotingProposalListItem = ProposalListItemBase & {
    token: Erc20TokenDetails | Erc721TokenDetails | null;
    result: TokenVotingProposalResult;
    totalVotingWeight: bigint;
    settings: MajorityVotingProposalSettings;
    votes: TokenVotingProposalVote[];
};
export declare type TokenVotingProposalResult = {
    yes: bigint;
    no: bigint;
    abstain: bigint;
};
export declare type Erc20TokenDetails = TokenBaseDetails & {
    decimals: number;
    type: TokenType.ERC20;
};
export declare type Erc721TokenDetails = TokenBaseDetails & {
    type: TokenType.ERC721;
};
export declare type TokenBaseDetails = {
    address: string;
    name: string;
    symbol: string;
};
export declare type MintTokenParams = {
    address: string;
    amount: bigint;
};
export declare type TokenVotingPluginPrepareInstallationParams = {
    settings: TokenVotingPluginInstall;
    daoAddressOrEns: string;
    versionTag?: VersionTag;
};
declare type WrapTokensBase = {
    wrappedTokenAddress: string;
    amount: bigint;
};
export declare type WrapTokensParams = WrapTokensBase;
export declare type UnwrapTokensParams = WrapTokensBase;
export declare enum WrapTokensStep {
    WRAPPING = "wrapping",
    DONE = "done"
}
export declare type WrapTokensStepValue = {
    key: WrapTokensStep.WRAPPING;
    txHash: string;
} | {
    key: WrapTokensStep.DONE;
};
export declare enum UnwrapTokensStep {
    UNWRAPPING = "unwrapping",
    DONE = "done"
}
export declare type UnwrapTokensStepValue = {
    key: UnwrapTokensStep.UNWRAPPING;
    txHash: string;
} | {
    key: UnwrapTokensStep.DONE;
};
export declare type DelegateTokensParams = {
    tokenAddress: string;
    delegatee: string;
};
export declare const enum DelegateTokensStep {
    DELEGATING = "delegating",
    DONE = "done"
}
export declare const enum UndelegateTokensStep {
    UNDELEGATING = "delegating",
    DONE = "done"
}
declare type DelegateTokensStepCommon = {
    key: DelegateTokensStep.DELEGATING | UndelegateTokensStep.UNDELEGATING;
    txHash: string;
} | {
    key: DelegateTokensStep.DONE | UndelegateTokensStep.DONE;
};
export declare type UndelegateTokensStepValue = DelegateTokensStepCommon;
export declare type DelegateTokensStepValue = DelegateTokensStepCommon;
export declare type TokenVotingMember = {
    /** The address of the member */
    address: string;
    /** The balance of the member */
    balance: bigint;
    /** The voting power of the member taking into account the delagation */
    votingPower: bigint;
    /** The address that you delegated yout voting power to
     *  If null, you are not delegating your voting power */
    delegatee: string | null;
    /** The list of addresses that delegated their voting power this member */
    delegators: {
        address: string;
        balance: bigint;
    }[];
};
export {};
