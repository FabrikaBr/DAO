import { ClientCore, CreateMajorityVotingProposalParams, GasFeeEstimation, VoteProposalParams } from "../../../client-common";
import { ITokenVotingClientEstimation } from "../../interfaces";
import { DelegateTokensParams } from "../../types";
/**
 * Estimation module the SDK TokenVoting Client
 */
export declare class TokenVotingClientEstimation extends ClientCore implements ITokenVotingClientEstimation {
    /**
     * Estimates the gas fee of creating a proposal on the plugin
     *
     * @param {CreateMajorityVotingProposalParams} params
     * @return {*}  {Promise<GasFeeEstimation>}
     * @memberof TokenVotingClientEstimation
     */
    createProposal(params: CreateMajorityVotingProposalParams): Promise<GasFeeEstimation>;
    /**
     * Estimates the gas fee of casting a vote on a proposal
     *
     * @param {VoteProposalParams} params
     * @return {*}  {Promise<GasFeeEstimation>}
     * @memberof TokenVotingClientEstimation
     */
    voteProposal(params: VoteProposalParams): Promise<GasFeeEstimation>;
    /**
     * Estimates the gas fee of executing a TokenVoting proposal
     *
     * @param {string} proposalId
     * @return {*}  {Promise<GasFeeEstimation>}
     * @memberof TokenVotingClientEstimation
     */
    executeProposal(proposalId: string): Promise<GasFeeEstimation>;
    /**
     * Estimates the gas fee of delegating voting power to a delegatee
     *
     * @param {DelegateTokensParams} params
     * @return {*}  {Promise<GasFeeEstimation>}
     * @memberof TokenVotingClientEstimation
     */
    delegateTokens(params: DelegateTokensParams): Promise<GasFeeEstimation>;
    /**
     * Estimates the gas fee of undelegating voting power
     *
     * @param {string} tokenAddress
     * @return {*}  {Promise<GasFeeEstimation>}
     * @memberof TokenVotingClientEstimation
     */
    undelegateTokens(tokenAddress: string): Promise<GasFeeEstimation>;
}
