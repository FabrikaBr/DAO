import { ClientCore, DaoAction, PluginInstallItem, VotingSettings } from "../../../client-common";
import { ITokenVotingClientEncoding } from "../../interfaces";
import { MintTokenParams, TokenVotingPluginInstall } from "../../types";
import { Networkish } from "@ethersproject/providers";
/**
 * Encoding module the SDK TokenVoting Client
 */
export declare class TokenVotingClientEncoding extends ClientCore implements ITokenVotingClientEncoding {
    /**
     * Computes the parameters to be given when creating the DAO,
     * so that the plugin is configured
     *
     * @param {TokenVotingPluginInstall} params
     * @param {Networkish} network
     * @return {*}  {PluginInstallItem}
     * @memberof TokenVotingClientEncoding
     */
    static getPluginInstallItem(params: TokenVotingPluginInstall, network: Networkish): PluginInstallItem;
    /**
     * Computes the parameters to be given when creating a proposal that updates the governance configuration
     *
     * @param {string} pluginAddress
     * @param {VotingSettings} params
     * @return {*}  {DaoAction}
     * @memberof TokenVotingClientEncoding
     */
    updatePluginSettingsAction(pluginAddress: string, params: VotingSettings): DaoAction;
    /**
     * Computes the parameters to be given when creating a proposal that mints an amount of ERC-20 tokens to an address
     *
     * @param {string} minterAddress
     * @param {MintTokenParams} params
     * @return {*}  {DaoAction}
     * @memberof TokenVotingClientEncoding
     */
    mintTokenAction(minterAddress: string, params: MintTokenParams): DaoAction;
}
