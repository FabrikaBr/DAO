import { GraphQLClient } from "graphql-request";
import { Context } from "../../client-common/context";
import { IClientGraphQLCore } from "../interfaces";
export declare class GraphqlModule implements IClientGraphQLCore {
    private clientIdx;
    private clients;
    constructor(context: Context);
    /**
     * Get the current graphql client
     * @returns {GraphQLClient}
     */
    getClient(): GraphQLClient;
    /**
     * Starts using the next available Graphql endpoint
     * @returns {void}
     */
    shiftClient(): void;
    /**
     * Checks if the current node is online
     * @returns {Promise<boolean>}
     */
    isUp(): Promise<boolean>;
    /**
     * Ensures that the graphql is online.
     * If the current node is not online
     * it will shift to the next one and
     * repeat until it finds an online
     * node. In the case that there are no
     * nodes or none of them is available
     * it will throw an error
     * @returns {Promise<void>}
     */
    ensureOnline(): Promise<void>;
    request({ query, params, name }: {
        query: string;
        params: {
            [key: string]: any;
        };
        name?: string;
    }): Promise<any>;
}
