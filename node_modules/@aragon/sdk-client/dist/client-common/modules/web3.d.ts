import { Context } from "../../client-common/context";
import { JsonRpcProvider } from "@ethersproject/providers";
import { Contract, ContractInterface } from "@ethersproject/contracts";
import { Signer } from "@ethersproject/abstract-signer";
import { GasFeeEstimation, SupportedNetwork } from "../types/common";
import { IClientWeb3Core } from "../interfaces";
export declare class Web3Module implements IClientWeb3Core {
    private static readonly PRECISION_FACTOR_BASE;
    private providerIdx;
    private context;
    constructor(context: Context);
    /** Starts using the next available Web3 provider */
    shiftProvider(): void;
    /** Retrieves the current signer */
    getSigner(): Signer;
    /** Returns the currently active network provider */
    getProvider(): JsonRpcProvider;
    /** Returns the currently active network */
    getNetworkName(): SupportedNetwork;
    /** Returns a signer connected to the current network provider */
    getConnectedSigner(): Signer;
    /** Returns whether the current provider is functional or not */
    isUp(): Promise<boolean>;
    ensureOnline(): Promise<void>;
    /**
     * Returns a contract instance at the given address
     *
     * @param address Contract instance address
     * @param abi The Application Binary Inteface of the contract
     * @return A contract instance attached to the given address
     */
    attachContract<T>(address: string, abi: ContractInterface): Contract & T;
    /** Calculates the expected maximum gas fee */
    getMaxFeePerGas(): Promise<bigint>;
    getApproximateGasFee(estimatedFee: bigint): Promise<GasFeeEstimation>;
    /** Returns the current DAO factory address */
    getDaoFactoryAddress(): string;
}
