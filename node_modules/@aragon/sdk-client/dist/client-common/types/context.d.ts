import { Signer } from "@ethersproject/abstract-signer";
import { JsonRpcProvider, Network, Networkish } from "@ethersproject/providers";
import { Client as IpfsClient } from "@aragon/sdk-ipfs";
import { GraphQLClient } from "graphql-request";
declare type Web3ContextParams = {
    /** Defaults to mainnet */
    network?: Networkish;
    /** Required for Ethereum transactions to work */
    signer?: Signer;
    /** Required for Ethereum connectivity to work */
    web3Providers?: string | JsonRpcProvider | (string | JsonRpcProvider)[];
    /** If not provided uses default from LIVE_CONTRACTS in the provided network */
    daoFactoryAddress?: string;
    /** If not provided uses default from LIVE_CONTRACTS in the provided network */
    ensRegistryAddress?: string;
    /** If not provided uses default value */
    gasFeeEstimationFactor?: number;
};
declare type IpfsContextParams = {
    /** If not provided uses default value */
    ipfsNodes?: {
        url: string;
        headers?: Record<string, string>;
    }[];
};
declare type GraphQLContextParams = {
    /** If not provided uses default value */
    graphqlNodes?: {
        url: string;
    }[];
};
export declare type ContextParams = Web3ContextParams & IpfsContextParams & GraphQLContextParams;
declare type Web3ContextState = {
    network: Network;
    signer: Signer;
    daoFactoryAddress: string;
    ensRegistryAddress?: string;
    web3Providers: JsonRpcProvider[];
    gasFeeEstimationFactor: number;
};
declare type IpfsContextState = {
    ipfs: IpfsClient[];
};
declare type GraphQLContextState = {
    graphql: GraphQLClient[];
};
export declare type ContextState = Web3ContextState & IpfsContextState & GraphQLContextState;
export declare type ContextPluginState = {};
export declare type ContextPluginParams = ContextParams;
export {};
