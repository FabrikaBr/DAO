import { BigNumber } from "@ethersproject/bignumber";
import { DaoAction, Pagination } from "./common";
/**
 * Contains the states of a proposal. Note that on chain
 * proposals cannot be in draft state
 */
export declare enum ProposalStatus {
    ACTIVE = "Active",
    PENDING = "Pending",
    SUCCEEDED = "Succeeded",
    EXECUTED = "Executed",
    DEFEATED = "Defeated"
}
export declare enum VoteValues {
    ABSTAIN = 1,
    YES = 2,
    NO = 3
}
export declare type MajorityVotingSettingsBase = {
    /** Float between 0 and 1 */
    supportThreshold: number;
    /** Float between 0 and 1 */
    minParticipation: number;
};
export declare type MajorityVotingProposalSettings = MajorityVotingSettingsBase & {
    duration: number;
};
export declare type MajorityVotingSettings = MajorityVotingSettingsBase & {
    votingMode?: VotingMode;
    minDuration: number;
    minProposerVotingPower?: bigint;
};
export declare type VotingSettings = MajorityVotingSettings;
export declare enum VotingMode {
    STANDARD = "Standard",
    EARLY_EXECUTION = "EarlyExecution",
    VOTE_REPLACEMENT = "VoteReplacement"
}
export declare type ContractVotingSettings = [BigNumber, // votingMode
BigNumber, // supportThreshold
BigNumber, // minParticipation
BigNumber, // minDuration
BigNumber];
export declare type CreateProposalBaseParams = {
    pluginAddress: string;
    actions?: DaoAction[];
    /** For every action item, denotes whether its execution could fail
     * without aborting the whole proposal execution */
    failSafeActions?: Array<boolean>;
    metadataUri: string;
};
export declare type CreateMajorityVotingProposalParams = CreateProposalBaseParams & {
    startDate?: Date;
    endDate?: Date;
    executeOnPass?: boolean;
    creatorVote?: VoteValues;
};
export declare type VoteProposalParams = {
    vote: VoteValues;
    proposalId: string;
};
export declare type CanVoteParams = {
    proposalId: string;
    voterAddressOrEns: string;
    vote: VoteValues;
};
/**
 * Contains the human-readable information about a proposal
 */
export declare type ProposalMetadata = {
    title: string;
    summary: string;
    description: string;
    resources: Array<{
        url: string;
        name: string;
    }>;
    media?: {
        header?: string;
        logo?: string;
    };
};
/**
 * Contains the human-readable information about a proposal
 */
export declare type ProposalMetadataSummary = {
    title: string;
    summary: string;
};
export declare type ProposalBase = {
    id: string;
    dao: {
        address: string;
        name: string;
    };
    creatorAddress: string;
    metadata: ProposalMetadata;
    startDate: Date;
    endDate: Date;
    creationDate: Date;
    actions: Array<DaoAction>;
    status: ProposalStatus;
    creationBlockNumber: number;
    executionDate: Date | null;
    executionBlockNumber: number | null;
    executionTxHash: string | null;
};
export declare type ProposalVoteBase = {
    address: string;
    vote: VoteValues;
    voteReplaced: boolean;
};
export declare type ProposalListItemBase = {
    id: string;
    dao: {
        address: string;
        name: string;
    };
    creatorAddress: string;
    metadata: ProposalMetadataSummary;
    startDate: Date;
    endDate: Date;
    status: ProposalStatus;
};
export declare enum SubgraphVoteValues {
    YES = "Yes",
    NO = "No",
    ABSTAIN = "Abstain"
}
export declare const SubgraphVoteValuesMap: Map<SubgraphVoteValues, VoteValues>;
export declare type SubgraphVoterListItemBase = {
    voter: {
        address: string;
    };
    voteReplaced: boolean;
    voteOption: SubgraphVoteValues;
};
export declare type SubgraphAction = {
    to: string;
    value: string;
    data: string;
};
export declare type SubgraphProposalBase = {
    id: string;
    dao: {
        id: string;
        subdomain: string;
    };
    creator: string;
    metadata: string;
    yes: string;
    no: string;
    abstain: string;
    startDate: string;
    endDate: string;
    executed: boolean;
    potentiallyExecutable: boolean;
};
export interface IComputeStatusProposal {
    startDate: string;
    endDate: string;
    executed: boolean;
    earlyExecutable?: boolean;
    potentiallyExecutable: boolean;
}
export declare type ProposalQueryParams = Pagination & {
    sortBy?: ProposalSortBy;
    status?: ProposalStatus;
    daoAddressOrEns?: string;
};
export declare enum ProposalSortBy {
    CREATED_AT = "createdAt"
}
export declare enum ProposalCreationSteps {
    CREATING = "creating",
    DONE = "done"
}
export declare type ProposalCreationStepValue = {
    key: ProposalCreationSteps.CREATING;
    txHash: string;
} | {
    key: ProposalCreationSteps.DONE;
    proposalId: string;
};
export declare enum VoteProposalStep {
    VOTING = "voting",
    DONE = "done"
}
export declare type VoteProposalStepValue = {
    key: VoteProposalStep.VOTING;
    txHash: string;
} | {
    key: VoteProposalStep.DONE;
};
export declare enum ExecuteProposalStep {
    EXECUTING = "executing",
    DONE = "done"
}
export declare type ExecuteProposalStepValue = {
    key: ExecuteProposalStep.EXECUTING;
    txHash: string;
} | {
    key: ExecuteProposalStep.DONE;
};
export declare type ContractPluginSettings = [BigNumber, BigNumber, BigNumber];
export declare type SubgraphVotingSettings = {
    minDuration: string;
    minProposerVotingPower: string;
    minParticipation: string;
    supportThreshold: string;
    votingMode: VotingMode;
};
export declare type SubgraphMembers = {
    members: {
        address: string;
    }[];
};
export declare enum PrepareInstallationStep {
    PREPARING = "preparing",
    DONE = "done"
}
export declare type PrepareInstallationStepValue = {
    key: PrepareInstallationStep.PREPARING;
    txHash: string;
} | {
    key: PrepareInstallationStep.DONE;
} & ApplyInstallationParams;
export declare type ApplyInstallationParamsBase = {
    permissions: MultiTargetPermission[];
    versionTag: VersionTag;
    pluginRepo: string;
    pluginAddress: string;
};
export declare type ApplyInstallationParams = ApplyInstallationParamsBase & {
    helpers: string[];
};
export declare type DecodedApplyInstallationParams = ApplyInstallationParamsBase & {
    helpersHash: string;
};
export declare type VersionTag = {
    build: number;
    release: number;
};
export declare enum PermissionOperationType {
    GRANT = 0,
    REVOKE = 1,
    GRANT_WITH_CONDITION = 2
}
export declare type MultiTargetPermission = {
    operation: PermissionOperationType;
    where: string;
    who: string;
    condition?: string;
    permissionId: string;
};
