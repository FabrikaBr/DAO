import { IAddresslistVotingClientMethods } from "../../interfaces";
import { CanVoteParams, ClientCore, CreateMajorityVotingProposalParams, ExecuteProposalStepValue, PrepareInstallationStepValue, ProposalCreationStepValue, ProposalMetadata, ProposalQueryParams, VoteProposalParams, VoteProposalStepValue, VotingSettings } from "../../../client-common";
import { AddresslistVotingPluginPrepareInstallationParams, AddresslistVotingProposal, AddresslistVotingProposalListItem } from "../../types";
/**
 * Methods module the SDK Address List Client
 */
export declare class AddresslistVotingClientMethods extends ClientCore implements IAddresslistVotingClientMethods {
    /**
     * Creates a new proposal on the given AddressList plugin contract
     *
     * @param {CreateMajorityVotingProposalParams} params
     * @return {*}  {AsyncGenerator<ProposalCreationStepValue>}
     * @memberof AddresslistVotingClientMethods
     */
    createProposal(params: CreateMajorityVotingProposalParams): AsyncGenerator<ProposalCreationStepValue>;
    /**
     * Pins a metadata object into IPFS and retruns the generated hash
     *
     * @param {ProposalMetadata} params
     * @return {*}  {Promise<string>}
     * @memberof ClientMethods
     */
    pinMetadata(params: ProposalMetadata): Promise<string>;
    /**
     * Cast a vote on the given proposal using the client's wallet. Depending on the proposal settings, an affirmative vote may execute the proposal's actions on the DAO.
     *
     * @param {VoteProposalParams} params
     * @return {*}  {AsyncGenerator<VoteProposalStepValue>}
     * @memberof AddresslistVotingClientMethods
     */
    voteProposal(params: VoteProposalParams): AsyncGenerator<VoteProposalStepValue>;
    /**
     * Executes the given proposal, provided that it has already passed
     *
     * @param {string} proposalId
     * @return {*}  {AsyncGenerator<ExecuteProposalStepValue>}
     * @memberof AddresslistVotingClientMethods
     */
    executeProposal(proposalId: string): AsyncGenerator<ExecuteProposalStepValue>;
    /**
     * Prepares the installation of a token voting plugin in a given dao
     *
     * @param {AddresslistVotingPluginPrepareInstallationParams} params
     * @return {*}  {AsyncGenerator<PrepareInstallationStepValue>}
     * @memberof MultisigClientMethods
     */
    prepareInstallation(params: AddresslistVotingPluginPrepareInstallationParams): AsyncGenerator<PrepareInstallationStepValue>;
    /**
     * Checks if an user can vote in a proposal
     *
     * @param {CanVoteParams} params
     * @return {*}  {Promise<boolean>}
     * @memberof AddresslistVotingClientMethods
     */
    canVote(params: CanVoteParams): Promise<boolean>;
    /**
     * Checks whether the current proposal can be executed
     *
     * @param {string} proposalId
     * @return {*}  {Promise<boolean>}
     * @memberof AddresslistVotingClientMethods
     */
    canExecute(proposalId: string): Promise<boolean>;
    /**
     * Returns the list of wallet addresses with signing capabilities on the plugin
     *
     * @async
     * @param {string} pluginAddress
     * @return {*}  {Promise<string[]>}
     * @memberof AddresslistVotingClientMethods
     */
    getMembers(pluginAddress: string): Promise<string[]>;
    /**
     * Returns the details of the given proposal
     *
     * @param {string} proposalId
     * @return {*}  {(Promise<AddresslistVotingProposal | null>)}
     * @memberof AddresslistVotingClientMethods
     */
    getProposal(proposalId: string): Promise<AddresslistVotingProposal | null>;
    /**
     * Returns a list of proposals on the Plugin, filtered by the given criteria
     *
     * @param {ProposalQueryParams} {
     *       daoAddressOrEns,
     *       limit = 10,
     *       status,
     *       skip = 0,
     *       direction = SortDirection.ASC,
     *       sortBy = ProposalSortBy.CREATED_AT,
     *     }
     * @return {*}  {Promise<AddresslistVotingProposalListItem[]>}
     * @memberof AddresslistVotingClientMethods
     */
    getProposals({ daoAddressOrEns, limit, status, skip, direction, sortBy, }: ProposalQueryParams): Promise<AddresslistVotingProposalListItem[]>;
    /**
     * Returns the settings of a plugin given the address of the plugin instance
     *
     * @param {string} pluginAddress
     * @return {*}  {(Promise<VotingSettings | null>)}
     * @memberof AddresslistVotingClientMethods
     */
    getVotingSettings(pluginAddress: string): Promise<VotingSettings | null>;
}
