{"version":3,"file":"sdk-client.esm.js","sources":["../src/internal/abi/erc20.ts","../src/internal/graphql-queries/dao.ts","../src/internal/graphql-queries/balances.ts","../src/internal/graphql-queries/transfer.ts","../src/internal/graphql-queries/plugin.ts","../src/types.ts","../src/internal/types.ts","../src/client-common/types/plugin.ts","../src/client-common/types/common.ts","../src/client-common/modules/web3.ts","../src/client-common/modules/ipfs.ts","../src/client-common/graphql-queries/status.ts","../src/client-common/modules/graphql.ts","../src/client-common/core.ts","../src/client-common/constants.ts","../src/client-common/context.ts","../src/client-common/context-plugin.ts","../src/client-common/utils.ts","../src/client-common/encoding.ts","../src/constants.ts","../src/internal/utils.ts","../src/internal/constants.ts","../src/internal/client/methods.ts","../src/internal/client/encoding.ts","../src/internal/client/estimation.ts","../src/internal/client/decoding.ts","../src/client.ts","../src/addresslistVoting/internal/graphql-queries/members.ts","../src/addresslistVoting/internal/graphql-queries/proposal.ts","../src/addresslistVoting/internal/graphql-queries/settings.ts","../src/addresslistVoting/internal/utils.ts","../src/addresslistVoting/internal/client/encoding.ts","../src/addresslistVoting/internal/client/methods.ts","../src/addresslistVoting/internal/constants.ts","../src/addresslistVoting/internal/client/decoding.ts","../src/addresslistVoting/internal/client/estimation.ts","../src/addresslistVoting/client.ts","../src/tokenVoting/types.ts","../src/tokenVoting/internal/types.ts","../src/tokenVoting/internal/graphql-queries/proposal.ts","../src/tokenVoting/internal/graphql-queries/settings.ts","../src/tokenVoting/internal/graphql-queries/token.ts","../src/tokenVoting/internal/graphql-queries/members.ts","../src/tokenVoting/internal/utils.ts","../src/tokenVoting/internal/client/encoding.ts","../src/tokenVoting/internal/client/methods.ts","../src/tokenVoting/internal/constants.ts","../src/tokenVoting/internal/client/decoding.ts","../src/tokenVoting/internal/client/estimation.ts","../src/tokenVoting/client.ts","../src/multisig/types.ts","../src/multisig/internal/graphql-queries/proposal.ts","../src/multisig/internal/graphql-queries/settings.ts","../src/multisig/internal/graphql-queries/members.ts","../src/multisig/internal/utils.ts","../src/multisig/internal/client/encoding.ts","../src/multisig/internal/client/methods.ts","../src/multisig/internal/constants.ts","../src/multisig/internal/client/decoding.ts","../src/multisig/internal/client/estimation.ts","../src/multisig/client.ts"],"sourcesContent":["import { ContractInterface } from \"@ethersproject/contracts\";\n\nexport const erc20ContractAbi: ContractInterface = [\n  {\n    name: \"Transfer\",\n    inputs: [\n      { type: \"address\", name: \"sender\", indexed: true },\n      { type: \"address\", name: \"receiver\", indexed: true },\n      { type: \"uint256\", name: \"value\", indexed: false },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    name: \"Approval\",\n    inputs: [\n      { type: \"address\", name: \"owner\", indexed: true },\n      { type: \"address\", name: \"spender\", indexed: true },\n      { type: \"uint256\", name: \"value\", indexed: false },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    name: \"transfer\",\n    outputs: [{ type: \"bool\", name: \"\" }],\n    inputs: [\n      { type: \"address\", name: \"_to\" },\n      { type: \"uint256\", name: \"_value\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    name: \"approve\",\n    outputs: [{ type: \"bool\", name: \"\" }],\n    inputs: [\n      { type: \"address\", name: \"_spender\" },\n      { type: \"uint256\", name: \"_value\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    name: \"symbol\",\n    outputs: [{ type: \"string\", name: \"\" }],\n    inputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    name: \"decimals\",\n    outputs: [{ type: \"uint256\", name: \"\" }],\n    inputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    name: \"balanceOf\",\n    outputs: [{ type: \"uint256\", name: \"\" }],\n    inputs: [{ type: \"address\", name: \"arg0\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    name: \"allowance\",\n    outputs: [{ type: \"uint256\", name: \"\" }],\n    inputs: [\n      { type: \"address\", name: \"arg0\" },\n      { type: \"address\", name: \"arg1\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    name: \"totalSupply\",\n    outputs: [{ type: \"uint256\", name: \"\" }],\n    inputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","import { gql } from \"graphql-request\";\n\nexport const QueryDao = gql`\n  query Dao($address: ID!) {\n    dao(id: $address){\n      id\n      subdomain\n      metadata\n      createdAt\n      plugins{\n        appliedPreparation {\n          pluginAddress\n        }\n        appliedPluginRepo {\n          subdomain\n        }\n        appliedVersion{\n          build\n          release {\n            release\n          }\n        }\n      }\n    }\n  }\n`;\nexport const QueryDaos = gql`\n  query Daos ($limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: Dao_orderBy!) {\n    daos(first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n      id\n      subdomain\n      metadata\n      plugins{\n        appliedPreparation {\n          pluginAddress\n        }\n        appliedPluginRepo {\n          subdomain\n        }\n        appliedVersion{\n          build\n          release {\n            release\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const QueryDaoTransfersByAddress = gql`\nquery DaoTransfersByAddress($address: ID!) {\n  dao(id: $address) {\n    withdraws {\n      id\n      token {\n        symbol\n        decimals\n        symbol\n      }\n      to\n      dao {\n        id\n        subdomain\n      }\n      amount\n      reference\n      transaction\n      creationDate\n    }\n    deposits {\n      id\n      token {\n        symbol\n        decimals\n        symbol\n      }\n      sender\n      dao {\n        id\n        subdomain\n      }\n      amount\n      reference\n      transaction\n      creationDate\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenBalances = gql`\nquery TokenBalances($where: TokenBalance_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenBalance_orderBy!) {\n  tokenBalances (where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy) {\n    lastUpdated\n    __typename\n    ... on ERC20Balance {\n      balance\n      token {\n        name\n        decimals\n        symbol\n        id\n      }\n    }\n    ... on ERC721Balance {\n      token {\n        name\n        symbol\n        id\n      }\n    }\n    ... on NativeBalance {\n      balance\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenTransfers = gql`\nquery TokenTransfers($where: TokenTransfer_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenTransfer_orderBy!) {\n  tokenTransfers (where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy) {\n    from\n    to\n    type\n    createdAt\n    txHash\n    proposal{\n      id\n    }\n    __typename\n    ... on ERC20Transfer {\n      amount\n      token {\n        id\n        name\n        symbol\n        decimals\n      }\n    }\n    ... on ERC721Transfer {\n      token{\n      \tid\n        name\n        symbol\n      }\n      \n    }\n    ... on NativeTransfer {\n      amount\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryPlugins = gql`\nquery Plugins($where: PluginRepo_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: PluginRepo_orderBy!) {\n  pluginRepos(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    subdomain\n    releases{\n      release\n      metadata\n      builds{\n        build\n      }\n    }\n  }\n}\n`;\n\nexport const QueryPlugin = gql`\nquery Plugin($id: ID!) {\n  pluginRepo(id:$id){\n    subdomain\n    releases(orderBy: release, orderDirection: desc, first: 1){\n      release\n      metadata\n      builds(orderBy: build, orderDirection: desc, first: 1){\n        build\n        metadata\n      }\n    }\n  }\n}\n`;\n\nexport const QueryIPlugin = gql`\nquery IPlugin($address: ID!, $where: IPlugin_filter!) {\n\tiplugin(id:$address, where:$where){\n    installations(where:{state: Installed}) {\n      appliedPreparation{\n        helpers\n        pluginRepo {\n          id\n        }\n      }\n     \tappliedVersion {\n        metadata\n        build\n        release{\n          release\n        }\n      }\n    }   \n  }\n}\n`;\n","import {\n  ApplyInstallationParamsBase,\n  Pagination,\n  PluginInstallItem,\n  TokenType,\n} from \"./client-common\";\n\n/* DAO creation */\nexport type CreateDaoParams = {\n  metadataUri: string;\n  daoUri?: string;\n  ensSubdomain: string;\n  trustedForwarder?: string;\n  plugins: PluginInstallItem[];\n};\n\nexport enum DaoCreationSteps {\n  CREATING = \"creating\",\n  DONE = \"done\",\n}\n\nexport type DaoCreationStepValue =\n  | { key: DaoCreationSteps.CREATING; txHash: string }\n  | { key: DaoCreationSteps.DONE; address: string; pluginAddresses: string[] };\n\n/* DAOs */\nexport type DaoResourceLink = { name: string; url: string };\nexport type DaoMetadata = {\n  name: string;\n  description: string;\n  avatar?: string;\n  links: DaoResourceLink[];\n};\nexport type DaoDetails = {\n  address: string;\n  ensDomain: string;\n  metadata: DaoMetadata;\n  creationDate: Date;\n  plugins: InstalledPluginListItem[];\n};\n\nexport type DaoListItem = {\n  address: string;\n  ensDomain: string;\n  metadata: {\n    name: string;\n    description: string;\n    avatar?: string;\n  };\n  plugins: InstalledPluginListItem[];\n};\n\nexport type DaoQueryParams = Pagination & {\n  sortBy?: DaoSortBy;\n};\n\nexport enum DaoSortBy {\n  CREATED_AT = \"createdAt\",\n  SUBDOMAIN = \"subdomain\",\n  // POPULARITY = \"totalProposals\", // currently defined as number of proposals\n}\n\n/* Plugins */\n\nexport type InstalledPluginListItem = {\n  id: string;\n  instanceAddress: string;\n  release: number;\n  build: number;\n};\n\nexport enum PluginSortBy {\n  SUBDOMAIN = \"subdomain\",\n}\n\nexport type PluginQueryParams = Pagination & {\n  sortBy?: PluginSortBy;\n  subdomain?: string;\n};\n\n/* Plugin repos */\n\nexport type PluginRepoReleaseMetadata = {\n  name: string;\n  description: string;\n  images: Object; // TODO specify parameters\n};\n\nexport type PluginRepoBuildMetadata = {\n  ui: string;\n  change: string;\n  pluginSetupABI: {\n    prepareInstallation: string[];\n    prepareUpdate: string[];\n    prepareUninstallation: string[];\n  };\n};\n\nexport type PluginRepoRelease = {\n  release: number;\n  metadata: PluginRepoReleaseMetadata;\n  currentBuild: number;\n};\n\nexport type PluginRepoListItem = {\n  address: string;\n  subdomain: string;\n  releases: PluginRepoRelease[];\n};\n\nexport type PluginRepo = {\n  address: string;\n  subdomain: string;\n  current: {\n    build: {\n      number: number;\n      metadata: PluginRepoBuildMetadata;\n    };\n    release: {\n      number: number;\n      metadata: PluginRepoReleaseMetadata;\n    };\n  };\n};\n\n/* Deposits */\ntype DepositBaseParams = {\n  daoAddressOrEns: string;\n};\n\nexport type DepositEthParams = DepositBaseParams & {\n  type: TokenType.NATIVE;\n  amount: bigint;\n};\nexport type DepositErc20Params = DepositBaseParams & {\n  type: TokenType.ERC20;\n  tokenAddress: string;\n  amount: bigint;\n};\n// export type DepositErc721Params = DepositBaseParams & {\n//   type: TokenType.ERC721;\n//   tokenAddress: string;\n// };\n\nexport type DepositParams = DepositEthParams | DepositErc20Params; // | DepositErc721Params;\n\nexport enum DaoDepositSteps {\n  CHECKED_ALLOWANCE = \"checkedAllowance\",\n  DEPOSITING = \"depositing\",\n  DONE = \"done\",\n}\n\nexport type DaoDepositStepValue =\n  | SetAllowanceStepValue\n  | { key: DaoDepositSteps.CHECKED_ALLOWANCE; allowance: bigint }\n  | { key: DaoDepositSteps.DEPOSITING; txHash: string }\n  | { key: DaoDepositSteps.DONE; amount: bigint };\n\n/* Withdrawals */\ntype WithdrawParamsBase = {\n  recipientAddressOrEns: string;\n};\n\ntype WithdrawEthParams = WithdrawParamsBase & {\n  type: TokenType.NATIVE;\n  amount: bigint;\n};\n\ntype WithdrawErc20Params = WithdrawParamsBase & {\n  type: TokenType.ERC20;\n  amount: bigint;\n  tokenAddress: string;\n};\n\nexport type WithdrawParams = WithdrawEthParams | WithdrawErc20Params;\n\n/* Balances */\ntype AssetBalanceBase = {\n  address: string;\n  name: string;\n  symbol: string;\n  updateDate: Date;\n};\n\ntype NativeAssetBalance = {\n  type: TokenType.NATIVE;\n  balance: bigint;\n  updateDate: Date;\n};\ntype Erc20AssetBalance = AssetBalanceBase & {\n  type: TokenType.ERC20;\n  balance: bigint;\n  decimals: number;\n};\ntype Erc721AssetBalance = AssetBalanceBase & {\n  type: TokenType.ERC721;\n};\n\nexport type DaoBalancesQueryParams = Pagination & {\n  sortBy?: AssetBalanceSortBy;\n  daoAddressOrEns?: string;\n};\nexport enum AssetBalanceSortBy {\n  LAST_UPDATED = \"lastUpdated\",\n}\n\nexport type AssetBalance =\n  | NativeAssetBalance\n  | Erc20AssetBalance\n  | Erc721AssetBalance;\n\n/* Transfers */\n\ntype TokenTransferBase = {\n  creationDate: Date;\n  transactionId: string;\n  to: string;\n  from: string;\n};\n\ntype TokenBase = {\n  address: string;\n  name: string;\n  symbol: string;\n};\n\ntype NativeTokenTransfer = TokenTransferBase & {\n  tokenType: TokenType.NATIVE;\n  amount: bigint;\n};\n\ntype Erc721TokenTransfer = TokenTransferBase & {\n  tokenType: TokenType.ERC721;\n  token: TokenBase;\n};\n\ntype Erc20TokenTransfer = TokenTransferBase & {\n  tokenType: TokenType.ERC20;\n  amount: bigint;\n  token: TokenBase & {\n    decimals: number;\n  };\n};\n\nexport enum TransferType {\n  DEPOSIT = \"deposit\",\n  WITHDRAW = \"withdraw\",\n}\n\nexport type Deposit =\n  & (NativeTokenTransfer | Erc20TokenTransfer | Erc721TokenTransfer)\n  & {\n    type: TransferType.DEPOSIT;\n  };\n\nexport type Withdraw =\n  & (NativeTokenTransfer | Erc20TokenTransfer | Erc721TokenTransfer)\n  & {\n    type: TransferType.WITHDRAW;\n    proposalId: string;\n  };\n\nexport type TransferQueryParams = Pagination & {\n  sortBy?: TransferSortBy;\n  type?: TransferType;\n  daoAddressOrEns?: string;\n};\nexport enum TransferSortBy {\n  CREATED_AT = \"createdAt\",\n}\n\nexport type Transfer = Deposit | Withdraw;\n\n/* Allowance */\nexport type SetAllowanceParams = {\n  spender: string;\n  amount: bigint;\n  tokenAddress: string;\n};\n\nexport enum SetAllowanceSteps {\n  SETTING_ALLOWANCE = \"settingAllowance\",\n  ALLOWANCE_SET = \"allowanceSet\",\n}\n\nexport type SetAllowanceStepValue =\n  | { key: SetAllowanceSteps.SETTING_ALLOWANCE; txHash: string }\n  | { key: SetAllowanceSteps.ALLOWANCE_SET; allowance: bigint };\n\n/* Uninstallation */\nexport type PrepareUninstallationParams = {\n  daoAddressOrEns: string;\n  pluginAddress: string;\n  pluginInstallationIndex?: number;\n  uninstallationParams?: any[];\n  uninstallationAbi?: string[];\n};\nexport enum PrepareUninstallationSteps {\n  PREPARING = \"preparing\",\n  DONE = \"done\",\n}\nexport type PrepareUninstallationStepValue =\n  | { key: PrepareUninstallationSteps.PREPARING; txHash: string }\n  | {\n    key: PrepareUninstallationSteps.DONE;\n  } & ApplyUninstallationParams;\n\nexport type ApplyUninstallationParams = ApplyInstallationParamsBase;\nexport type DecodedApplyUninstallationParams = ApplyInstallationParamsBase;\n\n/* Permissions */\ntype PermissionParamsBase = {\n  where: string;\n  who: string;\n  permission: string;\n};\ntype PermissionDecodedParamsBase = PermissionParamsBase & {\n  permissionId: string;\n};\nexport type GrantPermissionParams = PermissionParamsBase;\nexport type RevokePermissionParams = PermissionParamsBase;\nexport type GrantPermissionDecodedParams = PermissionDecodedParamsBase;\nexport type RevokePermissionDecodedParams = PermissionDecodedParamsBase;\n\nexport type GrantPermissionWithConditionParams = PermissionParamsBase & {\n  condition: string;\n};\nexport type GrantPermissionWithConditionDecodedParams = PermissionParamsBase & {\n  condition: string;\n  permissionId: string;\n};\n\nexport type HasPermissionParams = PermissionParamsBase & {\n  daoAddressOrEns: string;\n  data?: Uint8Array;\n};\n\nexport type RegisterStandardCallbackParams = {\n  interfaceId: string;\n  callbackSelector: string;\n  magicNumber: string;\n};\n\nexport type UpgradeToAndCallParams = {\n  implementationAddress: string;\n  data: Uint8Array;\n};\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { TransferType } from \"../types\";\n\nexport type SubgraphPluginListItem = {\n  appliedPreparation: {\n    pluginAddress: string;\n  };\n  appliedPluginRepo: {\n    subdomain: string;\n  };\n  appliedVersion: {\n    build: number;\n    release: {\n      release: number;\n    };\n  };\n};\n\ntype SubgraphDaoBase = {\n  id: string;\n  subdomain: string;\n  metadata: string;\n  plugins: SubgraphPluginListItem[];\n};\n\nexport type SubgraphDao = SubgraphDaoBase & {\n  createdAt: string;\n};\n\nexport type SubgraphDaoListItem = SubgraphDaoBase;\n\nexport type SubgraphBalance = {\n  __typename: string;\n  token: {\n    id: string;\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  balance: string;\n  lastUpdated: string;\n};\n\nexport enum SubgraphTransferType {\n  DEPOSIT = \"Deposit\",\n  WITHDRAW = \"Withdraw\",\n}\n\nexport type SubgraphTransferListItem = {\n  from: string;\n  to: string;\n  type: SubgraphTransferType;\n  createdAt: string;\n  txHash: string;\n  proposal: {\n    id: string | null;\n  };\n  amount: string;\n  token: SubgraphToken;\n  __typename: string;\n};\n\nexport type SubgraphToken = {\n  id: string;\n  name: string;\n  symbol: string;\n  decimals: number;\n};\nexport const SubgraphTransferTypeMap: Map<\n  TransferType,\n  SubgraphTransferType\n> = new Map([\n  [TransferType.DEPOSIT, SubgraphTransferType.DEPOSIT],\n  [TransferType.WITHDRAW, SubgraphTransferType.WITHDRAW],\n]);\n\nexport type ContractPermissionParams = [string, string, string];\nexport type ContractPermissionWithConditionParams = [\n  string,\n  string,\n  string,\n  string,\n];\nexport type ContractWithdrawParams = [string, string, BigNumber, string];\n\nexport type SubgraphPluginRepoReleaseListItem = {\n  release: number;\n  metadata: string;\n  builds: {\n    build: number;\n  }[];\n};\n\nexport type SubgraphPluginRepoRelease = SubgraphPluginRepoReleaseListItem & {\n  builds: {\n    build: number;\n    metadata: string;\n  }[];\n};\n\nexport type SubgraphPluginRepoListItem = {\n  id: string;\n  subdomain: string;\n  releases: SubgraphPluginRepoReleaseListItem[];\n};\n\nexport type SubgraphPluginRepo = SubgraphPluginRepoListItem & {\n  releases: SubgraphPluginRepoRelease[];\n};\n\nexport type SubgraphPluginVersion = {\n  release: {\n    release: number;\n  };\n  metadata: string;\n  build: number;\n};\n\nexport type SubgraphPluginPreparation = {\n  helpers: string[];\n  pluginRepo: {\n    id: string;\n  };\n};\n\nexport type SubgraphPluginInstallation = {\n  appliedVersion: SubgraphPluginVersion;\n  appliedPreparation: SubgraphPluginPreparation;\n};\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { DaoAction, Pagination } from \"./common\";\n\n/**\n * Contains the states of a proposal. Note that on chain\n * proposals cannot be in draft state\n */\nexport enum ProposalStatus {\n  ACTIVE = \"Active\",\n  PENDING = \"Pending\",\n  SUCCEEDED = \"Succeeded\",\n  EXECUTED = \"Executed\",\n  DEFEATED = \"Defeated\",\n}\n\nexport enum VoteValues {\n  // NONE = 0,\n  ABSTAIN = 1,\n  YES = 2,\n  NO = 3,\n}\n\n// TYPES\n\nexport type MajorityVotingSettingsBase = {\n  /** Float between 0 and 1 */\n  supportThreshold: number;\n  /** Float between 0 and 1 */\n  minParticipation: number;\n};\n\nexport type MajorityVotingProposalSettings = MajorityVotingSettingsBase & {\n  duration: number;\n};\nexport type MajorityVotingSettings = MajorityVotingSettingsBase & {\n  /* default is standard */\n  votingMode?: VotingMode;\n  /* minimum is 3600 */\n  minDuration: number;\n  /* default is 0 */\n  minProposerVotingPower?: bigint;\n};\n\nexport type VotingSettings = MajorityVotingSettings;\n\nexport enum VotingMode {\n  STANDARD = \"Standard\",\n  EARLY_EXECUTION = \"EarlyExecution\",\n  VOTE_REPLACEMENT = \"VoteReplacement\",\n}\n\nexport type ContractVotingSettings = [\n  BigNumber, // votingMode\n  BigNumber, // supportThreshold\n  BigNumber, // minParticipation\n  BigNumber, // minDuration\n  BigNumber, // minProposerVotingPower\n];\n\nexport type CreateProposalBaseParams = {\n  pluginAddress: string;\n  actions?: DaoAction[];\n  /** For every action item, denotes whether its execution could fail\n   * without aborting the whole proposal execution */\n  failSafeActions?: Array<boolean>;\n  metadataUri: string;\n};\n\nexport type CreateMajorityVotingProposalParams = CreateProposalBaseParams & {\n  startDate?: Date;\n  endDate?: Date;\n  executeOnPass?: boolean;\n  creatorVote?: VoteValues;\n};\n\nexport type VoteProposalParams = {\n  vote: VoteValues;\n  proposalId: string;\n};\n\nexport type CanVoteParams = {\n  proposalId: string;\n  voterAddressOrEns: string;\n  vote: VoteValues;\n};\n\n/**\n * Contains the human-readable information about a proposal\n */\nexport type ProposalMetadata = {\n  title: string;\n  summary: string;\n  description: string;\n  resources: Array<{ url: string; name: string }>;\n  media?: {\n    header?: string;\n    logo?: string;\n  };\n};\n\n/**\n * Contains the human-readable information about a proposal\n */\nexport type ProposalMetadataSummary = {\n  title: string;\n  summary: string;\n};\n\n// Long version\nexport type ProposalBase = {\n  id: string;\n  dao: {\n    address: string;\n    name: string;\n  };\n  creatorAddress: string;\n  metadata: ProposalMetadata;\n  startDate: Date;\n  endDate: Date;\n  creationDate: Date;\n  actions: Array<DaoAction>;\n  status: ProposalStatus;\n  creationBlockNumber: number;\n  executionDate: Date | null;\n  executionBlockNumber: number | null;\n  executionTxHash: string | null;\n};\n\nexport type ProposalVoteBase = {\n  address: string;\n  vote: VoteValues;\n  voteReplaced: boolean;\n};\n\n// Short version\nexport type ProposalListItemBase = {\n  id: string;\n  dao: {\n    address: string;\n    name: string;\n  };\n  creatorAddress: string;\n  metadata: ProposalMetadataSummary;\n  startDate: Date;\n  endDate: Date;\n  status: ProposalStatus;\n};\n\nexport enum SubgraphVoteValues {\n  YES = \"Yes\",\n  NO = \"No\",\n  ABSTAIN = \"Abstain\",\n}\nexport const SubgraphVoteValuesMap: Map<\n  SubgraphVoteValues,\n  VoteValues\n> = new Map([\n  [SubgraphVoteValues.YES, VoteValues.YES],\n  [SubgraphVoteValues.NO, VoteValues.NO],\n  [SubgraphVoteValues.ABSTAIN, VoteValues.ABSTAIN],\n]);\n\nexport type SubgraphVoterListItemBase = {\n  voter: {\n    address: string;\n  };\n  voteReplaced: boolean;\n  voteOption: SubgraphVoteValues;\n};\n\nexport type SubgraphAction = {\n  to: string;\n  value: string;\n  data: string;\n};\n\nexport type SubgraphProposalBase = {\n  id: string;\n  dao: {\n    id: string;\n    subdomain: string;\n  };\n  creator: string;\n  metadata: string;\n  yes: string;\n  no: string;\n  abstain: string;\n  startDate: string;\n  endDate: string;\n  executed: boolean;\n  potentiallyExecutable: boolean;\n};\n\nexport interface IComputeStatusProposal {\n  startDate: string;\n  endDate: string;\n  executed: boolean;\n  earlyExecutable?: boolean;\n  potentiallyExecutable: boolean;\n}\n\nexport type ProposalQueryParams = Pagination & {\n  sortBy?: ProposalSortBy;\n  status?: ProposalStatus;\n  daoAddressOrEns?: string;\n};\n\nexport enum ProposalSortBy {\n  CREATED_AT = \"createdAt\",\n  // POPULARITY = \"popularity\",\n  // VOTES = \"votes\",\n}\n\n// STEPS\n\n// PROPOSAL CREATION\nexport enum ProposalCreationSteps {\n  CREATING = \"creating\",\n  DONE = \"done\",\n}\n\nexport type ProposalCreationStepValue =\n  | { key: ProposalCreationSteps.CREATING; txHash: string }\n  | { key: ProposalCreationSteps.DONE; proposalId: string };\n\n// PROPOSAL VOTING\nexport enum VoteProposalStep {\n  VOTING = \"voting\",\n  DONE = \"done\",\n}\n\nexport type VoteProposalStepValue =\n  | { key: VoteProposalStep.VOTING; txHash: string }\n  | { key: VoteProposalStep.DONE };\n\n// PROPOSAL EXECUTION\nexport enum ExecuteProposalStep {\n  EXECUTING = \"executing\",\n  DONE = \"done\",\n}\n\nexport type ExecuteProposalStepValue =\n  | { key: ExecuteProposalStep.EXECUTING; txHash: string }\n  | { key: ExecuteProposalStep.DONE };\n\nexport type ContractPluginSettings = [BigNumber, BigNumber, BigNumber];\n\nexport type SubgraphVotingSettings = {\n  minDuration: string;\n  minProposerVotingPower: string;\n  minParticipation: string;\n  supportThreshold: string;\n  votingMode: VotingMode;\n};\n\nexport type SubgraphMembers = {\n  members: {\n    address: string;\n  }[];\n};\nexport enum PrepareInstallationStep {\n  PREPARING = \"preparing\",\n  DONE = \"done\",\n}\n\nexport type PrepareInstallationStepValue =\n  | { key: PrepareInstallationStep.PREPARING; txHash: string }\n  | {\n    key: PrepareInstallationStep.DONE;\n  } & ApplyInstallationParams;\n\nexport type ApplyInstallationParamsBase = {\n  permissions: MultiTargetPermission[];\n  versionTag: VersionTag;\n  pluginRepo: string;\n  pluginAddress: string;\n};\n\nexport type ApplyInstallationParams = ApplyInstallationParamsBase & {\n  helpers: string[];\n};\nexport type DecodedApplyInstallationParams = ApplyInstallationParamsBase & {\n  helpersHash: string;\n};\n\nexport type VersionTag = {\n  build: number;\n  release: number;\n};\n\nexport enum PermissionOperationType {\n  GRANT = 0,\n  REVOKE = 1,\n  GRANT_WITH_CONDITION = 2,\n}\n\nexport type MultiTargetPermission = {\n  operation: PermissionOperationType;\n  where: string;\n  who: string;\n  condition?: string;\n  permissionId: string;\n};\n","export enum SupportedNetwork {\n  MAINNET = \"homestead\",\n  GOERLI = \"goerli\",\n  POLYGON = \"matic\",\n  MUMBAI = \"maticmum\",\n}\n\nexport const SupportedNetworksArray = Object.values(SupportedNetwork);\n\n\nexport type NetworkDeployment = {\n  daoFactory: string;\n  pluginSetupProcessor: string;\n  multisigRepo: string;\n  adminRepo: string;\n  addresslistVotingRepo: string;\n  tokenVotingRepo: string;\n  multisigSetup: string;\n  adminSetup: string;\n  addresslistVotingSetup: string;\n  tokenVotingSetup: string;\n  ensRegistry?: string;\n};\n\n// This file contains common types, interfaces, and enumerations\n\nexport enum DaoRole {\n  UPGRADE_ROLE = \"UPGRADE_ROLE\",\n  DAO_CONFIG_ROLE = \"DAO_CONFIG_ROLE\",\n  EXEC_ROLE = \"EXEC_ROLE\",\n  WITHDRAW_ROLE = \"WITHDRAW_ROLE\",\n  SET_SIGNATURE_VALIDATOR_ROLE = \"SET_SIGNATURE_VALIDATOR_ROLE\",\n}\n\n/**\n * Contains the payload passed to the global DAO factory so that\n * plugins can be initialized\n */\nexport interface PluginInstallItem {\n  id: string; // ENS domain or address of the plugin's Repo\n  data: Uint8Array;\n}\n/**\n * Contains the payload passed to governance contracts, serializing\n * the actions to do upon approval\n */\nexport type DaoAction = {\n  to: string;\n  value: bigint;\n  data: Uint8Array;\n};\n\n/**\n * Contains the general human readable information about the DAO\n */\nexport type DaoConfig = {\n  name: string;\n  metadataUri: string;\n};\n\nexport type GasFeeEstimation = {\n  average: bigint;\n  max: bigint;\n};\n\nexport interface IPagination {\n  skip?: number;\n  limit?: number;\n  direction?: SortDirection;\n}\n\nexport type Pagination = {\n  skip?: number;\n  limit?: number;\n  direction?: SortDirection;\n};\n\nexport enum SortDirection {\n  ASC = \"asc\",\n  DESC = \"desc\",\n}\n\nexport interface InterfaceParams {\n  id: string;\n  functionName: string;\n  hash: string;\n}\n\nexport enum TokenType {\n  NATIVE = \"native\",\n  ERC20 = \"erc20\",\n  ERC721 = \"erc721\",\n}","import { Context } from \"../../client-common/context\";\nimport { JsonRpcProvider } from \"@ethersproject/providers\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { Contract, ContractInterface } from \"@ethersproject/contracts\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport {\n  GasFeeEstimation,\n  SupportedNetwork,\n  SupportedNetworksArray,\n} from \"../types/common\";\nimport { IClientWeb3Core } from \"../interfaces\";\nimport {\n  CannotEstimateGasError,\n  InvalidAddressError,\n  InvalidContractAbiError,\n  NoDaoFactory,\n  NoNodesAvailableError,\n  NoProviderError,\n  NoSignerError,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nexport class Web3Module implements IClientWeb3Core {\n  private static readonly PRECISION_FACTOR_BASE = 1000;\n  private providerIdx: number = -1;\n  private context: Context;\n\n  constructor(context: Context) {\n    this.context = context;\n    this.providerIdx = Math.floor(Math.random() * context.web3Providers.length);\n  }\n\n  /** Starts using the next available Web3 provider */\n  public shiftProvider(): void {\n    if (!this.context.web3Providers.length) {\n      throw new NoProviderError();\n    } else if (this.context.web3Providers.length <= 1) {\n      throw new NoNodesAvailableError(\"web3\");\n    }\n    this.providerIdx = (this.providerIdx + 1) %\n      this.context.web3Providers.length;\n  }\n\n  /** Retrieves the current signer */\n  public getSigner(): Signer {\n    if (!this.context.signer) {\n      throw new NoSignerError();\n    }\n    return this.context.signer;\n  }\n  /** Returns the currently active network provider */\n  public getProvider(): JsonRpcProvider {\n    if (!this.context.web3Providers[this.providerIdx]) {\n      throw new NoProviderError();\n    }\n    return this.context.web3Providers[this.providerIdx];\n  }\n\n  /** Returns the currently active network */\n  public getNetworkName(): SupportedNetwork {\n    const networkName = this.context.network.name as SupportedNetwork;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    return networkName;\n  }\n\n  /** Returns a signer connected to the current network provider */\n  public getConnectedSigner(): Signer {\n    let signer = this.getSigner();\n    if (!signer.provider) {\n      const provider = this.getProvider();\n      signer = signer.connect(provider);\n    }\n    return signer;\n  }\n\n  /** Returns whether the current provider is functional or not */\n  public isUp(): Promise<boolean> {\n    const provider = this.getProvider();\n    return provider\n      .getNetwork()\n      .then(() => true)\n      .catch(() => false);\n  }\n\n  public async ensureOnline(): Promise<void> {\n    if (!this.context.web3Providers.length) {\n      throw new NoProviderError();\n    }\n\n    for (let i = 0; i < this.context.web3Providers.length; i++) {\n      if (await this.isUp()) return;\n      this.shiftProvider();\n    }\n    throw new NoNodesAvailableError(\"web3\");\n  }\n\n  /**\n   * Returns a contract instance at the given address\n   *\n   * @param address Contract instance address\n   * @param abi The Application Binary Inteface of the contract\n   * @return A contract instance attached to the given address\n   */\n  public attachContract<T>(\n    address: string,\n    abi: ContractInterface,\n  ): Contract & T {\n    if (!address || !isAddress(address)) throw new InvalidAddressError();\n    else if (!abi) throw new InvalidContractAbiError();\n    const signer = this.getConnectedSigner();\n    return new Contract(address, abi, signer) as Contract & T;\n  }\n\n  /** Calculates the expected maximum gas fee */\n  public getMaxFeePerGas(): Promise<bigint> {\n    return this.getConnectedSigner()\n      .getFeeData()\n      .then((feeData) => {\n        if (!feeData.maxFeePerGas) {\n          throw new CannotEstimateGasError();\n        }\n        return feeData.maxFeePerGas.toBigInt();\n      });\n  }\n\n  public getApproximateGasFee(estimatedFee: bigint): Promise<GasFeeEstimation> {\n    return this.getMaxFeePerGas().then((maxFeePerGas) => {\n      const max = estimatedFee * maxFeePerGas;\n\n      const factor = this.context.gasFeeEstimationFactor *\n        Web3Module.PRECISION_FACTOR_BASE;\n\n      const average = (max * BigInt(Math.trunc(factor))) /\n        BigInt(Web3Module.PRECISION_FACTOR_BASE);\n\n      return { average, max };\n    });\n  }\n\n  /** Returns the current DAO factory address */\n  public getDaoFactoryAddress(): string {\n    if (!this.context.daoFactoryAddress) {\n      throw new NoDaoFactory();\n    }\n    return this.context.daoFactoryAddress;\n  }\n}\n","import { Context } from \"../../client-common/context\";\nimport { IClientIpfsCore } from \"../interfaces\";\nimport {\n  Client as IpfsClient,\n  ClientError,\n  PinResponse,\n} from \"@aragon/sdk-ipfs\";\nimport {\n  ClientNotInitializedError,\n  IpfsError,\n  NoNodesAvailableError,\n  runAndRetry,\n  DataDecodingError\n} from \"@aragon/sdk-common\";\n\nexport class IPFSModule implements IClientIpfsCore {\n  private clientIdx: number = -1;\n  private clients: IpfsClient[] = [];\n  constructor(context: Context) {\n    // Storing client data in the private module's scope to prevent external mutation\n    if (context.ipfs?.length) {\n      this.clients = context.ipfs;\n      this.clientIdx = Math.floor(Math.random() * context.ipfs.length);\n    }\n  }\n\n  public getClient(): IpfsClient {\n    if (!this.clients.length || !this.clients[this.clientIdx]) {\n      throw new ClientNotInitializedError(\"ipfs\");\n    }\n    return this.clients[this.clientIdx];\n  }\n\n  /**\n   * Starts using the next available IPFS endpoint\n   */\n  public shiftClient(): void {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"ipfs\");\n    } else if (this.clients?.length < 2) {\n      throw new NoNodesAvailableError(\"ipfs\");\n    }\n    this.clientIdx = (this.clientIdx + 1) % this.clients.length;\n  }\n\n  /** Returns `true` if the current client is on line */\n  public isUp(): Promise<boolean> {\n    if (!this.clients?.length) return Promise.resolve(false);\n    return this.getClient().nodeInfo().then(() => true).catch(() => false);\n  }\n\n  public async ensureOnline(): Promise<void> {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"ipfs\");\n    }\n    for (let i = 0; i < this.clients?.length; i++) {\n      if (await this.isUp()) return;\n      this.shiftClient();\n    }\n    throw new NoNodesAvailableError(\"ipfs\");\n  }\n\n  public getOnlineClient(): Promise<IpfsClient> {\n    return this.ensureOnline().then(() => this.getClient());\n  }\n\n  // IPFS METHODS\n\n  public async add(input: string | Uint8Array): Promise<string> {\n    return this.runAndRetryHelper(() => this.getClient().add(input)).then((\n      res,\n    ) => res.hash);\n  }\n\n  public pin(input: string): Promise<PinResponse> {\n    return this.runAndRetryHelper(() => this.getClient().pin(input));\n  }\n\n  public fetchBytes(cid: string): Promise<Uint8Array | undefined> {\n    return this.runAndRetryHelper(() => this.getClient().cat(cid));\n  }\n\n  private runAndRetryHelper<T>(f: () => Promise<T>): Promise<T> {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"ipfs\");\n    }\n    let retries = this.clients.length;\n    return runAndRetry({\n      func: f,\n      onFail: (e: Error) => {\n        if (e instanceof ClientError) {\n          if (e.response.status < 500) {\n            // If the error code is not a 5XX means the\n            // error is not generated by the server\n            throw new IpfsError(e);\n          }\n        }\n        retries--;\n        this.shiftClient();\n      },\n      shouldRetry: () => retries > 0,\n    });\n  }\n\n  public fetchString(cid: string): Promise<string> {\n    return this.fetchBytes(cid)\n      .then((bytes) => new TextDecoder().decode(bytes))\n      .catch((e) => {\n        throw new DataDecodingError(e.message);\n      });\n  }\n}\n","import { gql } from \"graphql-request\";\n\nexport const QueryStatus = gql`\n{\n  _meta{\n    deployment\n  }\n}\n`;\n","import {\n  ClientNotInitializedError,\n  GraphQLError,\n  NoNodesAvailableError,\n  runAndRetry,\n} from \"@aragon/sdk-common\";\nimport { ClientError, GraphQLClient } from \"graphql-request\";\nimport { Context } from \"../../client-common/context\";\nimport { QueryStatus } from \"../graphql-queries\";\nimport { IClientGraphQLCore } from \"../interfaces\";\n\nexport class GraphqlModule implements IClientGraphQLCore {\n  private clientIdx: number = -1;\n  private clients: GraphQLClient[] = [];\n  constructor(context: Context) {\n    if (context.graphql?.length) {\n      this.clients = context.graphql;\n      this.clientIdx = Math.floor(Math.random() * context.graphql.length);\n    }\n  }\n  /**\n   * Get the current graphql client\n   * @returns {GraphQLClient}\n   */\n  public getClient(): GraphQLClient {\n    if (!this.clients.length || !this.clients[this.clientIdx]) {\n      throw new ClientNotInitializedError(\"graphql\");\n    }\n    return this.clients[this.clientIdx];\n  }\n\n  /**\n   * Starts using the next available Graphql endpoint\n   * @returns {void}\n   */\n  public shiftClient(): void {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    } else if (this.clients.length < 2) {\n      throw new NoNodesAvailableError(\"graphql\");\n    }\n    this.clientIdx = (this.clientIdx + 1) % this.clients.length;\n  }\n\n  /**\n   * Checks if the current node is online\n   * @returns {Promise<boolean>}\n   */\n  public isUp(): Promise<boolean> {\n    return this.getClient().request(QueryStatus).then((res) => {\n      return !!res._meta?.deployment;\n    }).catch(() => {\n      return false;\n    });\n  }\n\n  /**\n   * Ensures that the graphql is online.\n   * If the current node is not online\n   * it will shift to the next one and\n   * repeat until it finds an online\n   * node. In the case that there are no\n   * nodes or none of them is available\n   * it will throw an error\n   * @returns {Promise<void>}\n   */\n  public async ensureOnline(): Promise<void> {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    }\n    for (let i = 0; i < this.clients.length; i++) {\n      if (await this.isUp()) return;\n      this.shiftClient();\n    }\n    throw new NoNodesAvailableError(\"graphql\");\n  }\n\n  public request({ query, params, name }: {\n    query: string;\n    params: { [key: string]: any };\n    name?: string;\n  }) {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    }\n    let retries = this.clients.length;\n    return runAndRetry({\n      func: () => this.getClient().request(query, params),\n      onFail: (e: Error) => {\n        if (e instanceof ClientError) {\n          // If the error code is not a 5XX means the\n          // error is not generated by the server\n          if (e.response.status < 500) {\n            throw new GraphQLError(name || \"\", e);\n          }\n        }\n        retries--;\n        this.shiftClient();\n      },\n      shouldRetry: () => retries > 0,\n    });\n  }\n}\n","import {\n  IClientCore,\n  IClientGraphQLCore,\n  IClientIpfsCore,\n  IClientWeb3Core,\n} from \"./interfaces\";\nimport { Context } from \"./context\";\nimport { Web3Module } from \"./modules/web3\";\nimport { IPFSModule } from \"./modules/ipfs\";\nimport { GraphqlModule } from \"./modules/graphql\";\n\n/**\n * Provides the low level foundation so that subclasses have ready-made access to Web3, IPFS and GraphQL primitives\n */\nexport abstract class ClientCore implements IClientCore {\n  public web3: IClientWeb3Core;\n  public ipfs: IClientIpfsCore;\n  public graphql: IClientGraphQLCore;\n  constructor(context: Context) {\n    this.web3 = new Web3Module(context);\n    this.ipfs = new IPFSModule(context);\n    this.graphql = new GraphqlModule(context);\n  }\n}\n","import { activeContractsList } from \"@aragon/osx-ethers\";\nimport { NetworkDeployment, SupportedNetwork } from \"./types/common\";\nimport { ProposalMetadata } from \"./types/plugin\";\n\nexport const UNSUPPORTED_PROPOSAL_METADATA_LINK: ProposalMetadata = {\n  title: \"(unsupported metadata link)\",\n  summary: \"(the link to the metadata is not supported)\",\n  description: \"(the link to the metadata is not supported)\",\n  resources: [],\n};\nexport const EMPTY_PROPOSAL_METADATA_LINK: ProposalMetadata = {\n  title: \"(the proposal has no metadata)\",\n  summary: \"(the current proposal does not have any content defined)\",\n  description: \"(the current proposal does not have any content defined)\",\n  resources: [],\n};\nexport const UNAVAILABLE_PROPOSAL_METADATA: ProposalMetadata = {\n  title: \"(unavailable metadata)\",\n  summary: \"(the proposal metadata is not available)\",\n  description: \"(the proposal metadata is not available)\",\n  resources: [],\n};\n\nconst getGraphqlNode = (netowrk: SupportedNetwork): string => {\n  return `https://subgraph.satsuma-prod.com/qHR2wGfc5RLi6/aragon/osx-${\n    SupportedNetworksToGraphqlNetworks[netowrk]\n  }/api`;\n};\n\ntype GraphqlNetworks = \"mainnet\" | \"goerli\" | \"polygon\" | \"mumbai\";\n\nconst SupportedNetworksToGraphqlNetworks: {\n  [K in SupportedNetwork]: GraphqlNetworks;\n} = {\n  [SupportedNetwork.MAINNET]: \"mainnet\",\n  [SupportedNetwork.GOERLI]: \"goerli\",\n  [SupportedNetwork.POLYGON]: \"polygon\",\n  [SupportedNetwork.MUMBAI]: \"mumbai\",\n};\n\nexport const GRAPHQL_NODES: { [K in SupportedNetwork]: { url: string }[] } = {\n  [SupportedNetwork.MAINNET]: [{\n    url: getGraphqlNode(SupportedNetwork.MAINNET),\n  }],\n  [SupportedNetwork.GOERLI]: [{ url: getGraphqlNode(SupportedNetwork.GOERLI) }],\n  [SupportedNetwork.POLYGON]: [{\n    url: getGraphqlNode(SupportedNetwork.POLYGON),\n  }],\n  [SupportedNetwork.MUMBAI]: [{ url: getGraphqlNode(SupportedNetwork.MUMBAI) }],\n};\n\nconst IPFS_ENDPOINTS = {\n  prod: [\n    {\n      url: \"https://ipfs-0.aragon.network\",\n      headers: {\n        \"X-API-KEY\": \"b477RhECf8s8sdM7XrkLBs2wHc4kCMwpbcFC55Kt\",\n      },\n    },\n    {\n      url: \"https://ipfs-1.aragon.network\",\n      headers: {\n        \"X-API-KEY\": \"b477RhECf8s8sdM7XrkLBs2wHc4kCMwpbcFC55Kt\",\n      },\n    },\n  ],\n  test: [\n    {\n      url: \"https://testing-ipfs-0.aragon.network\",\n      headers: {\n        \"X-API-KEY\": \"b477RhECf8s8sdM7XrkLBs2wHc4kCMwpbcFC55Kt\",\n      },\n    },\n  ],\n};\n\nexport const IPFS_NODES: {\n  [K in SupportedNetwork]: {\n    url: string;\n    headers?: Record<string, string> | undefined;\n  }[];\n} = {\n  [SupportedNetwork.MAINNET]: IPFS_ENDPOINTS.prod,\n  [SupportedNetwork.GOERLI]: IPFS_ENDPOINTS.test,\n  [SupportedNetwork.POLYGON]: IPFS_ENDPOINTS.prod,\n  [SupportedNetwork.MUMBAI]: IPFS_ENDPOINTS.test,\n};\n\nexport const LIVE_CONTRACTS: { [K in SupportedNetwork]: NetworkDeployment } = {\n  [SupportedNetwork.MAINNET]: {\n    daoFactory: activeContractsList.mainnet.DAOFactory,\n    pluginSetupProcessor: activeContractsList.mainnet.PluginRepoFactory,\n    multisigRepo: activeContractsList.mainnet[\"multisig-repo\"],\n    adminRepo: activeContractsList.mainnet[\"admin-repo\"],\n    addresslistVotingRepo:\n      activeContractsList.mainnet[\"address-list-voting-repo\"],\n    tokenVotingRepo: activeContractsList.mainnet[\"token-voting-repo\"],\n    multisigSetup: activeContractsList.mainnet.MultisigSetup,\n    adminSetup: activeContractsList.mainnet.AdminSetup,\n    addresslistVotingSetup: activeContractsList.mainnet.AddresslistVotingSetup,\n    tokenVotingSetup: activeContractsList.mainnet.TokenVotingSetup,\n  },\n  [SupportedNetwork.GOERLI]: {\n    daoFactory: activeContractsList.goerli.DAOFactory,\n    pluginSetupProcessor: activeContractsList.goerli.PluginSetupProcessor,\n    multisigRepo: activeContractsList.goerli[\"multisig-repo\"],\n    adminRepo: activeContractsList.goerli[\"admin-repo\"],\n    addresslistVotingRepo:\n      activeContractsList.goerli[\"address-list-voting-repo\"],\n    tokenVotingRepo: activeContractsList.goerli[\"token-voting-repo\"],\n    multisigSetup: activeContractsList.goerli.MultisigSetup,\n    adminSetup: activeContractsList.goerli.AdminSetup,\n    addresslistVotingSetup: activeContractsList.goerli.AddresslistVotingSetup,\n    tokenVotingSetup: activeContractsList.goerli.TokenVotingSetup,\n  },\n  [SupportedNetwork.MUMBAI]: {\n    daoFactory: activeContractsList.mumbai.DAOFactory,\n    pluginSetupProcessor: activeContractsList.mumbai.PluginSetupProcessor,\n    multisigRepo: activeContractsList.mumbai[\"multisig-repo\"],\n    adminRepo: activeContractsList.mumbai[\"admin-repo\"],\n    addresslistVotingRepo:\n      activeContractsList.mumbai[\"address-list-voting-repo\"],\n    tokenVotingRepo: activeContractsList.mumbai[\"token-voting-repo\"],\n    multisigSetup: activeContractsList.mumbai.MultisigSetup,\n    adminSetup: activeContractsList.mumbai.AdminSetup,\n    addresslistVotingSetup: activeContractsList.mumbai.AddresslistVotingSetup,\n    tokenVotingSetup: activeContractsList.mumbai.TokenVotingSetup,\n    ensRegistry: activeContractsList.mumbai.ENSRegistry,\n  },\n  [SupportedNetwork.POLYGON]: {\n    daoFactory: activeContractsList.polygon.DAOFactory,\n    pluginSetupProcessor: activeContractsList.polygon.PluginSetupProcessor,\n    multisigRepo: activeContractsList.polygon[\"multisig-repo\"],\n    adminRepo: activeContractsList.polygon[\"admin-repo\"],\n    addresslistVotingRepo:\n      activeContractsList.polygon[\"address-list-voting-repo\"],\n    tokenVotingRepo: activeContractsList.polygon[\"token-voting-repo\"],\n    multisigSetup: activeContractsList.polygon.MultisigSetup,\n    adminSetup: activeContractsList.polygon.AdminSetup,\n    addresslistVotingSetup: activeContractsList.polygon.AddresslistVotingSetup,\n    tokenVotingSetup: activeContractsList.polygon.TokenVotingSetup,\n    ensRegistry: activeContractsList.polygon.ENSRegistry,\n  },\n};\n","import { ContextParams, ContextState } from \"./types/context\";\nimport {\n  getNetwork,\n  JsonRpcProvider,\n  Network,\n  Networkish,\n} from \"@ethersproject/providers\";\nimport {\n  InvalidAddressError,\n  UnsupportedNetworkError,\n  UnsupportedProtocolError,\n} from \"@aragon/sdk-common\";\nimport { Client as IpfsClient } from \"@aragon/sdk-ipfs\";\nimport { GraphQLClient } from \"graphql-request\";\nimport {\n  GRAPHQL_NODES,\n  IPFS_NODES,\n  LIVE_CONTRACTS,\n} from \"./constants\";\nimport { SupportedNetwork, SupportedNetworksArray } from \"./types/common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nexport { ContextParams } from \"./types/context\";\n\nconst DEFAULT_GAS_FEE_ESTIMATION_FACTOR = 0.625;\ntype OverriddenState = {\n  daoFactoryAddress: boolean;\n  ensRegistryAddress: boolean;\n  gasFeeEstimationFactor: boolean;\n  ipfsNodes: boolean;\n  graphqlNodes: boolean;\n};\nconst supportedProtocols = [\"https:\"];\nif (typeof process !== \"undefined\" && process?.env?.TESTING) {\n  supportedProtocols.push(\"http:\");\n}\n\nexport class Context {\n  protected state: ContextState = {} as ContextState;\n  protected overriden: OverriddenState = {\n    daoFactoryAddress: false,\n    ensRegistryAddress: false,\n    gasFeeEstimationFactor: false,\n    ipfsNodes: false,\n    graphqlNodes: false,\n  };\n  // INTERNAL CONTEXT STATE\n  /**\n   * @param {Object} params\n   *\n   * @constructor\n   */\n  constructor(params?: Partial<ContextParams>) {\n    // set network to mainnet, overrided by the value of params\n    const mergedParams = Object.assign({ network: \"mainnet\" }, params);\n    this.set(mergedParams);\n  }\n\n  set(contextParams: Partial<ContextParams>) {\n    if (contextParams.network) {\n      this.state.network = Context.resolveNetwork(\n        contextParams.network,\n        contextParams.ensRegistryAddress,\n      );\n      // once the network is resolved set default values\n      this.setNetworkDefaults();\n    }\n    if (contextParams.signer) {\n      this.state.signer = contextParams.signer;\n    }\n    if (\n      contextParams.web3Providers ||\n      (Array.isArray(contextParams.web3Providers) &&\n        contextParams.web3Providers.length)\n    ) {\n      this.state.web3Providers = Context.resolveWeb3Providers(\n        contextParams.web3Providers,\n        this.state.network,\n      );\n    }\n    if (contextParams.graphqlNodes?.length) {\n      this.state.graphql = Context.resolveGraphql(contextParams.graphqlNodes);\n      this.overriden.graphqlNodes = true;\n    }\n    if (contextParams.ipfsNodes?.length) {\n      this.state.ipfs = Context.resolveIpfs(contextParams.ipfsNodes);\n      this.overriden.ipfsNodes = true;\n    }\n    if (contextParams.daoFactoryAddress) {\n      this.state.daoFactoryAddress = contextParams.daoFactoryAddress;\n      this.overriden.daoFactoryAddress = true;\n    }\n    if (contextParams.ensRegistryAddress) {\n      this.state.ensRegistryAddress = contextParams.ensRegistryAddress;\n      this.overriden.ensRegistryAddress = true;\n    }\n    if (contextParams.gasFeeEstimationFactor) {\n      this.state.gasFeeEstimationFactor = Context.resolveGasFeeEstimationFactor(\n        contextParams.gasFeeEstimationFactor,\n      );\n      this.overriden.gasFeeEstimationFactor = true;\n    }\n  }\n\n  private setNetworkDefaults() {\n    const networkName = this.network.name as SupportedNetwork;\n    if (\n      !GRAPHQL_NODES[networkName]?.length ||\n      !IPFS_NODES[networkName]?.length ||\n      !LIVE_CONTRACTS[networkName]\n    ) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n\n    if (!this.overriden.graphqlNodes) {\n      this.state.graphql = Context.resolveGraphql(GRAPHQL_NODES[networkName]);\n    }\n\n    if (!this.overriden.ipfsNodes) {\n      this.state.ipfs = Context.resolveIpfs(IPFS_NODES[networkName]);\n    }\n\n    if (!this.overriden.daoFactoryAddress) {\n      this.state.daoFactoryAddress = LIVE_CONTRACTS[networkName].daoFactory;\n    }\n\n    if (!this.overriden.ensRegistryAddress) {\n      let ensRegistry = LIVE_CONTRACTS[networkName].ensRegistry;\n      if (!ensRegistry) {\n        ensRegistry = this.network.ensAddress;\n      }\n      this.state.ensRegistryAddress = ensRegistry;\n    }\n    if (!this.overriden.gasFeeEstimationFactor) {\n      this.state.gasFeeEstimationFactor = DEFAULT_GAS_FEE_ESTIMATION_FACTOR;\n    }\n  }\n\n  // GETTERS\n\n  /**\n   * Getter for the network\n   *\n   * @var network\n   *\n   * @returns {Networkish}\n   *\n   * @public\n   */\n  get network() {\n    return this.state.network;\n  }\n  /**\n   * Getter for the Signer\n   *\n   * @var signer\n   *\n   * @returns {Signer}\n   *\n   * @public\n   */\n  get ensRegistryAddress(): string | undefined {\n    return this.state.ensRegistryAddress;\n  }\n\n  /**\n   * Getter for the Signer\n   *\n   * @var signer\n   *\n   * @returns {Signer}\n   *\n   * @public\n   */\n  get signer(): Signer {\n    return this.state.signer;\n  }\n\n  /**\n   * Getter for the web3 providers\n   *\n   * @var web3Providers\n   *\n   * @returns {JsonRpcProvider[]}\n   *\n   * @public\n   */\n  get web3Providers(): JsonRpcProvider[] {\n    return this.state.web3Providers || []\n  }\n\n  /**\n   * Getter for daoFactoryAddress property\n   *\n   * @var daoFactoryAddress\n   *\n   * @returns {string}\n   *\n   * @public\n   */\n  get daoFactoryAddress(): string {\n    return this.state.daoFactoryAddress;\n  }\n\n  /**\n   * Getter for the gas fee reducer used in estimations\n   *\n   * @var gasFeeEstimationFactor\n   *\n   * @returns {number}\n   *\n   * @public\n   */\n  get gasFeeEstimationFactor(): number {\n    return (\n      this.state.gasFeeEstimationFactor\n    );\n  }\n\n  /**\n   * Getter for the IPFS http client\n   *\n   * @var ipfs\n   *\n   * @returns {IpfsClient[]}\n   *\n   * @public\n   */\n  get ipfs(): IpfsClient[] {\n    return this.state.ipfs;\n  }\n\n  /**\n   * Getter for the GraphQL client\n   *\n   * @var graphql\n   *\n   * @returns {GraphQLClient[]}\n   *\n   * @public\n   */\n  get graphql(): GraphQLClient[] {\n    return this.state.graphql;\n  }\n\n  // INTERNAL HELPERS\n  private static resolveNetwork(\n    networkish: Networkish,\n    ensRegistryAddress?: string,\n  ): Network {\n    const network = getNetwork(networkish);\n    const networkName = network.name as SupportedNetwork;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n\n    if (ensRegistryAddress) {\n      if (!isAddress(ensRegistryAddress)) {\n        throw new InvalidAddressError();\n      } else {\n        network.ensAddress = ensRegistryAddress;\n      }\n    }\n\n    if (!network.ensAddress) {\n      const ensAddress = LIVE_CONTRACTS[networkName].ensRegistry;\n      if (!ensAddress) {\n        throw new UnsupportedNetworkError(networkName);\n      }\n      network.ensAddress = ensAddress;\n    }\n    return network;\n  }\n\n  private static resolveWeb3Providers(\n    endpoints: string | JsonRpcProvider | (string | JsonRpcProvider)[],\n    network: Network,\n  ): JsonRpcProvider[] {\n    if (Array.isArray(endpoints)) {\n      return endpoints.map((item) => {\n        if (typeof item === \"string\") {\n          const url = new URL(item);\n          if (!supportedProtocols.includes(url.protocol)) {\n            throw new UnsupportedProtocolError(url.protocol);\n          }\n          return new JsonRpcProvider(url.href, network);\n        }\n        return item;\n      });\n    } else if (typeof endpoints === \"string\") {\n      const url = new URL(endpoints);\n      if (!supportedProtocols.includes(url.protocol)) {\n        throw new UnsupportedProtocolError(url.protocol);\n      }\n      return [new JsonRpcProvider(url.href, network)];\n    } else {\n      return [endpoints];\n    }\n  }\n\n  private static resolveIpfs(\n    configs: {\n      url: string;\n      headers?: Record<string, string>;\n    }[],\n  ): IpfsClient[] {\n    let clients: IpfsClient[] = [];\n    configs.forEach((config) => {\n      const url = new URL(config.url);\n      if (!supportedProtocols.includes(url.protocol)) {\n        throw new UnsupportedProtocolError(url.protocol);\n      }\n      clients.push(new IpfsClient(url, config.headers));\n    });\n    return clients;\n  }\n\n  private static resolveGraphql(endpoints: { url: string }[]): GraphQLClient[] {\n    let clients: GraphQLClient[] = [];\n    endpoints.forEach((endpoint) => {\n      const url = new URL(endpoint.url);\n      if (!supportedProtocols.includes(url.protocol)) {\n        throw new UnsupportedProtocolError(url.protocol);\n      }\n      clients.push(new GraphQLClient(url.href));\n    });\n    return clients;\n  }\n\n  private static resolveGasFeeEstimationFactor(\n    gasFeeEstimationFactor: number,\n  ): number {\n    if (gasFeeEstimationFactor < 0 || gasFeeEstimationFactor > 1) {\n      throw new Error(\n        \"Gas estimation factor value should be a number between 0 and 1\",\n      );\n    }\n    return gasFeeEstimationFactor;\n  }\n}\n","import { Context } from \"./context\";\nimport {\n  ContextPluginParams,\n} from \"./types/context\";\n\nexport class ContextPlugin extends Context {\n  // INTERNAL CONTEXT STATE\n\n  /**\n   * @param {ContextPluginParams} params The parameters for the client context\n   *\n   * @constructor\n   */\n  constructor(params?: Partial<ContextPluginParams>) {\n    super(params)\n  }\n\n  /**\n   * Generate a plugin context from a client clontext and a plugin address\n   *\n   * @param {Context} ctx\n   * @param {string} pluginAddress\n   * @return {*}  {ContextPlugin}\n   * @memberof ContextPlugin\n   */\n  static fromContext(ctx: Context): ContextPlugin {\n    const ctxPlugin = new ContextPlugin({});\n    Object.assign(ctxPlugin, ctx);\n    return ctxPlugin;\n  }\n\n  set(contextParams: Partial<ContextPluginParams>) {\n    super.set(contextParams);\n  }\n\n}\n","import { IDAO } from \"@aragon/osx-ethers\";\nimport { ContractReceipt } from \"@ethersproject/contracts\";\nimport { VoteValues, VotingMode } from \"./types/plugin\";\nimport {\n  CreateMajorityVotingProposalParams,\n  IComputeStatusProposal,\n  ProposalStatus,\n} from \"./types/plugin\";\n\nimport { Interface } from \"@ethersproject/abi\";\nimport { id } from \"@ethersproject/hash\";\nimport { Log } from \"@ethersproject/providers\";\nimport { InvalidVotingModeError } from \"@aragon/sdk-common\";\n\nexport function unwrapProposalParams(\n  params: CreateMajorityVotingProposalParams,\n): [string, IDAO.ActionStruct[], number, number, boolean, number] {\n  return [\n    params.metadataUri,\n    params.actions ?? [],\n    // TODO: Verify => seconds?\n    params.startDate ? Math.floor(params.startDate.getTime() / 1000) : 0,\n    // TODO: Verify => seconds?\n    params.endDate ? Math.floor(params.endDate.getTime() / 1000) : 0,\n    params.executeOnPass ?? false,\n    params.creatorVote ?? VoteValues.ABSTAIN,\n  ];\n}\n\nexport function computeProposalStatus(\n  proposal: IComputeStatusProposal,\n): ProposalStatus {\n  const now = new Date();\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  if (proposal.executed) {\n    return ProposalStatus.EXECUTED;\n  }\n  if (startDate >= now) {\n    return ProposalStatus.PENDING;\n  }\n  if (proposal.potentiallyExecutable || proposal.earlyExecutable) {\n    return ProposalStatus.SUCCEEDED;\n  }\n  if (endDate >= now) {\n    return ProposalStatus.ACTIVE;\n  }\n  return ProposalStatus.DEFEATED;\n}\n\nexport function computeProposalStatusFilter(\n  status: ProposalStatus,\n): Object {\n  let where = {};\n  const now = Math.round(new Date().getTime() / 1000).toString();\n  switch (status) {\n    case ProposalStatus.PENDING:\n      where = { startDate_gte: now };\n      break;\n    case ProposalStatus.ACTIVE:\n      where = { startDate_lt: now, endDate_gte: now, executed: false };\n      break;\n    case ProposalStatus.EXECUTED:\n      where = { executed: true };\n      break;\n    case ProposalStatus.SUCCEEDED:\n      where = { potentiallyExecutable: true, endDate_lt: now };\n      break;\n    case ProposalStatus.DEFEATED:\n      where = {\n        potentiallyExecutable: false,\n        endDate_lt: now,\n        executed: false,\n      };\n      break;\n    default:\n      throw new Error(\"invalid proposal status\");\n  }\n  return where;\n}\n\nexport function findLog(\n  receipt: ContractReceipt,\n  iface: Interface,\n  eventName: string,\n): Log | undefined {\n  return receipt.logs.find(\n    (log) =>\n      log.topics[0] ===\n        id(\n          iface.getEvent(eventName).format(\n            \"sighash\",\n          ),\n        ),\n  );\n}\n\nexport function votingModeToContracts(votingMode: VotingMode): number {\n  switch (votingMode) {\n    case VotingMode.STANDARD:\n      return 0;\n    case VotingMode.EARLY_EXECUTION:\n      return 1;\n    case VotingMode.VOTE_REPLACEMENT:\n      return 2;\n    default:\n      throw new InvalidVotingModeError();\n  }\n}\nexport function votingModeFromContracts(votingMode: number): VotingMode {\n  switch (votingMode) {\n    case 0:\n      return VotingMode.STANDARD;\n    case 1:\n      return VotingMode.EARLY_EXECUTION;\n    case 2:\n      return VotingMode.VOTE_REPLACEMENT;\n    default:\n      throw new InvalidVotingModeError();\n  }\n}\n","import {\n  MajorityVotingBase,\n  MajorityVotingBase__factory,\n} from \"@aragon/osx-ethers\";\nimport { bytesToHex, hexToBytes } from \"@aragon/sdk-common\";\nimport { VotingMode, VotingSettings } from \"./types/plugin\";\nimport { FunctionFragment, Interface, Result } from \"@ethersproject/abi\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { votingModeFromContracts, votingModeToContracts } from \"./utils\";\nimport { encodeRatio, decodeRatio } from \"@aragon/sdk-common\";\n\nexport function decodeUpdatePluginSettingsAction(\n  data: Uint8Array,\n): VotingSettings {\n  const votingInterface = MajorityVotingBase__factory.createInterface();\n  const hexBytes = bytesToHex(data);\n  const expectedfunction = votingInterface.getFunction(\"updateVotingSettings\");\n  const result = votingInterface.decodeFunctionData(\n    expectedfunction,\n    hexBytes,\n  );\n  return pluginSettingsFromContract(result);\n}\n\nexport function encodeUpdateVotingSettingsAction(\n  params: VotingSettings,\n): Uint8Array {\n  const votingInterface = MajorityVotingBase__factory.createInterface();\n  const args = votingSettingsToContract(params);\n  // get hex bytes\n  const hexBytes = votingInterface.encodeFunctionData(\n    \"updateVotingSettings\",\n    [args],\n  );\n  // Strip 0x => encode in Uint8Array\n  return hexToBytes(hexBytes);\n}\n\nfunction pluginSettingsFromContract(result: Result): VotingSettings {\n  return {\n    votingMode: votingModeFromContracts(result[0][0]),\n    supportThreshold: decodeRatio(result[0][1], 6),\n    minParticipation: decodeRatio(result[0][2], 6),\n    minDuration: result[0][3].toNumber(),\n    minProposerVotingPower: BigInt(result[0][4]),\n  };\n}\n\nexport function votingSettingsToContract(\n  params: VotingSettings,\n): MajorityVotingBase.VotingSettingsStruct {\n  return {\n    votingMode: BigNumber.from(\n      votingModeToContracts(params.votingMode || VotingMode.STANDARD),\n    ),\n    supportThreshold: encodeRatio(params.supportThreshold, 6),\n    minParticipation: encodeRatio(params.minParticipation, 6),\n    minDuration: BigNumber.from(params.minDuration),\n    minProposerVotingPower: BigNumber.from(params.minProposerVotingPower || 0),\n  };\n}\n\nexport function getFunctionFragment(\n  data: Uint8Array,\n  availableFunctions: string[],\n): FunctionFragment {\n  const hexBytes = bytesToHex(data);\n  const iface = new Interface(availableFunctions);\n  return iface.getFunction(hexBytes.substring(0, 10));\n}\n","import { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n\nconst Permissions = {\n  UPGRADE_PERMISSION: \"UPGRADE_PERMISSION\",\n  SET_METADATA_PERMISSION: \"SET_METADATA_PERMISSION\",\n  EXECUTE_PERMISSION: \"EXECUTE_PERMISSION\",\n  WITHDRAW_PERMISSION: \"WITHDRAW_PERMISSION\",\n  SET_SIGNATURE_VALIDATOR_PERMISSION: \"SET_SIGNATURE_VALIDATOR_PERMISSION\",\n  SET_TRUSTED_FORWARDER_PERMISSION: \"SET_TRUSTED_FORWARDER_PERMISSION\",\n  ROOT_PERMISSION: \"ROOT_PERMISSION\",\n  CREATE_VERSION_PERMISSION: \"CREATE_VERSION_PERMISSION\",\n  REGISTER_PERMISSION: \"REGISTER_PERMISSION\",\n  REGISTER_DAO_PERMISSION: \"REGISTER_DAO_PERMISSION\",\n  REGISTER_ENS_SUBDOMAIN_PERMISSION: \"REGISTER_ENS_SUBDOMAIN_PERMISSION\",\n  MINT_PERMISSION: \"MINT_PERMISSION\",\n  MERKLE_MINT_PERMISSION: \"MERKLE_MINT_PERMISSION\",\n  MODIFY_ALLOWLIST_PERMISSION: \"MODIFY_ALLOWLIST_PERMISSION\",\n  SET_CONFIGURATION_PERMISSION: \"SET_CONFIGURATION_PERMISSION\",\n};\n\nconst PermissionIds = Object.entries(Permissions).reduce(\n  (acc, [k, v]) => ({ ...acc, [k + \"_ID\"]: keccak256(toUtf8Bytes(v)) }),\n  {} as { [k: string]: string },\n);\nObject.freeze(Permissions);\nexport { Permissions };\nObject.freeze(PermissionIds);\nexport { PermissionIds };\n","import {\n  ApplyUninstallationParams,\n  AssetBalance,\n  DaoDetails,\n  DaoListItem,\n  DaoMetadata,\n  DepositErc20Params,\n  DepositEthParams,\n  GrantPermissionDecodedParams,\n  GrantPermissionParams,\n  GrantPermissionWithConditionDecodedParams,\n  GrantPermissionWithConditionParams,\n  InstalledPluginListItem,\n  PluginRepo,\n  PluginRepoBuildMetadata,\n  PluginRepoListItem,\n  PluginRepoRelease,\n  PluginRepoReleaseMetadata,\n  RevokePermissionDecodedParams,\n  RevokePermissionParams,\n  Transfer,\n  TransferType,\n  WithdrawParams,\n} from \"../types\";\nimport {\n  ContractPermissionParams,\n  ContractPermissionWithConditionParams,\n  SubgraphBalance,\n  SubgraphDao,\n  SubgraphDaoListItem,\n  SubgraphPluginListItem,\n  SubgraphPluginRepo,\n  SubgraphPluginRepoListItem,\n  SubgraphPluginRepoReleaseListItem,\n  SubgraphTransferListItem,\n  SubgraphTransferType,\n} from \"./types\";\nimport { defaultAbiCoder, Result } from \"@ethersproject/abi\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { PluginSetupProcessor } from \"@aragon/osx-ethers\";\nimport {\n  ApplyInstallationParams,\n  DecodedApplyInstallationParams,\n  TokenType,\n} from \"../client-common\";\nimport { PermissionIds } from \"../constants\";\n\nexport function unwrapDepositParams(\n  params: DepositEthParams | DepositErc20Params,\n): [string, bigint, string, string] {\n  return [\n    params.daoAddressOrEns,\n    params.amount,\n    (params as any)?.tokenAddress ?? AddressZero,\n    \"\",\n  ];\n}\n\nexport function toDaoDetails(\n  dao: SubgraphDao,\n  metadata: DaoMetadata,\n): DaoDetails {\n  return {\n    address: dao.id,\n    ensDomain: dao.subdomain + \".dao.eth\",\n    metadata: {\n      name: metadata.name,\n      description: metadata.description,\n      avatar: metadata.avatar || undefined,\n      links: metadata.links,\n    },\n    creationDate: new Date(parseInt(dao.createdAt) * 1000),\n    // TODO update when new subgraph schema is deployed\n    plugins: dao.plugins.map(\n      (\n        plugin: SubgraphPluginListItem,\n      ): InstalledPluginListItem => (\n        {\n          id: `${plugin.appliedPluginRepo.subdomain}.plugin.dao.eth`,\n          release: plugin.appliedVersion.release.release,\n          build: plugin.appliedVersion.build,\n          instanceAddress: plugin.appliedPreparation.pluginAddress,\n        }\n      ),\n    ),\n  };\n}\n\nexport function toDaoListItem(\n  dao: SubgraphDaoListItem,\n  metadata: DaoMetadata,\n): DaoListItem {\n  return {\n    address: dao.id,\n    ensDomain: dao.subdomain + \".dao.eth\",\n    metadata: {\n      name: metadata.name,\n      description: metadata.description,\n      avatar: metadata.avatar || undefined,\n    },\n    plugins: dao.plugins.map(\n      (\n        plugin: SubgraphPluginListItem,\n      ): InstalledPluginListItem => (\n        {\n          id: `${plugin.appliedPluginRepo.subdomain}.plugin.dao.eth`,\n          release: plugin.appliedVersion.release.release,\n          build: plugin.appliedVersion.build,\n          instanceAddress: plugin.appliedPreparation.pluginAddress,\n        }\n      ),\n    ),\n  };\n}\n\nexport function toAssetBalance(balance: SubgraphBalance): AssetBalance {\n  const updateDate = new Date(parseInt(balance.lastUpdated) * 1000);\n  if (balance.__typename === \"NativeBalance\") {\n    return {\n      type: TokenType.NATIVE,\n      balance: BigInt(balance.balance),\n      updateDate,\n    };\n  } else if (balance.__typename === \"ERC721Balance\") {\n    return {\n      type: TokenType.ERC721,\n      name: balance.token.name,\n      symbol: balance.token.symbol,\n      updateDate,\n      address: balance.token.id,\n    };\n  } else {\n    return {\n      type: TokenType.ERC20,\n      address: balance.token.id,\n      name: balance.token.name,\n      symbol: balance.token.symbol,\n      decimals: balance.token.decimals,\n      balance: BigInt(balance.balance),\n      updateDate,\n    };\n  }\n}\n\nexport function toTokenTransfer(transfer: SubgraphTransferListItem): Transfer {\n  const creationDate = new Date(parseInt(transfer.createdAt) * 1000);\n  if (transfer.__typename === \"NativeTransfer\") {\n    if (transfer.type === SubgraphTransferType.DEPOSIT) {\n      return {\n        type: TransferType.DEPOSIT,\n        tokenType: TokenType.NATIVE,\n        amount: BigInt(transfer.amount),\n        creationDate,\n        transactionId: transfer.txHash,\n        from: transfer.from,\n        to: transfer.to,\n      };\n    }\n    return {\n      type: TransferType.WITHDRAW,\n      tokenType: TokenType.NATIVE,\n      amount: BigInt(transfer.amount),\n      creationDate,\n      transactionId: transfer.txHash,\n      proposalId: transfer.proposal?.id || \"\",\n      to: transfer.to,\n      from: transfer.from,\n    };\n  } else if (transfer.__typename === \"ERC721Transfer\") {\n    if (transfer.type === SubgraphTransferType.DEPOSIT) {\n      return {\n        type: TransferType.DEPOSIT,\n        tokenType: TokenType.ERC721,\n        token: {\n          address: transfer.token.id,\n          name: transfer.token.name,\n          symbol: transfer.token.symbol,\n        },\n        creationDate,\n        transactionId: transfer.txHash,\n        from: transfer.from,\n        to: transfer.to,\n      };\n    }\n    return {\n      type: TransferType.WITHDRAW,\n      tokenType: TokenType.ERC721,\n      token: {\n        address: transfer.token.id,\n        name: transfer.token.name,\n        symbol: transfer.token.symbol,\n      },\n      creationDate,\n      transactionId: transfer.txHash,\n      to: transfer.to,\n      from: transfer.from,\n      proposalId: transfer.proposal?.id || \"\",\n    };\n  } else {\n    if (transfer.type === SubgraphTransferType.DEPOSIT) {\n      return {\n        type: TransferType.DEPOSIT,\n        tokenType: TokenType.ERC20,\n        token: {\n          address: transfer.token.id,\n          name: transfer.token.name,\n          symbol: transfer.token.symbol,\n          decimals: transfer.token.decimals,\n        },\n        amount: BigInt(transfer.amount),\n        creationDate,\n        transactionId: transfer.txHash,\n        from: transfer.from,\n        to: transfer.to,\n      };\n    }\n    return {\n      type: TransferType.WITHDRAW,\n      tokenType: TokenType.ERC20,\n      token: {\n        address: transfer.token.id,\n        name: transfer.token.name,\n        symbol: transfer.token.symbol,\n        decimals: transfer.token.decimals,\n      },\n      amount: BigInt(transfer.amount),\n      creationDate,\n      transactionId: transfer.txHash,\n      to: transfer.to,\n      from: transfer.from,\n      proposalId: transfer.proposal?.id || \"\",\n    };\n  }\n}\n\nexport function toPluginRepoRelease(\n  release: SubgraphPluginRepoReleaseListItem,\n  metadata: PluginRepoReleaseMetadata,\n): PluginRepoRelease {\n  return {\n    release: release.release,\n    currentBuild: Math.max(...release.builds.map((build) => build.build)),\n    metadata,\n  };\n}\n\nexport function toPluginRepoListItem(\n  pluginRepo: SubgraphPluginRepoListItem,\n  releases: PluginRepoRelease[],\n): PluginRepoListItem {\n  return {\n    address: pluginRepo.id,\n    subdomain: pluginRepo.subdomain,\n    releases,\n  };\n}\nexport function toPluginRepo(\n  pluginRepo: SubgraphPluginRepo,\n  releaseMetadata: PluginRepoReleaseMetadata,\n  buildMetadata: PluginRepoBuildMetadata,\n): PluginRepo {\n  return {\n    address: pluginRepo.id,\n    subdomain: pluginRepo.subdomain,\n    current: {\n      build: {\n        metadata: buildMetadata,\n        // the subgraph returns only one build ordered by build number\n        // in descending order, this means it's the latest build\n        number: pluginRepo.releases?.[0]?.builds?.[0]?.build,\n      },\n      release: {\n        metadata: releaseMetadata,\n        // the subgraph returns only one realease ordered by realease number\n        // in descending order, this means it's the latest realease\n        number: pluginRepo.releases?.[0]?.release,\n      },\n    },\n  };\n}\n\nexport function applyInstallatonParamsToContract(\n  params: ApplyInstallationParams,\n): PluginSetupProcessor.ApplyInstallationParamsStruct {\n  return {\n    plugin: params.pluginAddress,\n    pluginSetupRef: {\n      pluginSetupRepo: params.pluginRepo,\n      versionTag: params.versionTag,\n    },\n    helpersHash: keccak256(\n      defaultAbiCoder.encode([\"address[]\"], [params.helpers]),\n    ),\n    permissions: params.permissions.map((permission) => {\n      return { ...permission, condition: permission.condition || AddressZero };\n    }),\n  };\n}\nexport function applyUninstallationParamsToContract(\n  params: ApplyUninstallationParams,\n): PluginSetupProcessor.ApplyUninstallationParamsStruct {\n  return {\n    plugin: params.pluginAddress,\n    pluginSetupRef: {\n      pluginSetupRepo: params.pluginRepo,\n      versionTag: params.versionTag,\n    },\n    permissions: params.permissions.map((permission) => {\n      return { ...permission, condition: permission.condition || AddressZero };\n    }),\n  };\n}\nexport function applyInstallatonParamsFromContract(\n  result: Result,\n): DecodedApplyInstallationParams {\n  const params = result[1];\n  return {\n    helpersHash: params.helpersHash,\n    permissions: params.permissions,\n    versionTag: params.pluginSetupRef.versionTag,\n    pluginAddress: params.plugin,\n    pluginRepo: params.pluginSetupRef.pluginSetupRepo,\n  };\n}\n\nexport function permissionParamsToContract(\n  params: GrantPermissionParams | RevokePermissionParams,\n): ContractPermissionParams {\n  return [params.where, params.who, keccak256(toUtf8Bytes(params.permission))];\n}\nexport function permissionWithConditionParamsToContract(\n  params: GrantPermissionWithConditionParams,\n): ContractPermissionWithConditionParams {\n  return [\n    ...permissionParamsToContract({\n      who: params.who,\n      where: params.where,\n      permission: params.permission,\n    }),\n    params.condition,\n  ];\n}\n\nexport function permissionParamsFromContract(\n  result: Result,\n): GrantPermissionDecodedParams | RevokePermissionDecodedParams {\n  return {\n    where: result[0],\n    who: result[1],\n    permissionId: result[2],\n    permission: Object.keys(PermissionIds)\n      .find((k) => PermissionIds[k] === result[2])\n      ?.replace(/_ID$/, \"\") || \"\",\n  };\n}\nexport function permissionParamsWitConditionFromContract(\n  result: Result,\n): GrantPermissionWithConditionDecodedParams {\n  return {\n    ...permissionParamsFromContract(result),\n    condition: result[3],\n  };\n}\n\nexport function withdrawParamsFromContract(\n  to: string,\n  _value: bigint,\n  result: Result,\n  tokenStandard: TokenType,\n): WithdrawParams {\n  if (tokenStandard === TokenType.ERC20) {\n    return {\n      type: TokenType.ERC20,\n      tokenAddress: to,\n      recipientAddressOrEns: result[0],\n      amount: BigInt(result[1]),\n    };\n  }\n  // TODO Add ERC721 and ERC1155\n  throw new Error(\"not implemented\");\n}\n","import { DAO__factory } from \"@aragon/osx-ethers\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport {\n  DaoMetadata,\n  PluginRepoBuildMetadata,\n  PluginRepoReleaseMetadata,\n} from \"../types\";\nimport { erc20ContractAbi } from \"./abi/erc20\";\n\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  new Contract(AddressZero, erc20ContractAbi).interface.getFunction(\"transfer\")\n    .format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"grant\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"grantWithCondition\").format(\n    \"minimal\",\n  ),\n  DAO__factory.createInterface().getFunction(\"revoke\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"setMetadata\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"setDaoURI\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"registerStandardCallback\").format(\n    \"minimal\",\n  ),\n  DAO__factory.createInterface().getFunction(\"setSignatureValidator\").format(\n    \"minimal\",\n  ),\n  DAO__factory.createInterface().getFunction(\"upgradeTo\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"upgradeToAndCall\").format(\n    \"minimal\",\n  ),\n];\n\nexport const UNSUPPORTED_DAO_METADATA_LINK: DaoMetadata = {\n  name: \"(unsupported metadata link)\",\n  description: \"(the metadata link is not supported)\",\n  links: [],\n};\nexport const EMPTY_DAO_METADATA_LINK: DaoMetadata = {\n  name: \"(the DAO has no metadata)\",\n  description: \"(the DAO did not define any content)\",\n  links: [],\n};\n\nexport const UNAVAILABLE_DAO_METADATA: DaoMetadata = {\n  name: \"(unavailable metadata)\",\n  description: \"(the DAO metadata is not available)\",\n  links: [],\n};\nexport const UNSUPPORTED_RELEASE_METADATA_LINK: PluginRepoReleaseMetadata = {\n  name: \"(unsupported metadata link)\",\n  description: \"(the metadata link is not supported)\",\n  images: {},\n};\nexport const EMPTY_RELEASE_METADATA_LINK: PluginRepoReleaseMetadata = {\n  name: \"(the release has no metadata)\",\n  description: \"(the release did not define any content)\",\n  images: {},\n};\n\nexport const UNAVAILABLE_RELEASE_METADATA: PluginRepoReleaseMetadata = {\n  name: \"(unavailable metadata)\",\n  description: \"(the release metadata is not available)\",\n  images: {},\n};\n\nexport const UNSUPPORTED_BUILD_METADATA_LINK: PluginRepoBuildMetadata = {\n  ui: \"\",\n  change: \"(unsupported metadata link)\",\n  pluginSetupABI: {\n    prepareInstallation: [],\n    prepareUninstallation: [],\n    prepareUpdate: [],\n  },\n};\nexport const EMPTY_BUILD_METADATA_LINK: PluginRepoBuildMetadata = {\n  ui: \"\",\n  change: \"(the build has no metadata)\",\n  pluginSetupABI: {\n    prepareInstallation: [],\n    prepareUninstallation: [],\n    prepareUpdate: [],\n  },\n};\n\nexport const UNAVAILABLE_BUILD_METADATA: PluginRepoBuildMetadata = {\n  ui: \"\",\n  change: \"(unavailable metadata)\",\n  pluginSetupABI: {\n    prepareInstallation: [],\n    prepareUninstallation: [],\n    prepareUpdate: [],\n  },\n};\n","import {\n  DAO__factory,\n  DAOFactory,\n  DAOFactory__factory,\n  DAORegistry__factory,\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  AmountMismatchError,\n  FailedDepositError,\n  InstallationNotFoundError,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidEnsError,\n  IpfsPinError,\n  MissingExecPermissionError,\n  NoProviderError,\n  PluginUninstallationPreparationError,\n  resolveIpfsCid,\n  UpdateAllowanceError,\n} from \"@aragon/sdk-common\";\n\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract, ContractTransaction } from \"@ethersproject/contracts\";\nimport { erc20ContractAbi } from \"../abi/erc20\";\nimport {\n  QueryDao,\n  QueryDaos,\n  QueryIPlugin,\n  QueryPlugin,\n  QueryPlugins,\n  QueryTokenBalances,\n  QueryTokenTransfers,\n} from \"../graphql-queries\";\nimport {\n  AssetBalance,\n  AssetBalanceSortBy,\n  CreateDaoParams,\n  DaoBalancesQueryParams,\n  DaoCreationSteps,\n  DaoCreationStepValue,\n  DaoDepositSteps,\n  DaoDepositStepValue,\n  DaoDetails,\n  DaoListItem,\n  DaoMetadata,\n  DaoQueryParams,\n  DaoSortBy,\n  DepositParams,\n  HasPermissionParams,\n  PluginQueryParams,\n  PluginRepo,\n  PluginRepoBuildMetadata,\n  PluginRepoListItem,\n  PluginRepoRelease,\n  PluginRepoReleaseMetadata,\n  PluginSortBy,\n  PrepareUninstallationParams,\n  PrepareUninstallationSteps,\n  PrepareUninstallationStepValue,\n  SetAllowanceParams,\n  SetAllowanceSteps,\n  SetAllowanceStepValue,\n  Transfer,\n  TransferQueryParams,\n  TransferSortBy,\n} from \"../../types\";\nimport {\n  SubgraphBalance,\n  SubgraphDao,\n  SubgraphDaoListItem,\n  SubgraphPluginInstallation,\n  SubgraphPluginRepo,\n  SubgraphPluginRepoListItem,\n  SubgraphTransferListItem,\n  SubgraphTransferTypeMap,\n} from \"../types\";\nimport {\n  ClientCore,\n  findLog,\n  LIVE_CONTRACTS,\n  MultiTargetPermission,\n  SortDirection,\n  TokenType,\n} from \"../../client-common\";\nimport {\n  toAssetBalance,\n  toDaoDetails,\n  toDaoListItem,\n  toPluginRepo,\n  toPluginRepoListItem,\n  toPluginRepoRelease,\n  toTokenTransfer,\n  unwrapDepositParams,\n} from \"../utils\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { id } from \"@ethersproject/hash\";\nimport {\n  EMPTY_BUILD_METADATA_LINK,\n  EMPTY_DAO_METADATA_LINK,\n  EMPTY_RELEASE_METADATA_LINK,\n  UNAVAILABLE_BUILD_METADATA,\n  UNAVAILABLE_DAO_METADATA,\n  UNAVAILABLE_RELEASE_METADATA,\n  UNSUPPORTED_BUILD_METADATA_LINK,\n  UNSUPPORTED_DAO_METADATA_LINK,\n  UNSUPPORTED_RELEASE_METADATA_LINK,\n} from \"../constants\";\nimport { IClientMethods } from \"../../interfaces\";\nimport { PermissionIds } from \"../../constants\";\n\n/**\n * Methods module the SDK Generic Client\n */\nexport class ClientMethods extends ClientCore implements IClientMethods {\n  /**\n   * Creates a DAO with the given settings and plugins\n   *\n   * @param {CreateDaoParams} params\n   * @return {*}  {AsyncGenerator<DaoCreationStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *createDao(\n    params: CreateDaoParams,\n  ): AsyncGenerator<DaoCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (\n      params.ensSubdomain && !params.ensSubdomain.match(/^[a-z0-9\\-]+$/)\n    ) {\n      throw new InvalidEnsError();\n    }\n\n    const daoFactoryInstance = DAOFactory__factory.connect(\n      this.web3.getDaoFactoryAddress(),\n      signer,\n    );\n\n    const pluginInstallationData: DAOFactory.PluginSettingsStruct[] = [];\n    for (const plugin of params.plugins) {\n      const repo = PluginRepo__factory.connect(plugin.id, signer);\n\n      const currentRelease = await repo.latestRelease();\n      const latestVersion = await repo[\"getLatestVersion(uint8)\"](\n        currentRelease,\n      );\n      pluginInstallationData.push({\n        pluginSetupRef: {\n          pluginSetupRepo: repo.address,\n          versionTag: latestVersion.tag,\n        },\n        data: plugin.data,\n      });\n    }\n\n    // check if at least one plugin requests EXECUTE_PERMISSION on the DAO\n    // This check isn't 100% correct all the time\n    // simulate the DAO creation to get an address\n    const pluginSetupProcessorAddr = await daoFactoryInstance\n      .pluginSetupProcessor();\n    const pluginSetupProcessor = PluginSetupProcessor__factory.connect(\n      pluginSetupProcessorAddr,\n      signer,\n    );\n    let execPermissionFound = false;\n\n    // using the DAO base because it reflects a newly created DAO the best\n    const daoBaseAddr = await daoFactoryInstance.daoBase();\n    // simulates each plugin installation seperately to get the requested permissions\n    for (const installData of pluginInstallationData) {\n      const pluginSetupProcessorResponse = await pluginSetupProcessor.callStatic\n        .prepareInstallation(daoBaseAddr, installData);\n      const found = pluginSetupProcessorResponse[1].permissions.find(\n        (permission) =>\n          permission.permissionId === PermissionIds.EXECUTE_PERMISSION_ID,\n      );\n      if (found) {\n        execPermissionFound = true;\n        break;\n      }\n    }\n\n    if (!execPermissionFound) {\n      throw new MissingExecPermissionError();\n    }\n\n    const tx = await daoFactoryInstance.connect(signer).createDao(\n      {\n        subdomain: params.ensSubdomain,\n        metadata: toUtf8Bytes(params.metadataUri),\n        daoURI: params.daoUri || \"\",\n        trustedForwarder: params.trustedForwarder || AddressZero,\n      },\n      pluginInstallationData,\n    );\n\n    yield {\n      key: DaoCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n    // start tx\n    const receipt = await tx.wait();\n    const daoFactoryInterface = DAORegistry__factory.createInterface();\n    // find dao address using the dao registry address\n    const log = receipt.logs?.find(\n      (e) =>\n        e.topics[0] ===\n          id(daoFactoryInterface.getEvent(\"DAORegistered\").format(\"sighash\")),\n    );\n\n    if (!log) {\n      throw new Error(\"Failed to create DAO\");\n    }\n\n    // Plugin logs\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const installedLogs = receipt.logs?.filter(\n      (e) =>\n        e.topics[0] ===\n          id(pspInterface.getEvent(\"InstallationApplied\").format(\"sighash\")),\n    );\n\n    // DAO logs\n    const parsedLog = daoFactoryInterface.parseLog(log);\n    if (!parsedLog.args[\"dao\"]) {\n      throw new Error(\"Failed to create DAO\");\n    }\n\n    yield {\n      key: DaoCreationSteps.DONE,\n      address: parsedLog.args[\"dao\"],\n      pluginAddresses: installedLogs.map(\n        (log) => pspInterface.parseLog(log).args[1],\n      ),\n    };\n  }\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {DaoMetadata} params\n   * @return {*}  {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async pinMetadata(params: DaoMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch (e) {\n      throw new IpfsPinError(e);\n    }\n  }\n  /**\n   * Deposits ether or an ERC20 token into the DAO\n   *\n   * @param {DepositParams} params\n   * @return {*}  {AsyncGenerator<DaoDepositStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *deposit(\n    params: DepositParams,\n  ): AsyncGenerator<DaoDepositStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    if (params.type !== TokenType.NATIVE && params.type !== TokenType.ERC20) {\n      throw new Error(\"Please, use the token's transfer function directly\");\n    }\n\n    const [daoAddress, amount, tokenAddress, reference] = unwrapDepositParams(\n      params,\n    );\n\n    if (tokenAddress && tokenAddress !== AddressZero) {\n      // check current allowance\n      const tokenInstance = new Contract(\n        tokenAddress,\n        erc20ContractAbi,\n        signer,\n      );\n      const currentAllowance = await tokenInstance.allowance(\n        await signer.getAddress(),\n        daoAddress,\n      );\n      yield {\n        key: DaoDepositSteps.CHECKED_ALLOWANCE,\n        allowance: currentAllowance.toBigInt(),\n      };\n      // if its lower than the needed, set it to the correct one\n      if (currentAllowance.lt(params.amount)) {\n        // If the target is an ERC20 token, ensure that the amount can be transferred\n        // Relay the yield steps to the caller as they are received\n        yield* this.setAllowance(\n          {\n            amount: params.amount,\n            spender: daoAddress,\n            tokenAddress,\n          },\n        );\n      }\n    }\n\n    // Doing the transfer\n    const daoInstance = DAO__factory.connect(daoAddress, signer);\n    const override: { value?: bigint } = {};\n\n    if (tokenAddress === AddressZero) {\n      // Ether\n      override.value = amount;\n    }\n\n    const tx = await daoInstance.deposit(\n      tokenAddress,\n      amount,\n      reference,\n      override,\n    );\n    yield { key: DaoDepositSteps.DEPOSITING, txHash: tx.hash };\n\n    const cr = await tx.wait();\n    const log = findLog(cr, daoInstance.interface, \"Deposited\");\n    if (!log) {\n      throw new FailedDepositError();\n    }\n\n    const daoInterface = DAO__factory.createInterface();\n    const parsedLog = daoInterface.parseLog(log);\n\n    if (!amount.toString() === parsedLog.args[\"amount\"]) {\n      throw new AmountMismatchError(\n        amount,\n        parsedLog.args[\"amount\"].toBigInt(),\n      );\n    }\n    yield { key: DaoDepositSteps.DONE, amount: amount };\n  }\n\n  /**\n   * Checks if the allowance is enough and updates it\n   *\n   * @param {SetAllowanceParams} params\n   * @return {*}  {AsyncGenerator<SetAllowanceStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *setAllowance(\n    params: SetAllowanceParams,\n  ): AsyncGenerator<SetAllowanceStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    // TODO\n    // add params check with yup\n    const tokenInstance = new Contract(\n      params.tokenAddress,\n      erc20ContractAbi,\n      signer,\n    );\n    const tx: ContractTransaction = await tokenInstance.approve(\n      params.spender,\n      params.amount,\n    );\n\n    yield {\n      key: SetAllowanceSteps.SETTING_ALLOWANCE,\n      txHash: tx.hash,\n    };\n\n    const cr = await tx.wait();\n    const log = findLog(cr, tokenInstance.interface, \"Approval\");\n\n    if (!log) {\n      throw new UpdateAllowanceError();\n    }\n    const value = log.data;\n    if (!value || BigNumber.from(params.amount).gt(BigNumber.from(value))) {\n      throw new UpdateAllowanceError();\n    }\n\n    yield {\n      key: SetAllowanceSteps.ALLOWANCE_SET,\n      allowance: params.amount,\n    };\n  }\n  /**\n   * Prepare uninstallation of a plugin\n   *\n   * @param {PrepareUninstallationParams} params\n   * @return {*}  {AsyncGenerator<PrepareUninstallationStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *prepareUninstallation(\n    params: PrepareUninstallationParams,\n  ): AsyncGenerator<PrepareUninstallationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const networkName = this.web3.getNetworkName();\n    type T = {\n      iplugin: { installations: SubgraphPluginInstallation[] };\n    };\n    const { iplugin } = await this.graphql.request<T>({\n      query: QueryIPlugin,\n      params: {\n        address: params.pluginAddress.toLowerCase(),\n        where: { dao: params.daoAddressOrEns },\n      },\n      name: \"plugin\",\n    });\n\n    // filter specified installation\n    const { pluginInstallationIndex = 0 } = params;\n    const selectedInstallation = iplugin.installations[pluginInstallationIndex];\n    if (!selectedInstallation) {\n      throw new InstallationNotFoundError();\n    }\n    // encode uninstallation params\n    const { uninstallationParams = [], uninstallationAbi = [] } = params;\n    const data = defaultAbiCoder.encode(\n      uninstallationAbi,\n      uninstallationParams,\n    );\n    // connect to psp contract\n    const pspContract = PluginSetupProcessor__factory.connect(\n      LIVE_CONTRACTS[networkName].pluginSetupProcessor,\n      signer,\n    );\n    const tx = await pspContract.prepareUninstallation(\n      params.daoAddressOrEns,\n      {\n        pluginSetupRef: {\n          pluginSetupRepo:\n            selectedInstallation.appliedPreparation.pluginRepo.id,\n          versionTag: {\n            build: selectedInstallation.appliedVersion.build,\n            release: selectedInstallation.appliedVersion.release.release,\n          },\n        },\n        setupPayload: {\n          plugin: params.pluginAddress,\n          currentHelpers: selectedInstallation.appliedPreparation.helpers,\n          data,\n        },\n      },\n    );\n    yield {\n      key: PrepareUninstallationSteps.PREPARING,\n      txHash: tx.hash,\n    };\n    const cr = await tx.wait();\n\n    const log = findLog(cr, pspContract.interface, \"UninstallationPrepared\");\n    if (!log) {\n      throw new PluginUninstallationPreparationError();\n    }\n    const parsedLog = pspContract.interface.parseLog(log);\n    const permissions = parsedLog.args[\"permissions\"];\n    if (!permissions) {\n      throw new PluginUninstallationPreparationError();\n    }\n    yield {\n      key: PrepareUninstallationSteps.DONE,\n      permissions: permissions.map((permission: MultiTargetPermission) => ({\n        operation: permission.operation,\n        where: permission.where,\n        who: permission.who,\n        permissionId: permission.permissionId,\n      })),\n      pluginRepo: selectedInstallation.appliedPreparation.pluginRepo.id,\n      pluginAddress: params.pluginAddress,\n      versionTag: {\n        build: selectedInstallation.appliedVersion.build,\n        release: selectedInstallation.appliedVersion.release.release,\n      },\n    };\n  }\n  /**\n   * Checks whether a role is granted by the current DAO's ACL settings\n   *\n   * @param {HasPermissionParams} params\n   * @return {*}  {Promise<boolean>}\n   * @memberof ClientMethods\n   */\n  public async hasPermission(params: HasPermissionParams): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n    // connect to the managing dao\n    const daoInstance = DAO__factory.connect(params.daoAddressOrEns, signer);\n    return daoInstance.hasPermission(\n      params.where,\n      params.who,\n      id(params.permission),\n      params.data || new Uint8Array([]),\n    );\n  }\n  /**\n   * Retrieves metadata for DAO with given identifier (address or ens domain)\n   *\n   * @param {string} daoAddressOrEns\n   * @return {*}  {(Promise<DaoDetails | null>)}\n   * @memberof ClientMethods\n   */\n  public async getDao(daoAddressOrEns: string): Promise<DaoDetails | null> {\n    let address = daoAddressOrEns;\n    if (!isAddress(address)) {\n      await this.web3.ensureOnline();\n      const provider = this.web3.getProvider();\n      if (!provider) {\n        throw new NoProviderError();\n      }\n      try {\n        const resolvedAddress = await provider.resolveName(address);\n        if (!resolvedAddress) {\n          throw new InvalidAddressOrEnsError();\n        }\n        address = resolvedAddress.toLowerCase();\n      } catch (e) {\n        throw new InvalidAddressOrEnsError(e);\n      }\n    }\n    const query = QueryDao;\n    const params = { address };\n    const name = \"DAO\";\n    type T = { dao: SubgraphDao };\n    const { dao } = await this.graphql.request<T>({ query, params, name });\n    if (!dao) {\n      return null;\n    } else if (!dao.metadata) {\n      return toDaoDetails(\n        dao,\n        EMPTY_DAO_METADATA_LINK,\n      );\n    }\n    try {\n      const metadataCid = resolveIpfsCid(dao.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as DaoMetadata;\n      return toDaoDetails(dao, metadata);\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toDaoDetails(dao, UNSUPPORTED_DAO_METADATA_LINK);\n      }\n      return toDaoDetails(dao, UNAVAILABLE_DAO_METADATA);\n    }\n  }\n  /**\n   * Retrieves metadata for DAO with given identifier (address or ens domain)\n   *\n   * @param {DaoQueryParams} {\n   *     limit = 10,\n   *     skip = 0,\n   *     direction = SortDirection.ASC,\n   *     sortBy = DaoSortBy.CREATED_AT,\n   *   }\n   * @return {*}  {Promise<DaoListItem[]>}\n   * @memberof ClientMethods\n   */\n  public async getDaos({\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = DaoSortBy.CREATED_AT,\n  }: DaoQueryParams): Promise<DaoListItem[]> {\n    const query = QueryDaos;\n    const params = {\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"DAOs\";\n    type T = { daos: SubgraphDaoListItem[] };\n    const { daos } = await this.graphql.request<T>({ query, params, name });\n    return Promise.all(\n      daos.map(\n        async (dao: SubgraphDaoListItem): Promise<DaoListItem> => {\n          if (!dao.metadata) {\n            return toDaoListItem(\n              dao,\n              EMPTY_DAO_METADATA_LINK,\n            );\n          }\n          try {\n            const metadataCid = resolveIpfsCid(dao.metadata);\n            const stringMetadata = await this.ipfs.fetchString(metadataCid);\n            const metadata = JSON.parse(stringMetadata);\n            return toDaoListItem(dao, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toDaoListItem(dao, UNSUPPORTED_DAO_METADATA_LINK);\n            }\n            return toDaoListItem(dao, UNAVAILABLE_DAO_METADATA);\n          }\n        },\n      ),\n    );\n  }\n  /**\n   * Retrieves the asset balances of the given DAO, by default, ETH, DAI, USDC and USDT on Mainnet\n   *\n   * @param {DaoBalancesQueryParams} {\n   *     daoAddressOrEns,\n   *     limit = 10,\n   *     skip = 0,\n   *     direction = SortDirection.ASC,\n   *     sortBy = AssetBalanceSortBy.LAST_UPDATED,\n   *   }\n   * @return {*}  {(Promise<AssetBalance[] | null>)}\n   * @memberof ClientMethods\n   */\n  public async getDaoBalances({\n    daoAddressOrEns,\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = AssetBalanceSortBy.LAST_UPDATED,\n  }: DaoBalancesQueryParams): Promise<AssetBalance[] | null> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        const resolvedAddress = await provider.resolveName(address);\n        if (!resolvedAddress) {\n          throw new InvalidAddressOrEnsError();\n        }\n        address = resolvedAddress;\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    const query = QueryTokenBalances;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"dao balances\";\n    type T = { tokenBalances: SubgraphBalance[] };\n    const { tokenBalances } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (tokenBalances.length === 0) {\n      return [];\n    }\n    return Promise.all(\n      tokenBalances.map(\n        (balance: SubgraphBalance): AssetBalance => toAssetBalance(balance),\n      ),\n    );\n  }\n  /**\n   * Retrieves the list of asset transfers to and from the given DAO (by default, from ETH, DAI, USDC and USDT, on Mainnet)\n   *\n   * @param {TransferQueryParams} {\n   *     daoAddressOrEns,\n   *     type,\n   *     limit = 10,\n   *     skip = 0,\n   *     direction = SortDirection.ASC,\n   *     sortBy = TransferSortBy.CREATED_AT,\n   *   }\n   * @return {*}  {(Promise<Transfer[] | null>)}\n   * @memberof ClientMethods\n   */\n  public async getDaoTransfers({\n    daoAddressOrEns,\n    type,\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = TransferSortBy.CREATED_AT,\n  }: TransferQueryParams): Promise<Transfer[] | null> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        try {\n          const resolvedAddress = await provider.resolveName(address);\n          if (!resolvedAddress) {\n            throw new InvalidAddressOrEnsError();\n          }\n          address = resolvedAddress;\n        } catch (e) {\n          throw new InvalidAddressOrEnsError(e);\n        }\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (type) {\n      where = { ...where, type: SubgraphTransferTypeMap.get(type) };\n    }\n    const query = QueryTokenTransfers;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"dao transfers\";\n    type T = { tokenTransfers: SubgraphTransferListItem[] };\n    const { tokenTransfers } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenTransfers) {\n      return null;\n    }\n    return Promise.all(\n      tokenTransfers.map(\n        (transfer: SubgraphTransferListItem): Transfer =>\n          toTokenTransfer(transfer),\n      ),\n    );\n  }\n\n  /**\n   * Retrieves the list of plugins available on the PluginRegistry\n   *\n   * @param {PluginQueryParams} {\n   *     limit = 10,\n   *     skip = 0,\n   *     direction = SortDirection.ASC,\n   *     sortBy = PluginSortBy.SUBDOMAIN,\n   *     subdomain\n   *   }\n   * @return {*}  {(Promise<PluginRepo[] | null>)}\n   * @memberof ClientMethods\n   */\n  public async getPlugins({\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = PluginSortBy.SUBDOMAIN,\n    subdomain,\n  }: PluginQueryParams = {}): Promise<PluginRepoListItem[]> {\n    let where = {};\n    if (subdomain) {\n      where = { subdomain_contains_nocase: subdomain };\n    }\n    const query = QueryPlugins;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"plugin repos\";\n    type T = { pluginRepos: SubgraphPluginRepoListItem[] };\n    const { pluginRepos } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      pluginRepos.map(\n        async (\n          pluginRepo: SubgraphPluginRepoListItem,\n        ): Promise<PluginRepoListItem> => {\n          let pluginRepoReleases: PluginRepoRelease[] = [];\n          for (const release of pluginRepo.releases) {\n            let metadata: PluginRepoReleaseMetadata;\n            if (!release.metadata) {\n              metadata = EMPTY_RELEASE_METADATA_LINK;\n            } else {\n              try {\n                const metadataCid = resolveIpfsCid(release.metadata);\n                const stringMetadata = await this.ipfs.fetchString(metadataCid);\n                const resolvedMetadata = JSON.parse(stringMetadata);\n                metadata = resolvedMetadata;\n              } catch (err) {\n                metadata = UNAVAILABLE_RELEASE_METADATA;\n                if (err instanceof InvalidCidError) {\n                  metadata = UNSUPPORTED_RELEASE_METADATA_LINK;\n                }\n              }\n            }\n            pluginRepoReleases = [\n              ...pluginRepoReleases,\n              toPluginRepoRelease(release, metadata),\n            ];\n          }\n          return toPluginRepoListItem(pluginRepo, pluginRepoReleases);\n        },\n      ),\n    );\n  }\n  /**\n   * Get plugin details given an address, release and build\n   *\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<PluginRepo>}\n   * @memberof ClientMethods\n   */\n  public async getPlugin(pluginAddress: string): Promise<PluginRepo> {\n    const name = \"plugin version\";\n    const query = QueryPlugin;\n    type T = { pluginRepo: SubgraphPluginRepo };\n    const { pluginRepo } = await this.graphql.request<T>({\n      query,\n      params: { id: pluginAddress },\n      name,\n    });\n    // get release metadata\n    let releaseMetadata: PluginRepoReleaseMetadata;\n    if (!pluginRepo.releases[0].metadata) {\n      releaseMetadata = EMPTY_RELEASE_METADATA_LINK;\n    } else {\n      try {\n        const metadataCid = resolveIpfsCid(pluginRepo.releases[0].metadata);\n        const stringMetadata = await this.ipfs.fetchString(metadataCid);\n        const resolvedMetadata = JSON.parse(stringMetadata);\n        releaseMetadata = resolvedMetadata;\n      } catch (err) {\n        releaseMetadata = UNAVAILABLE_RELEASE_METADATA;\n        if (err instanceof InvalidCidError) {\n          releaseMetadata = UNSUPPORTED_RELEASE_METADATA_LINK;\n        }\n      }\n    }\n    // get build metadata\n    let buildMetadata: PluginRepoBuildMetadata;\n    if (!pluginRepo.releases[0].builds[0].metadata) {\n      buildMetadata = EMPTY_BUILD_METADATA_LINK;\n    } else {\n      try {\n        const metadataCid = resolveIpfsCid(\n          pluginRepo.releases[0].builds[0].metadata,\n        );\n        const stringMetadata = await this.ipfs.fetchString(metadataCid);\n        const resolvedMetadata = JSON.parse(stringMetadata);\n        buildMetadata = resolvedMetadata;\n      } catch (err) {\n        buildMetadata = UNAVAILABLE_BUILD_METADATA;\n        if (err instanceof InvalidCidError) {\n          buildMetadata = UNSUPPORTED_BUILD_METADATA_LINK;\n        }\n      }\n    }\n    return toPluginRepo(pluginRepo, releaseMetadata, buildMetadata);\n  }\n}\n","import {\n  ApplyUninstallationParams,\n  GrantPermissionParams,\n  GrantPermissionWithConditionParams,\n  RegisterStandardCallbackParams,\n  RevokePermissionParams,\n  UpgradeToAndCallParams,\n  WithdrawParams,\n} from \"../../types\";\nimport {\n  ApplyInstallationParams,\n  ClientCore,\n  DaoAction,\n  LIVE_CONTRACTS,\n  TokenType,\n} from \"../../client-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  DAO__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  applyInstallatonParamsToContract,\n  applyUninstallationParamsToContract,\n  permissionParamsToContract,\n  permissionWithConditionParamsToContract,\n} from \"../utils\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { erc20ContractAbi } from \"../abi/erc20\";\nimport {\n  hexToBytes,\n  InvalidAddressError,\n} from \"@aragon/sdk-common\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { IClientEncoding } from \"../../interfaces\";\nimport { Permissions } from \"../../constants\";\n\n/**\n * Encoding module the SDK Generic Client\n */\nexport class ClientEncoding extends ClientCore implements IClientEncoding {\n  /**\n   * @param {string} daoAddress\n   * @param {ApplyInstallationParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public applyInstallationAction(\n    daoAddress: string,\n    params: ApplyInstallationParams,\n  ): DaoAction[] {\n    if (!isAddress(daoAddress)) {\n      throw new InvalidAddressError();\n    }\n    const network = this.web3.getNetworkName();\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n\n    const args = applyInstallatonParamsToContract(params);\n    const hexBytes = pspInterface.encodeFunctionData(\"applyInstallation\", [\n      daoAddress,\n      args,\n    ]);\n    // Grant ROOT_PERMISION in the DAO to the PSP\n    const grantAction = this.grantAction(daoAddress, {\n      where: daoAddress,\n      who: LIVE_CONTRACTS[network].pluginSetupProcessor,\n      permission: Permissions.ROOT_PERMISSION,\n    });\n\n    // Revoke ROOT_PERMISION in the DAO to the PSP\n    const revokeAction = this.revokeAction(daoAddress, {\n      where: daoAddress,\n      who: LIVE_CONTRACTS[network].pluginSetupProcessor,\n      permission: Permissions.ROOT_PERMISSION,\n    });\n    return [\n      grantAction,\n      {\n        to: LIVE_CONTRACTS[network].pluginSetupProcessor,\n        value: BigInt(0),\n        data: hexToBytes(hexBytes),\n      },\n      revokeAction,\n    ];\n  }\n\n  public applyUninstallationAction(\n    daoAddress: string,\n    params: ApplyUninstallationParams,\n  ): DaoAction[] {\n    const network = this.web3.getNetworkName();\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const args = applyUninstallationParamsToContract(params);\n    const hexBytes = pspInterface.encodeFunctionData(\"applyUninstallation\", [\n      daoAddress,\n      args,\n    ]);\n    // Grant ROOT_PERMISION in the DAO to the PSP\n    const grantAction = this.grantAction(daoAddress, {\n      where: daoAddress,\n      who: LIVE_CONTRACTS[network].pluginSetupProcessor,\n      permission: Permissions.ROOT_PERMISSION,\n    });\n\n    // Revoke ROOT_PERMISION in the DAO to the PSP\n    const revokeAction = this.revokeAction(daoAddress, {\n      where: daoAddress,\n      who: LIVE_CONTRACTS[network].pluginSetupProcessor,\n      permission: Permissions.ROOT_PERMISSION,\n    });\n    return [\n      grantAction,\n      {\n        to: LIVE_CONTRACTS[network].pluginSetupProcessor,\n        value: BigInt(0),\n        data: hexToBytes(hexBytes),\n      },\n      revokeAction,\n    ];\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that grants a permission within a DAO\n   *\n   * @param {string} daoAddress\n   * @param {GrantPermissionParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public grantAction(\n    daoAddress: string,\n    params: GrantPermissionParams,\n  ): DaoAction {\n    const { where, who } = params;\n    if (\n      !isAddress(where) || !isAddress(who) || !isAddress(daoAddress)\n    ) {\n      throw new InvalidAddressError();\n    }\n    const daoInterface = DAO__factory.createInterface();\n    const args = permissionParamsToContract(\n      {\n        who,\n        where,\n        permission: params.permission,\n      },\n    );\n    // get hex bytes\n    const hexBytes = daoInterface.encodeFunctionData(\"grant\", args);\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that grants a permission within a DAO given a certain condition\n   *\n   * @param {string} daoAddress\n   * @param {GrantPermissionWithConditionParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public grantWithConditionAction(\n    daoAddress: string,\n    params: GrantPermissionWithConditionParams,\n  ): DaoAction {\n    const { where, who } = params;\n    if (\n      !isAddress(where) || !isAddress(who) || !isAddress(daoAddress)\n    ) {\n      throw new InvalidAddressError();\n    }\n    const daoInterface = DAO__factory.createInterface();\n    const args = permissionWithConditionParamsToContract(\n      {\n        who,\n        where,\n        permission: params.permission,\n        condition: params.condition,\n      },\n    );\n    // get hex bytes\n    const hexBytes = daoInterface.encodeFunctionData(\n      \"grantWithCondition\",\n      args,\n    );\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that revokes a permission within a DAO\n   *\n   * @param {string} daoAddress\n   * @param {RevokePermissionParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public revokeAction(\n    daoAddress: string,\n    params: RevokePermissionParams,\n  ): DaoAction {\n    const { where, who } = params;\n    if (\n      !isAddress(where) || !isAddress(who) || !isAddress(daoAddress)\n    ) {\n      throw new InvalidAddressError();\n    }\n    const daoInterface = DAO__factory.createInterface();\n    const args = permissionParamsToContract(\n      {\n        who,\n        where,\n        permission: params.permission,\n      },\n    );\n    // get hex bytes\n    const hexBytes = daoInterface.encodeFunctionData(\"revoke\", args);\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that withdraws ether from the DAO\n   *\n   * @param {string} recipientAddressOrEns\n   * @param {WithdrawParams} value\n   * @return {*}  {Promise<DaoAction>}\n   * @memberof ClientEncoding\n   */\n  public async withdrawAction(params: WithdrawParams): Promise<DaoAction> {\n    let to = params.recipientAddressOrEns;\n    if (!isAddress(params.recipientAddressOrEns)) {\n      const resolvedAddress = await this.web3.getSigner()?.resolveName(\n        params.recipientAddressOrEns,\n      );\n      if (!resolvedAddress) {\n        throw new Error(\"invalid ens\");\n      }\n      to = resolvedAddress;\n    }\n\n    switch (params.type) {\n      case TokenType.NATIVE:\n        return { to, value: params.amount, data: new Uint8Array() };\n      case TokenType.ERC20:\n        if (!params.tokenAddress) {\n          throw new Error(\"Empty token contract address\");\n        }\n\n        const iface = new Contract(\n          params.tokenAddress,\n          erc20ContractAbi,\n        ).interface;\n        const data = iface.encodeFunctionData(\"transfer\", [\n          params.recipientAddressOrEns,\n          params.amount,\n        ]);\n        return {\n          to: params.tokenAddress,\n          value: BigInt(0),\n          data: hexToBytes(data),\n        };\n    }\n    throw new Error(\"Unsupported token type\");\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that updates the metadata the DAO\n   *\n   * @param {string} daoAddressOrEns\n   * @param {DaoMetadata} params\n   * @return {*}  {Promise<DaoAction>}\n   * @memberof ClientEncoding\n   */\n  public async updateDaoMetadataAction(\n    daoAddressOrEns: string,\n    metadataUri: string,\n  ): Promise<DaoAction> {\n    let address = daoAddressOrEns;\n    if (!isAddress(daoAddressOrEns)) {\n      const resolvedAddress = await this.web3.getSigner()?.resolveName(\n        daoAddressOrEns,\n      );\n      if (!resolvedAddress) {\n        throw new Error(\"Invalid ENS\");\n      }\n      address = resolvedAddress;\n    }\n    // upload metadata to IPFS\n    const daoInterface = DAO__factory.createInterface();\n    const args = toUtf8Bytes(metadataUri);\n    const hexBytes = daoInterface.encodeFunctionData(\"setMetadata\", [args]);\n    return {\n      to: address,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets the dao uri\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} daoUri\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public setDaoUriAction(\n    daoAddressOrEns: string,\n    daoUri: string,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"setDaoURI\", [daoUri]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that registers a new standard callback\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} daoUri\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public registerStandardCallbackAction(\n    daoAddressOrEns: string,\n    params: RegisterStandardCallbackParams,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\n      \"registerStandardCallback\",\n      [params.interfaceId, params.callbackSelector, params.magicNumber],\n    );\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets the signature validator\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} signatureValidator\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public setSignatureValidatorAction(\n    daoAddressOrEns: string,\n    signatureValidator: string,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"setSignatureValidator\", [\n      signatureValidator,\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets a new implementation for the proxy\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} implementationAddress\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public upgradeToAction(\n    daoAddressOrEns: string,\n    implementationAddress: string,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"upgradeTo\", [\n      implementationAddress,\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets a new implementation for the proxy and calls the callback function with the specified data\n   *\n   * @param {string} daoAddressOrEns\n   * @param {UpgradeToAndCallParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public upgradeToAndCallAction(\n    daoAddressOrEns: string,\n    params: UpgradeToAndCallParams,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"upgradeToAndCall\", [\n      params.implementationAddress,\n      params.data,\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n","import {\n  DAO__factory,\n  DAOFactory,\n  DAOFactory__factory,\n  PluginRepo__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  DepositNativeTokenError,\n  InvalidAddressOrEnsError,\n  NoProviderError,\n} from \"@aragon/sdk-common\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { erc20ContractAbi } from \"../abi/erc20\";\nimport { ClientCore, GasFeeEstimation, TokenType } from \"../../client-common\";\nimport {\n  CreateDaoParams,\n  DepositParams,\n  SetAllowanceParams,\n} from \"../../types\";\nimport { unwrapDepositParams } from \"../utils\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { IClientEstimation } from \"../../interfaces\";\n\n/**\n * Estimation module the SDK Generic Client\n */\nexport class ClientEstimation extends ClientCore implements IClientEstimation {\n  /**\n   * Estimates the gas fee of creating a DAO\n   *\n   * @param {CreateDaoParams} _params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public async createDao(params: CreateDaoParams): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (\n      params.ensSubdomain && !params.ensSubdomain.match(/^[a-z0-9\\-]+$/)\n    ) {\n      throw new Error(\"Invalid subdomain format: use a-z, 0-9 and -\");\n    }\n\n    const daoInstance = DAOFactory__factory.connect(\n      this.web3.getDaoFactoryAddress(),\n      signer,\n    );\n    const pluginInstallationData: DAOFactory.PluginSettingsStruct[] = [];\n    for (const plugin of params.plugins) {\n      const repo = PluginRepo__factory.connect(plugin.id, signer);\n\n      const currentRelease = await repo.latestRelease();\n      const latestVersion = await repo[\"getLatestVersion(uint8)\"](\n        currentRelease,\n      );\n      pluginInstallationData.push({\n        pluginSetupRef: {\n          pluginSetupRepo: repo.address,\n          versionTag: latestVersion.tag,\n        },\n        data: plugin.data,\n      });\n    }\n\n    const gasEstimation = await daoInstance.estimateGas.createDao(\n      {\n        subdomain: params.ensSubdomain,\n        metadata: toUtf8Bytes(params.metadataUri),\n        daoURI: params.daoUri || \"\",\n        trustedForwarder: params.trustedForwarder || AddressZero,\n      },\n      pluginInstallationData,\n    );\n\n    return this.web3.getApproximateGasFee(gasEstimation.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of depositing ether or an ERC20 token into the DAO\n   * This does not estimate the gas cost of updating the allowance of an ERC20 token\n   *\n   * @param {DepositParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public deposit(\n    params: DepositParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    if (params.type !== TokenType.NATIVE && params.type !== TokenType.ERC20) {\n      throw new DepositNativeTokenError();\n    }\n\n    const [daoAddress, amount, tokenAddress, reference] = unwrapDepositParams(\n      params,\n    );\n\n    const daoInstance = DAO__factory.connect(daoAddress, signer);\n\n    const override: { value?: bigint } = {};\n    if (tokenAddress === AddressZero) {\n      override.value = amount;\n    }\n\n    return daoInstance.estimateGas\n      .deposit(tokenAddress, amount, reference, override)\n      .then((gasLimit) => {\n        return this.web3.getApproximateGasFee(gasLimit.toBigInt());\n      });\n  }\n  /**\n   * Estimates the gas fee of updating the allowance of an ERC20 token\n   *\n   * @param {SetAllowanceParams} _params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public async setAllowance(\n    params: SetAllowanceParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    // resolve ens\n    let daoAddress = params.spender;\n    if (!isAddress(daoAddress)) {\n      await this.web3.ensureOnline();\n      const provider = this.web3.getProvider();\n      if (!provider) {\n        throw new NoProviderError();\n      }\n      const resolvedAddress = await provider.resolveName(daoAddress);\n      if (!resolvedAddress) {\n        throw new InvalidAddressOrEnsError();\n      }\n      daoAddress = resolvedAddress;\n    }\n\n    const contract = new Contract(\n      params.tokenAddress,\n      erc20ContractAbi,\n      signer,\n    );\n    return contract.estimateGas.approve(\n      daoAddress,\n      params.amount,\n    ).then((gasLimit) => {\n      return this.web3.getApproximateGasFee(gasLimit.toBigInt());\n    });\n  }\n}\n","import {\n  DaoMetadata,\n  DecodedApplyUninstallationParams,\n  GrantPermissionWithConditionParams,\n  GrantPermissionDecodedParams,\n  RevokePermissionDecodedParams,\n  RegisterStandardCallbackParams,\n  UpgradeToAndCallParams,\n  WithdrawParams,\n} from \"../../types\";\n\nimport {\n  ClientCore,\n  DecodedApplyInstallationParams,\n  getFunctionFragment,\n  InterfaceParams,\n  TokenType\n} from \"../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport {\n  DAO__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  applyInstallatonParamsFromContract,\n  permissionParamsFromContract,\n  permissionParamsWitConditionFromContract,\n  withdrawParamsFromContract,\n} from \"../utils\";\nimport { bytesToHex, hexToBytes, resolveIpfsCid } from \"@aragon/sdk-common\";\nimport { erc20ContractAbi } from \"../abi/erc20\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { toUtf8String } from \"@ethersproject/strings\";\nimport { IClientDecoding } from \"../../interfaces\";\n\n/**\n * Decoding module the SDK Generic Client\n */\nexport class ClientDecoding extends ClientCore implements IClientDecoding {\n  /**\n   * @param {data} Uint8Array\n   * @return {*}  {DecodedApplyInstallationParams}\n   * @memberof ClientDecoding\n   */\n  public applyInstallationAction(\n    data: Uint8Array,\n  ): DecodedApplyInstallationParams {\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = pspInterface.getFunction(\"applyInstallation\");\n    const result = pspInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return applyInstallatonParamsFromContract(result);\n  }\n  /**\n   * @param {data} Uint8Array\n   * @return {*}  {DecodedApplyInstallationParams}\n   * @memberof ClientDecoding\n   */\n  public applyUninstallationAction(\n    data: Uint8Array,\n  ): DecodedApplyUninstallationParams {\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = pspInterface.getFunction(\"applyUninstallation\");\n    const result = pspInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return applyInstallatonParamsFromContract(result);\n  }\n  /**\n   * Decodes the permission parameters from an encoded grant action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {GrantPermissionDecodedParams}\n   * @memberof ClientDecoding\n   */\n  public grantAction(data: Uint8Array): GrantPermissionDecodedParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"grant\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return permissionParamsFromContract(result);\n  }\n  /**\n   * Decodes the grant permission with condition parameters from an encoded grant with condition action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {GrantPermissionWithConditionParams}\n   * @memberof ClientDecoding\n   */\n  public grantWithConditionAction(\n    data: Uint8Array,\n  ): GrantPermissionWithConditionParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"grantWithCondition\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return permissionParamsWitConditionFromContract(result);\n  }\n  /**\n   * Decodes the permission parameters from an encoded revoke action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {RevokePermissionDecodedParams}\n   * @memberof ClientDecoding\n   */\n  public revokeAction(data: Uint8Array): RevokePermissionDecodedParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"revoke\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return permissionParamsFromContract(result);\n  }\n  /**\n   * Decodes the withdraw parameters from an encoded withdraw action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {WithdrawParams}\n   * @memberof ClientDecoding\n   */\n  public withdrawAction(\n    to: string,\n    value: bigint,\n    data: Uint8Array,\n  ): WithdrawParams {\n    // Native\n    if (!data?.length) {\n      return {\n        type: TokenType.NATIVE,\n        recipientAddressOrEns: to,\n        amount: value,\n      };\n    }\n\n    // ERC20 and other\n    const abiObjects = [{\n      tokenStandard: TokenType.ERC20,\n      abi: erc20ContractAbi,\n    }];\n    for (const abiObject of abiObjects) {\n      const hexBytes = bytesToHex(data);\n      const iface = new Contract(AddressZero, abiObject.abi).interface;\n      const expectedFunction = iface.getFunction(\"transfer\");\n      const result = iface.decodeFunctionData(expectedFunction, hexBytes);\n      return withdrawParamsFromContract(\n        to,\n        value,\n        result,\n        abiObject.tokenStandard,\n      );\n    }\n    throw new Error(\"The received action is not recognized\");\n  }\n  /**\n   * Decodes a dao metadata ipfs uri from an encoded update metadata action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string}\n   * @memberof ClientDecoding\n   */\n  public updateDaoMetadataRawAction(data: Uint8Array): string {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"setMetadata\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    const metadataUri = toUtf8String(result[0]);\n    resolveIpfsCid(metadataUri);\n    return metadataUri;\n  }\n  /**\n   * Decodes a dao metadata from an encoded update metadata raw action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {Promise<DaoMetadata>}\n   * @memberof ClientDecoding\n   */\n  public async updateDaoMetadataAction(data: Uint8Array): Promise<DaoMetadata> {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"setMetadata\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    const metadataUri = toUtf8String(result[0]);\n    const ipfsCid = resolveIpfsCid(metadataUri);\n    try {\n      const stringMetadata = await this.ipfs.fetchString(ipfsCid);\n      return JSON.parse(stringMetadata);\n    } catch {\n      throw new Error(\"Error reading data from IPFS\");\n    }\n  }\n  /**\n   * Decodes the daoUri from a setDaoUriAction\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string}\n   * @memberof ClientDecoding\n   */\n  public setDaoUriAction(data: Uint8Array): string {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"setDaoURI\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return result[0];\n  }\n  /**\n   * Decodes the RegisterStandardCallbackParams from a registerStandardCallbackAction\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {RegisterStandardCallbackParams}\n   * @memberof ClientDecoding\n   */\n  public registerStandardCallbackAction(\n    data: Uint8Array,\n  ): RegisterStandardCallbackParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"registerStandardCallback\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return {\n      interfaceId: result[0],\n      callbackSelector: result[1],\n      magicNumber: result[2],\n    };\n  }\n  /**\n   * Decodes the implementation address from an encoded upgradeToAction\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string}\n   * @memberof ClientDecoding\n   */\n  public setSignatureValidatorAction(\n    data: Uint8Array,\n  ): string {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"setSignatureValidator\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return result[0];\n  }\n  public upgradeToAction(data: Uint8Array): string {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"upgradeTo\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return result[0];\n  }\n  /**\n   * Decodes upgradeToAndCallback params from an upgradeToAndCallAction\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {UpgradeToAndCallParams}\n   * @memberof ClientDecoding\n   */\n  public upgradeToAndCallAction(\n    data: Uint8Array,\n  ): UpgradeToAndCallParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"upgradeToAndCall\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return {\n      implementationAddress: result[0],\n      data: hexToBytes(result[1]),\n    };\n  }\n\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {(InterfaceParams | null)}\n   * @memberof ClientDecoding\n   */\n  public findInterface(data: Uint8Array): InterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n","import { Context } from \"./client-common/context\";\nimport { ClientMethods } from \"./internal/client/methods\";\nimport { ClientEncoding } from \"./internal/client/encoding\";\nimport { ClientEstimation } from \"./internal/client/estimation\";\nimport { ClientDecoding } from \"./internal/client/decoding\";\nimport {\n  IClient,\n  IClientDecoding,\n  IClientEncoding,\n  IClientEstimation,\n  IClientMethods,\n} from \"./interfaces\";\nimport { ClientCore } from \"./client-common/core\";\n\n/**\n * Provider a generic client with high level methods to manage and interact with DAO's\n */\nexport class Client extends ClientCore implements IClient {\n  public methods: IClientMethods;\n  public encoding: IClientEncoding;\n  public decoding: IClientDecoding;\n  public estimation: IClientEstimation;\n\n  constructor(context: Context) {\n    super(context);\n    this.methods = new ClientMethods(context);\n    this.encoding = new ClientEncoding(context);\n    this.decoding = new ClientDecoding(context);\n    this.estimation = new ClientEstimation(context);\n  }\n}\n","import { gql } from \"graphql-request\";\n\nexport const QueryAddresslistVotingMembers = gql`\nquery AddresslistVotingMembers($address: ID!) {\n    addresslistVotingPlugin(id: $address){\n        members {\n            address\n        }\n    }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryAddresslistVotingProposal = gql`\nquery AddresslistVotingProposal($proposalId: ID!) {\n  addresslistVotingProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    creationBlockNumber\n    executionDate\n    executionBlockNumber\n    actions {\n      to\n      value\n      data\n    }\n    yes\n    no\n    abstain\n    votingMode\n    supportThreshold\n    startDate\n    endDate\n    executed\n    earlyExecutable\n    potentiallyExecutable\n    executionTxHash\n    voters{\n      voter{\n        address\n      }\n      voteOption\n      voteReplaced\n    }\n    totalVotingPower\n    minVotingPower\n  }\n}\n`;\nexport const QueryAddresslistVotingProposals = gql`\nquery AddresslistVotingProposals($where: AddresslistVotingProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: AddresslistVotingProposal_orderBy!) {\n  addresslistVotingProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    yes\n    no\n    abstain\n    startDate\n    endDate\n    executed\n    earlyExecutable\n    potentiallyExecutable\n    voters{\n      voter{\n        address\n      }\n      voteOption\n      voteReplaced\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryAddresslistVotingSettings = gql`\nquery AddresslistVotingSettings($address: ID!) {\n  addresslistVotingPlugin(id: $address){\n    minDuration\n    minProposerVotingPower\n    minParticipation\n    supportThreshold\n    votingMode\n  }\n}\n`;\n","import {\n  decodeRatio,\n  getCompactProposalId,\n  hexToBytes,\n} from \"@aragon/sdk-common\";\nimport {\n  computeProposalStatus,\n  ContractVotingSettings,\n  DaoAction,\n  ProposalMetadata,\n  SubgraphAction,\n  SubgraphVoteValuesMap,\n  VoteValues,\n  votingSettingsToContract,\n} from \"../../client-common\";\nimport {\n  AddresslistVotingPluginInstall,\n  AddresslistVotingProposal,\n  AddresslistVotingProposalListItem,\n} from \"../types\";\nimport {\n  ContractAddresslistVotingInitParams,\n  SubgraphAddresslistVotingProposal,\n  SubgraphAddresslistVotingProposalListItem,\n  SubgraphAddresslistVotingVoterListItem,\n} from \"./types\";\n\nexport function toAddresslistVotingProposal(\n  proposal: SubgraphAddresslistVotingProposal,\n  metadata: ProposalMetadata,\n): AddresslistVotingProposal {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  const creationDate = new Date(\n    parseInt(proposal.createdAt) * 1000,\n  );\n  const executionDate = proposal.executionDate\n    ? new Date(\n      parseInt(proposal.executionDate) * 1000,\n    )\n    : null;\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n      description: metadata.description,\n      resources: metadata.resources,\n      media: metadata.media,\n    },\n    startDate,\n    endDate,\n    creationDate,\n    executionTxHash: proposal.executionTxHash || null,\n    creationBlockNumber: parseInt(proposal.creationBlockNumber),\n    executionDate,\n    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? parseInt(proposal.yes) : 0,\n      no: proposal.no ? parseInt(proposal.no) : 0,\n      abstain: proposal.abstain ? parseInt(proposal.abstain) : 0,\n    },\n    settings: {\n      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),\n      minParticipation: decodeRatio(\n        (BigInt(proposal.minVotingPower) * BigInt(1000000)) /\n          BigInt(proposal.totalVotingPower),\n        6,\n      ),\n      duration: parseInt(proposal.endDate) -\n        parseInt(proposal.startDate),\n    },\n    totalVotingWeight: parseInt(proposal.totalVotingPower),\n    votes: proposal.voters.map(\n      (voter: SubgraphAddresslistVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n        };\n      },\n    ),\n  };\n}\nexport function toAddresslistVotingProposalListItem(\n  proposal: SubgraphAddresslistVotingProposalListItem,\n  metadata: ProposalMetadata,\n): AddresslistVotingProposalListItem {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n    },\n    startDate,\n    endDate,\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? parseInt(proposal.yes) : 0,\n      no: proposal.no ? parseInt(proposal.no) : 0,\n      abstain: proposal.abstain ? parseInt(proposal.abstain) : 0,\n    },\n    votes: proposal.voters.map(\n      (voter: SubgraphAddresslistVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n        };\n      },\n    ),\n  };\n}\n\nexport function addresslistVotingInitParamsToContract(\n  params: AddresslistVotingPluginInstall,\n): ContractAddresslistVotingInitParams {\n  return [\n    Object.values(\n      votingSettingsToContract(params.votingSettings),\n    ) as ContractVotingSettings,\n    params.addresses,\n  ];\n}\n","import {\n  hexToBytes,\n  InvalidAddressError,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  ClientCore,\n  DaoAction,\n  encodeUpdateVotingSettingsAction,\n  PluginInstallItem,\n  SupportedNetwork,\n  SupportedNetworksArray,\n  VotingSettings,\n  votingSettingsToContract,\n} from \"../../../client-common\";\nimport { IAddresslistVotingClientEncoding } from \"../../interfaces\";\nimport { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { LIVE_CONTRACTS } from \"../../../client-common/constants\";\nimport { getNetwork, Networkish } from \"@ethersproject/providers\";\nimport { AddresslistVotingPluginInstall } from \"../../types\";\n\n/**\n * Encoding module for the SDK AddressList Client\n */\nexport class AddresslistVotingClientEncoding extends ClientCore\n  implements IAddresslistVotingClientEncoding {\n  /**\n   * Computes the parameters to be given when creating the DAO,\n   * so that the plugin is configured\n   *\n   * @param {AddresslistVotingPluginInstall} params\n   * @param {Networkish} network\n   * @return {*}  {PluginInstallItem}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  static getPluginInstallItem(\n    params: AddresslistVotingPluginInstall,\n    network: Networkish,\n  ): PluginInstallItem {\n    const networkName = getNetwork(network).name as SupportedNetwork;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    const {\n      votingMode,\n      supportThreshold,\n      minParticipation,\n      minDuration,\n      minProposerVotingPower,\n    } = votingSettingsToContract(params.votingSettings);\n\n    const hexBytes = defaultAbiCoder.encode(\n      [\n        \"tuple(uint8 votingMode, uint64 supportThreshold, uint64 minParticipation, uint64 minDuration, uint256 minProposerVotingPower) votingSettings\",\n        \"address[] members\",\n      ],\n      [\n        [\n          votingMode,\n          supportThreshold,\n          minParticipation,\n          minDuration,\n          minProposerVotingPower,\n        ],\n        params.addresses,\n      ],\n    );\n\n    return {\n      id: LIVE_CONTRACTS[networkName].addresslistVotingRepo,\n      data: hexToBytes(hexBytes),\n    };\n  }\n\n  /**\n   * Computes the parameters to be given when creating a proposal that updates the governance configuration\n   *\n   * @param {string} pluginAddress\n   * @param {VotingSettings} params\n   * @return {*}  {DaoAction}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  public updatePluginSettingsAction(\n    pluginAddress: string,\n    params: VotingSettings,\n  ): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO: check if to and value are correct\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: encodeUpdateVotingSettingsAction(params),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that adds addresses to address list\n   *\n   * @param {string} pluginAddress\n   * @param {string[]} members\n   * @return {*}  {DaoAction}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  public addMembersAction(pluginAddress: string, members: string[]): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    for (const member of members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    // get hex bytes\n    const hexBytes = votingInterface.encodeFunctionData(\n      \"addAddresses\",\n      [members],\n    );\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that removes addresses from the address list\n   *\n   * @param {string} pluginAddress\n   * @param {string[]} members\n   * @return {*}  {DaoAction}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  public removeMembersAction(\n    pluginAddress: string,\n    members: string[],\n  ): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    for (const member of members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    // get hex bytes\n    const hexBytes = votingInterface.encodeFunctionData(\n      \"removeAddresses\",\n      [members],\n    );\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n","import {\n  boolArrayToBitmap,\n  decodeProposalId,\n  decodeRatio,\n  encodeProposalId,\n  getExtendedProposalId,\n  InvalidAddressError,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidProposalIdError,\n  IpfsPinError,\n  isProposalId,\n  NoProviderError,\n  PluginInstallationPreparationError,\n  ProposalCreationError,\n  resolveIpfsCid,\n} from \"@aragon/sdk-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { IAddresslistVotingClientMethods } from \"../../interfaces\";\nimport {\n  CanVoteParams,\n  ClientCore,\n  computeProposalStatusFilter,\n  CreateMajorityVotingProposalParams,\n  ExecuteProposalStep,\n  ExecuteProposalStepValue,\n  findLog,\n  PrepareInstallationStep,\n  PrepareInstallationStepValue,\n  ProposalCreationSteps,\n  ProposalCreationStepValue,\n  ProposalMetadata,\n  ProposalQueryParams,\n  ProposalSortBy,\n  SortDirection,\n  SubgraphMembers,\n  SubgraphVotingSettings,\n  VersionTag,\n  VoteProposalParams,\n  VoteProposalStep,\n  VoteProposalStepValue,\n  VotingSettings,\n} from \"../../../client-common\";\nimport {\n  QueryAddresslistVotingMembers,\n  QueryAddresslistVotingProposal,\n  QueryAddresslistVotingProposals,\n  QueryAddresslistVotingSettings,\n} from \"../graphql-queries\";\nimport {\n  toAddresslistVotingProposal,\n  toAddresslistVotingProposalListItem,\n} from \"../utils\";\nimport {\n  AddresslistVoting__factory,\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  EMPTY_PROPOSAL_METADATA_LINK,\n  LIVE_CONTRACTS,\n  UNAVAILABLE_PROPOSAL_METADATA,\n  UNSUPPORTED_PROPOSAL_METADATA_LINK,\n} from \"../../../client-common/constants\";\nimport { AddresslistVotingClientEncoding } from \"./encoding\";\nimport {\n  AddresslistVotingPluginPrepareInstallationParams,\n  AddresslistVotingProposal,\n  AddresslistVotingProposalListItem,\n} from \"../../types\";\nimport {\n  SubgraphAddresslistVotingProposal,\n  SubgraphAddresslistVotingProposalListItem,\n} from \"../types\";\n\n/**\n * Methods module the SDK Address List Client\n */\nexport class AddresslistVotingClientMethods extends ClientCore\n  implements IAddresslistVotingClientMethods {\n  /**\n   * Creates a new proposal on the given AddressList plugin contract\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {*}  {AsyncGenerator<ProposalCreationStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): AsyncGenerator<ProposalCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const tx = await addresslistContract.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n      params.creatorVote || 0,\n      params.executeOnPass || false,\n    );\n\n    yield {\n      key: ProposalCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const addresslistContractInterface = AddresslistVoting__factory\n      .createInterface();\n\n    const log = findLog(\n      receipt,\n      addresslistContractInterface,\n      \"ProposalCreated\",\n    );\n\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = addresslistContractInterface.parseLog(log);\n    const proposalId = parsedLog.args[\"proposalId\"];\n    if (!proposalId) {\n      throw new ProposalCreationError();\n    }\n\n    yield {\n      key: ProposalCreationSteps.DONE,\n      proposalId: encodeProposalId(params.pluginAddress, Number(proposalId)),\n    };\n  }\n\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {ProposalMetadata} params\n   * @return {*}  {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async pinMetadata(params: ProposalMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch (e) {\n      throw new IpfsPinError(e);\n    }\n  }\n  /**\n   * Cast a vote on the given proposal using the client's wallet. Depending on the proposal settings, an affirmative vote may execute the proposal's actions on the DAO.\n   *\n   * @param {VoteProposalParams} params\n   * @return {*}  {AsyncGenerator<VoteProposalStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *voteProposal(\n    params: VoteProposalParams,\n  ): AsyncGenerator<VoteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await addresslistContract.vote(\n      id,\n      params.vote,\n      false,\n    );\n\n    yield {\n      key: VoteProposalStep.VOTING,\n      txHash: tx.hash,\n    };\n\n    await tx.wait();\n\n    yield {\n      key: VoteProposalStep.DONE,\n    };\n  }\n\n  /**\n   * Executes the given proposal, provided that it has already passed\n   *\n   * @param {string} proposalId\n   * @return {*}  {AsyncGenerator<ExecuteProposalStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *executeProposal(\n    proposalId: string,\n  ): AsyncGenerator<ExecuteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const tx = await addresslistContract.execute(id);\n\n    yield {\n      key: ExecuteProposalStep.EXECUTING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: ExecuteProposalStep.DONE,\n    };\n  }\n  /**\n   * Prepares the installation of a token voting plugin in a given dao\n   *\n   * @param {AddresslistVotingPluginPrepareInstallationParams} params\n   * @return {*}  {AsyncGenerator<PrepareInstallationStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *prepareInstallation(\n    params: AddresslistVotingPluginPrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const networkName = this.web3.getNetworkName();\n    // connect to psp contract\n    const pspContract = PluginSetupProcessor__factory.connect(\n      LIVE_CONTRACTS[networkName].pluginSetupProcessor,\n      signer,\n    );\n    // connect to plugin repo\n    const addresslistVotingRepoContract = PluginRepo__factory.connect(\n      LIVE_CONTRACTS[networkName].addresslistVotingRepo,\n      signer,\n    );\n    // use specified version or latest\n    let versionTag: VersionTag | undefined = params.versionTag;\n    if (!params.versionTag) {\n      const latestVersion = await addresslistVotingRepoContract\n        [\"getLatestVersion(address)\"](\n          LIVE_CONTRACTS[networkName].addresslistVotingSetup,\n        );\n      versionTag = {\n        build: latestVersion.tag.build,\n        release: latestVersion.tag.release,\n      };\n    }\n    // get install data\n    const addresslistVotingPluginInstallItem = AddresslistVotingClientEncoding\n      .getPluginInstallItem(params.settings, networkName);\n    // execute prepareInstallation\n    const tx = await pspContract.prepareInstallation(\n      params.daoAddressOrEns,\n      {\n        pluginSetupRef: {\n          pluginSetupRepo: LIVE_CONTRACTS[networkName].addresslistVotingRepo,\n          versionTag: versionTag!,\n        },\n        data: addresslistVotingPluginInstallItem.data,\n      },\n    );\n\n    yield {\n      key: PrepareInstallationStep.PREPARING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const pspContractInterface = PluginSetupProcessor__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      pspContractInterface,\n      \"InstallationPrepared\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = pspContractInterface.parseLog(log);\n    const pluginAddress = parsedLog.args[\"plugin\"];\n    const preparedSetupData = parsedLog.args[\"preparedSetupData\"];\n    if (!(pluginAddress || preparedSetupData)) {\n      throw new PluginInstallationPreparationError();\n    }\n    yield {\n      key: PrepareInstallationStep.DONE,\n      pluginAddress,\n      pluginRepo: LIVE_CONTRACTS[networkName].addresslistVotingRepo,\n      versionTag: versionTag!,\n      permissions: preparedSetupData.permissions,\n      helpers: preparedSetupData.helpers,\n    };\n  }\n\n  /**\n   * Checks if an user can vote in a proposal\n   *\n   * @param {CanVoteParams} params\n   * @return {*}  {Promise<boolean>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async canVote(params: CanVoteParams): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    return addresslistContract.callStatic.canVote(\n      id,\n      params.voterAddressOrEns,\n      params.vote,\n    );\n  }\n  /**\n   * Checks whether the current proposal can be executed\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<boolean>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async canExecute(\n    proposalId: string,\n  ): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    return addresslistContract.canExecute(id);\n  }\n  /**\n   * Returns the list of wallet addresses with signing capabilities on the plugin\n   *\n   * @async\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<string[]>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getMembers(pluginAddress: string): Promise<string[]> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryAddresslistVotingMembers;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"AddresslistVotingVoting members\";\n    type T = { addresslistVotingPlugin: SubgraphMembers };\n    const { addresslistVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return addresslistVotingPlugin.members.map((\n      member: { address: string },\n    ) => member.address);\n  }\n  /**\n   * Returns the details of the given proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {(Promise<AddresslistVotingProposal | null>)}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getProposal(\n    proposalId: string,\n  ): Promise<AddresslistVotingProposal | null> {\n    if (!isProposalId(proposalId)) {\n      throw new InvalidProposalIdError();\n    }\n    const extendedProposalId = getExtendedProposalId(proposalId);\n    const query = QueryAddresslistVotingProposal;\n    const params = {\n      proposalId: extendedProposalId,\n    };\n    const name = \"AddresslistVoting proposal\";\n    type T = { addresslistVotingProposal: SubgraphAddresslistVotingProposal };\n    const { addresslistVotingProposal } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!addresslistVotingProposal) {\n      return null;\n    } else if (!addresslistVotingProposal.metadata) {\n      return toAddresslistVotingProposal(\n        addresslistVotingProposal,\n        EMPTY_PROPOSAL_METADATA_LINK,\n      );\n    }\n    try {\n      const metadataCid = resolveIpfsCid(addresslistVotingProposal.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as ProposalMetadata;\n      return toAddresslistVotingProposal(addresslistVotingProposal, metadata);\n      // TODO: Parse and validate schema\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toAddresslistVotingProposal(\n          addresslistVotingProposal,\n          UNSUPPORTED_PROPOSAL_METADATA_LINK,\n        );\n      }\n      return toAddresslistVotingProposal(\n        addresslistVotingProposal,\n        UNAVAILABLE_PROPOSAL_METADATA,\n      );\n    }\n  }\n\n  /**\n   * Returns a list of proposals on the Plugin, filtered by the given criteria\n   *\n   * @param {ProposalQueryParams} {\n   *       daoAddressOrEns,\n   *       limit = 10,\n   *       status,\n   *       skip = 0,\n   *       direction = SortDirection.ASC,\n   *       sortBy = ProposalSortBy.CREATED_AT,\n   *     }\n   * @return {*}  {Promise<AddresslistVotingProposalListItem[]>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getProposals({\n    daoAddressOrEns,\n    limit = 10,\n    status,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = ProposalSortBy.CREATED_AT,\n  }: ProposalQueryParams): Promise<AddresslistVotingProposalListItem[]> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        try {\n          const resolvedAddress = await provider.resolveName(address);\n          if (!resolvedAddress) {\n            throw new InvalidAddressOrEnsError();\n          }\n          address = resolvedAddress;\n        } catch {\n          throw new InvalidAddressOrEnsError();\n        }\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (status) {\n      where = { ...where, ...computeProposalStatusFilter(status) };\n    }\n\n    const query = QueryAddresslistVotingProposals;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"AddresslistVoting proposals\";\n    type T = {\n      addresslistVotingProposals: SubgraphAddresslistVotingProposalListItem[];\n    };\n    const { addresslistVotingProposals } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      addresslistVotingProposals.map(\n        async (\n          proposal: SubgraphAddresslistVotingProposalListItem,\n        ): Promise<AddresslistVotingProposalListItem> => {\n          // format in the metadata field\n          if (!proposal.metadata) {\n            return toAddresslistVotingProposalListItem(\n              proposal,\n              EMPTY_PROPOSAL_METADATA_LINK,\n            );\n          }\n          try {\n            const metadataCid = resolveIpfsCid(proposal.metadata);\n            const stringMetadata = await this.ipfs.fetchString(metadataCid);\n            const metadata = JSON.parse(stringMetadata) as ProposalMetadata;\n            return toAddresslistVotingProposalListItem(proposal, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toAddresslistVotingProposalListItem(\n                proposal,\n                UNSUPPORTED_PROPOSAL_METADATA_LINK,\n              );\n            }\n            return toAddresslistVotingProposalListItem(\n              proposal,\n              UNAVAILABLE_PROPOSAL_METADATA,\n            );\n          }\n        },\n      ),\n    );\n  }\n\n  /**\n   * Returns the settings of a plugin given the address of the plugin instance\n   *\n   * @param {string} pluginAddress\n   * @return {*}  {(Promise<VotingSettings | null>)}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getVotingSettings(\n    pluginAddress: string,\n  ): Promise<VotingSettings | null> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryAddresslistVotingSettings;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"AddresslistVoting settings\";\n    type T = { addresslistVotingPlugin: SubgraphVotingSettings };\n    const { addresslistVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!addresslistVotingPlugin) {\n      return null;\n    }\n    return {\n      minDuration: parseInt(addresslistVotingPlugin.minDuration),\n      supportThreshold: decodeRatio(\n        BigInt(addresslistVotingPlugin.supportThreshold),\n        6,\n      ),\n      minParticipation: decodeRatio(\n        BigInt(addresslistVotingPlugin.minParticipation),\n        6,\n      ),\n      minProposerVotingPower: BigInt(\n        addresslistVotingPlugin.minProposerVotingPower,\n      ),\n      votingMode: addresslistVotingPlugin.votingMode,\n    };\n  }\n}\n","import {\n  AddresslistVoting__factory,\n  MajorityVotingBase__factory,\n} from \"@aragon/osx-ethers\";\n\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  MajorityVotingBase__factory.createInterface().getFunction(\n    \"updateVotingSettings\",\n  )\n    .format(\"minimal\"),\n  AddresslistVoting__factory.createInterface().getFunction(\"addAddresses\")\n    .format(\"minimal\"),\n  AddresslistVoting__factory.createInterface().getFunction(\n    \"removeAddresses\",\n  ).format(\"minimal\"),\n];\n","import { bytesToHex } from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  decodeUpdatePluginSettingsAction,\n  getFunctionFragment,\n  InterfaceParams,\n  VotingSettings,\n} from \"../../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport { IAddresslistVotingClientDecoding } from \"../../interfaces\";\nimport { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\n\n/**\n * Decoding module for the SDK AddressList Client\n */\nexport class AddresslistVotingClientDecoding extends ClientCore\n  implements IAddresslistVotingClientDecoding {\n  /**\n   * Decodes a dao metadata from an encoded update metadata action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {VotingSettings}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public updatePluginSettingsAction(data: Uint8Array): VotingSettings {\n    return decodeUpdatePluginSettingsAction(data);\n  }\n  /**\n   * Decodes a list of addresses from an encoded add members action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string[]}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public addMembersAction(data: Uint8Array): string[] {\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = votingInterface.getFunction(\"addAddresses\");\n    const result = votingInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Decodes a list of addresses from an encoded remove members action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string[]}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public removeMembersAction(data: Uint8Array): string[] {\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = votingInterface.getFunction(\n      \"removeAddresses\",\n    );\n    const result = votingInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {(InterfaceParams | null)}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public findInterface(data: Uint8Array): InterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n","import { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\nimport {\n  ClientCore,\n  CreateMajorityVotingProposalParams,\n  GasFeeEstimation,\n  VoteProposalParams,\n} from \"../../../client-common\";\nimport { IAddresslistVotingClientEstimation } from \"../../interfaces\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { boolArrayToBitmap, decodeProposalId } from \"@aragon/sdk-common\";\n\n/**\n * Estimation module the SDK Address List Client\n */\nexport class AddresslistVotingClientEstimation extends ClientCore\n  implements IAddresslistVotingClientEstimation {\n  /**\n   * Estimates the gas fee of creating a proposal on the plugin\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const estimatedGasFee = await addresslistContract.estimateGas\n      .createProposal(\n        toUtf8Bytes(params.metadataUri),\n        params.actions || [],\n        allowFailureMap,\n        Math.round(startTimestamp / 1000),\n        Math.round(endTimestamp / 1000),\n        params.creatorVote || 0,\n        params.executeOnPass || false,\n      );\n    return this.web3.getApproximateGasFee(estimatedGasFee.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of casting a vote on a proposal\n   *\n   * @param {VoteProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async voteProposal(\n    params: VoteProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      params.proposalId,\n    );\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const estimation = await addresslistContract.estimateGas.vote(\n      id,\n      params.vote,\n      false,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of executing an AddressList proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async executeProposal(\n    proposalId: string,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      proposalId,\n    );\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const estimation = await addresslistContract.estimateGas.execute(\n      id,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n}\n","import {\n  IAddresslistVotingClient,\n  IAddresslistVotingClientDecoding,\n  IAddresslistVotingClientEncoding,\n  IAddresslistVotingClientEstimation,\n  IAddresslistVotingClientMethods,\n} from \"./interfaces\";\nimport { AddresslistVotingClientMethods } from \"./internal/client/methods\";\nimport { AddresslistVotingClientEncoding } from \"./internal/client/encoding\";\nimport { AddresslistVotingClientDecoding } from \"./internal/client/decoding\";\nimport { AddresslistVotingClientEstimation } from \"./internal/client/estimation\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  PluginInstallItem,\n} from \"../client-common\";\nimport { Networkish } from \"@ethersproject/providers\";\nimport { AddresslistVotingPluginInstall } from \"./types\";\n\n/**\n * Provider a generic client with high level methods to manage and interact an Address List Voting plugin installed in a DAO\n */\nexport class AddresslistVotingClient extends ClientCore\n  implements IAddresslistVotingClient {\n  public methods: IAddresslistVotingClientMethods;\n  public encoding: IAddresslistVotingClientEncoding;\n  public decoding: IAddresslistVotingClientDecoding;\n  public estimation: IAddresslistVotingClientEstimation;\n\n  constructor(context: ContextPlugin) {\n    super(context);\n    this.methods = new AddresslistVotingClientMethods(context);\n    this.encoding = new AddresslistVotingClientEncoding(context);\n    this.decoding = new AddresslistVotingClientDecoding(context);\n    this.estimation = new AddresslistVotingClientEstimation(context);\n  }\n\n  static encoding = {\n    /**\n     * Computes the parameters to be given when creating the DAO,\n     * so that the plugin is configured\n     *\n     * @param {AddresslistVotingPluginInstall} params\n     * @param {Networkish} [network=\"mainnet\"]\n     * @return {*}  {PluginInstallItem}\n     * @memberof AddresslistVotingClient\n     */\n    getPluginInstallItem: (\n      params: AddresslistVotingPluginInstall,\n      network: Networkish = \"mainnet\",\n    ): PluginInstallItem =>\n      AddresslistVotingClientEncoding.getPluginInstallItem(params, network),\n  };\n}\n","import {\n  MajorityVotingProposalSettings,\n  ProposalBase,\n  ProposalListItemBase,\n  ProposalVoteBase,\n  TokenType,\n  VersionTag,\n  VotingSettings,\n} from \"../client-common\";\n\nexport type TokenVotingPluginInstall = {\n  votingSettings: VotingSettings;\n  newToken?: NewTokenParams;\n  useToken?: ExistingTokenParams;\n};\n\ntype ExistingTokenParams = {\n  tokenAddress: string;\n  wrappedToken: {\n    name: string;\n    symbol: string;\n  };\n};\n\ntype NewTokenParams = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  minter?: string;\n  balances: { address: string; balance: bigint }[];\n};\n\n// PROPOSAL RETRIEVAL\nexport type TokenVotingProposalVote = ProposalVoteBase & {\n  weight: bigint;\n};\n\nexport type TokenVotingProposal = ProposalBase & {\n  result: TokenVotingProposalResult;\n  settings: MajorityVotingProposalSettings;\n  token: Erc20TokenDetails | Erc721TokenDetails | null;\n  usedVotingWeight: bigint;\n  votes: TokenVotingProposalVote[];\n  totalVotingWeight: bigint;\n};\n\nexport type TokenVotingProposalListItem = ProposalListItemBase & {\n  token: Erc20TokenDetails | Erc721TokenDetails | null;\n  result: TokenVotingProposalResult;\n  totalVotingWeight: bigint;\n  settings: MajorityVotingProposalSettings;\n  votes: TokenVotingProposalVote[];\n};\n\nexport type TokenVotingProposalResult = {\n  yes: bigint;\n  no: bigint;\n  abstain: bigint;\n};\n\nexport type Erc20TokenDetails = TokenBaseDetails & {\n  decimals: number;\n  type: TokenType.ERC20;\n};\nexport type Erc721TokenDetails = TokenBaseDetails & {\n  type: TokenType.ERC721;\n};\n\nexport type TokenBaseDetails = {\n  address: string;\n  name: string;\n  symbol: string;\n};\n\nexport type MintTokenParams = {\n  address: string;\n  amount: bigint;\n};\n\nexport type TokenVotingPluginPrepareInstallationParams = {\n  settings: TokenVotingPluginInstall;\n  daoAddressOrEns: string;\n  versionTag?: VersionTag;\n};\n\ntype WrapTokensBase = {\n  wrappedTokenAddress: string;\n  amount: bigint;\n};\n\nexport type WrapTokensParams = WrapTokensBase;\nexport type UnwrapTokensParams = WrapTokensBase;\n\nexport enum WrapTokensStep {\n  WRAPPING = \"wrapping\",\n  DONE = \"done\",\n}\n\nexport type WrapTokensStepValue =\n  | { key: WrapTokensStep.WRAPPING; txHash: string }\n  | { key: WrapTokensStep.DONE };\n\nexport enum UnwrapTokensStep {\n  UNWRAPPING = \"unwrapping\",\n  DONE = \"done\",\n}\nexport type UnwrapTokensStepValue =\n  | { key: UnwrapTokensStep.UNWRAPPING; txHash: string }\n  | { key: UnwrapTokensStep.DONE };\n\n/* Delegate */\nexport type DelegateTokensParams = {\n  tokenAddress: string;\n  delegatee: string;\n};\n\nexport const enum DelegateTokensStep {\n  DELEGATING = \"delegating\",\n  DONE = \"done\",\n}\n\nexport const enum UndelegateTokensStep {\n  UNDELEGATING = \"delegating\",\n  DONE = \"done\",\n}\n\ntype DelegateTokensStepCommon = {\n  key: DelegateTokensStep.DELEGATING | UndelegateTokensStep.UNDELEGATING;\n  txHash: string;\n} | { key: DelegateTokensStep.DONE | UndelegateTokensStep.DONE };\n\nexport type UndelegateTokensStepValue = DelegateTokensStepCommon;\nexport type DelegateTokensStepValue = DelegateTokensStepCommon;\n\nexport type TokenVotingMember = {\n  /** The address of the member */\n  address: string;\n  /** The balance of the member */\n  balance: bigint;\n  /** The voting power of the member taking into account the delagation */\n  votingPower: bigint;\n  /** The address that you delegated yout voting power to\n   *  If null, you are not delegating your voting power */\n  delegatee: string | null;\n  /** The list of addresses that delegated their voting power this member */\n  delegators: { address: string; balance: bigint }[];\n};","import { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  ContractVotingSettings,\n  SubgraphAction,\n  SubgraphProposalBase,\n  SubgraphVoterListItemBase,\n  VotingMode,\n} from \"../../client-common\";\n\n/* Contract types */\nexport type ContractMintTokenParams = [string, BigNumber];\nexport type ContractTokenVotingInitParams = [\n  ContractVotingSettings,\n  [\n    string, // address\n    string, // name\n    string, // symbol\n  ],\n  [\n    string[], // receivers,\n    BigNumber[], // amounts\n  ],\n];\n\n/* Subgraph types */\nexport type SubgraphTokenVotingVoterListItem = SubgraphVoterListItemBase & {\n  votingPower: string;\n};\n\nexport type SubgraphTokenVotingProposalListItem = SubgraphProposalBase & {\n  plugin: {\n    token: SubgraphErc20Token | SubgraphErc721Token;\n  };\n  voters: SubgraphTokenVotingVoterListItem[];\n  supportThreshold: string;\n  minVotingPower: bigint;\n  totalVotingPower: string;\n  votingMode: VotingMode;\n  earlyExecutable: boolean;\n};\n\ntype SubgraphBaseToken = {\n  symbol: string;\n  name: string;\n  id: string;\n};\nexport enum SubgraphTokenType {\n  ERC20 = \"ERC20Token\",\n  ERC721 = \"ERC721Token\",\n}\nexport enum SubgraphContractType {\n  ERC20 = \"ERC20Contract\",\n  ERC721 = \"ERC721Contract\",\n}\n\nexport type SubgraphErc20Token = SubgraphBaseToken & {\n  __typename: SubgraphContractType.ERC20;\n  decimals: number;\n};\nexport type SubgraphErc721Token = SubgraphBaseToken & {\n  __typename: SubgraphContractType.ERC721;\n};\n\nexport type SubgraphTokenVotingProposal =\n  & SubgraphTokenVotingProposalListItem\n  & {\n    createdAt: string;\n    actions: SubgraphAction[];\n    creationBlockNumber: string;\n    executionDate: string;\n    executionTxHash: string;\n    executionBlockNumber: string;\n  };\n\n  export type SubgraphTokenVotingMember = {\n    address: string;\n    balance: string;\n    votingPower: string;\n    delegatee: {\n      address: string;\n    };\n    delegators: {\n      address: string;\n      balance: string;\n    }[];\n  };","import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingProposal = gql`\nquery TokenVotingProposal($proposalId: ID!) {\n  tokenVotingProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    creationBlockNumber\n    executionDate\n    executionBlockNumber\n    actions {\n      to\n      value\n      data\n    }\n    yes,\n    no,\n    abstain\n    votingMode\n    supportThreshold\n    startDate\n    endDate\n    executed\n    earlyExecutable\n    potentiallyExecutable\n    executionTxHash\n    voters{\n      voter{\n        address\n      }\n      voteReplaced\n      voteOption\n      votingPower\n    }\n    plugin {\n      token {\n        id\n        name\n        symbol\n        __typename\n        ...on ERC20Contract {\n          decimals\n        }\n      }\n    }\n    totalVotingPower\n    minVotingPower\n  }\n}\n`;\nexport const QueryTokenVotingProposals = gql`\nquery TokenVotingProposals($where: TokenVotingProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenVotingProposal_orderBy!) {\n  tokenVotingProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    yes,\n    no,\n    abstain\n    startDate\n    endDate\n    executed\n    earlyExecutable\n    potentiallyExecutable\n    votingMode\n    supportThreshold\n    minVotingPower\n    totalVotingPower\n    voters{\n      voter{\n        address\n      }\n      voteReplaced\n      voteOption\n      votingPower\n    }\n    plugin{\n      token{\n        id\n        name\n        symbol\n        __typename\n        ...on ERC20Contract {\n          decimals\n        }\n      }\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingSettings = gql`\nquery TokenVotingSettings($address: ID!) {\n  tokenVotingPlugin(id: $address){\n    minDuration\n    minProposerVotingPower\n    minParticipation\n    supportThreshold\n    votingMode\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingPlugin = gql`\nquery TokenVotingPlugin($address: ID!) {\n  tokenVotingPlugin(id: $address){\n    token {\n      id\n      name\n      symbol\n      __typename\n      ...on ERC20Contract {\n        decimals\n      }\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingMembers = gql`\nquery TokenVotingMembers($address: ID!) {\n    tokenVotingPlugin(id: $address){\n        members {\n            address\n            balance\n            votingPower\n            delegatee {\n                address\n            }\n            delegators {\n                address\n                balance\n            }\n        }\n    }\n}\n`;\n","import {\n  computeProposalStatus,\n  ContractVotingSettings,\n  DaoAction,\n  ProposalMetadata,\n  SubgraphAction,\n  SubgraphVoteValuesMap,\n  TokenType,\n  VoteValues,\n  votingSettingsToContract,\n} from \"../../client-common\";\nimport {\n  Erc20TokenDetails,\n  Erc721TokenDetails,\n  MintTokenParams,\n  TokenVotingMember,\n  TokenVotingPluginInstall,\n  TokenVotingProposal,\n  TokenVotingProposalListItem,\n} from \"../types\";\nimport {\n  ContractMintTokenParams,\n  ContractTokenVotingInitParams,\n  SubgraphContractType,\n  SubgraphErc20Token,\n  SubgraphErc721Token,\n  SubgraphTokenVotingMember,\n  SubgraphTokenVotingProposal,\n  SubgraphTokenVotingProposalListItem,\n  SubgraphTokenVotingVoterListItem,\n} from \"./types\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Result } from \"@ethersproject/abi\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport {\n  decodeRatio,\n  getCompactProposalId,\n  hexToBytes,\n} from \"@aragon/sdk-common\";\n\nexport function toTokenVotingProposal(\n  proposal: SubgraphTokenVotingProposal,\n  metadata: ProposalMetadata,\n): TokenVotingProposal {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  const creationDate = new Date(\n    parseInt(proposal.createdAt) * 1000,\n  );\n  const executionDate = proposal.executionDate\n    ? new Date(\n      parseInt(proposal.executionDate) * 1000,\n    )\n    : null;\n  let usedVotingWeight: bigint = BigInt(0);\n  for (const voter of proposal.voters) {\n    usedVotingWeight += BigInt(voter.votingPower);\n  }\n  const token = parseToken(proposal.plugin.token);\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n      description: metadata.description,\n      resources: metadata.resources,\n      media: metadata.media,\n    },\n    startDate,\n    endDate,\n    creationDate,\n    creationBlockNumber: parseInt(proposal.creationBlockNumber),\n    executionDate,\n    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,\n    executionTxHash: proposal.executionTxHash || null,\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? BigInt(proposal.yes) : BigInt(0),\n      no: proposal.no ? BigInt(proposal.no) : BigInt(0),\n      abstain: proposal.abstain ? BigInt(proposal.abstain) : BigInt(0),\n    },\n    settings: {\n      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),\n      duration: parseInt(proposal.endDate) -\n        parseInt(proposal.startDate),\n      minParticipation: decodeRatio(\n        (BigInt(proposal.minVotingPower) * BigInt(1000000)) /\n          BigInt(proposal.totalVotingPower),\n        6,\n      ),\n    },\n    token,\n    usedVotingWeight,\n    totalVotingWeight: BigInt(proposal.totalVotingPower),\n    votes: proposal.voters.map(\n      (voter: SubgraphTokenVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n          weight: BigInt(voter.votingPower),\n        };\n      },\n    ),\n  };\n}\n\nexport function toTokenVotingProposalListItem(\n  proposal: SubgraphTokenVotingProposalListItem,\n  metadata: ProposalMetadata,\n): TokenVotingProposalListItem {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  const token = parseToken(proposal.plugin.token);\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    settings: {\n      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),\n      duration: parseInt(proposal.endDate) -\n        parseInt(proposal.startDate),\n      minParticipation: decodeRatio(\n        (BigInt(proposal.minVotingPower) * BigInt(1000000)) /\n          BigInt(proposal.totalVotingPower),\n        6,\n      ),\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n    },\n    totalVotingWeight: BigInt(proposal.totalVotingPower),\n    startDate,\n    endDate,\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? BigInt(proposal.yes) : BigInt(0),\n      no: proposal.no ? BigInt(proposal.no) : BigInt(0),\n      abstain: proposal.abstain ? BigInt(proposal.abstain) : BigInt(0),\n    },\n    token,\n    votes: proposal.voters.map(\n      (voter: SubgraphTokenVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n          weight: BigInt(voter.votingPower),\n        };\n      },\n    ),\n  };\n}\n\nexport function mintTokenParamsToContract(\n  params: MintTokenParams,\n): ContractMintTokenParams {\n  return [params.address, BigNumber.from(params.amount)];\n}\n\nexport function mintTokenParamsFromContract(result: Result): MintTokenParams {\n  return {\n    address: result[0],\n    amount: BigInt(result[1]),\n  };\n}\n\nexport function tokenVotingInitParamsToContract(\n  params: TokenVotingPluginInstall,\n): ContractTokenVotingInitParams {\n  let token: [string, string, string] = [\"\", \"\", \"\"];\n  let balances: [string[], BigNumber[]] = [[], []];\n  if (params.newToken) {\n    token = [AddressZero, params.newToken.name, params.newToken.symbol];\n    balances = [\n      params.newToken.balances.map((balance) => balance.address),\n      params.newToken.balances.map(({ balance }) => BigNumber.from(balance)),\n    ];\n  } else if (params.useToken) {\n    token = [\n      params.useToken?.tokenAddress,\n      params.useToken.wrappedToken.name,\n      params.useToken.wrappedToken.symbol,\n    ];\n  }\n  return [\n    Object.values(\n      votingSettingsToContract(params.votingSettings),\n    ) as ContractVotingSettings,\n    token,\n    balances,\n  ];\n}\n\nfunction parseToken(\n  subgraphToken: SubgraphErc20Token | SubgraphErc721Token,\n): Erc20TokenDetails | Erc721TokenDetails | null {\n  let token: Erc721TokenDetails | Erc20TokenDetails | null = null;\n  if (subgraphToken.__typename === SubgraphContractType.ERC20) {\n    token = {\n      address: subgraphToken.id,\n      symbol: subgraphToken.symbol,\n      name: subgraphToken.name,\n      decimals: subgraphToken.decimals,\n      type: TokenType.ERC20,\n    };\n  } else if (subgraphToken.__typename === SubgraphContractType.ERC721) {\n    token = {\n      address: subgraphToken.id,\n      symbol: subgraphToken.symbol,\n      name: subgraphToken.name,\n      type: TokenType.ERC721,\n    };\n  }\n  return token;\n}\n\nexport function toTokenVotingMember(\n  member: SubgraphTokenVotingMember,\n): TokenVotingMember {\n  return {\n    address: member.address,\n    votingPower: BigInt(member.votingPower),\n    balance: BigInt(member.balance),\n    delegatee: member.delegatee.address === member.address\n      ? null\n      : member.delegatee.address,\n    delegators: member.delegators.filter((delegator) =>\n      delegator.address !== member.address\n    ).map((delegator) => {\n      return {\n        address: delegator.address,\n        balance: BigInt(delegator.balance),\n      };\n    }),\n  };\n}\n","import {\n  hexToBytes,\n  InvalidAddressError,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  DaoAction,\n  encodeUpdateVotingSettingsAction,\n  PluginInstallItem,\n  SupportedNetwork,\n  SupportedNetworksArray,\n  VotingSettings,\n} from \"../../../client-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { ITokenVotingClientEncoding } from \"../../interfaces\";\nimport { MintTokenParams, TokenVotingPluginInstall } from \"../../types\";\nimport { IERC20MintableUpgradeable__factory } from \"@aragon/osx-ethers\";\nimport {\n  mintTokenParamsToContract,\n  tokenVotingInitParamsToContract,\n} from \"../utils\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { LIVE_CONTRACTS } from \"../../../client-common/constants\";\nimport { getNetwork, Networkish } from \"@ethersproject/providers\";\n\n/**\n * Encoding module the SDK TokenVoting Client\n */\nexport class TokenVotingClientEncoding extends ClientCore\n  implements ITokenVotingClientEncoding {\n  /**\n   * Computes the parameters to be given when creating the DAO,\n   * so that the plugin is configured\n   *\n   * @param {TokenVotingPluginInstall} params\n   * @param {Networkish} network\n   * @return {*}  {PluginInstallItem}\n   * @memberof TokenVotingClientEncoding\n   */\n  static getPluginInstallItem(\n    params: TokenVotingPluginInstall,\n    network: Networkish,\n  ): PluginInstallItem {\n    const networkName = getNetwork(network).name as SupportedNetwork;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    const args = tokenVotingInitParamsToContract(params);\n    const hexBytes = defaultAbiCoder.encode(\n      // [\"votingMode\",\"supportThreshold\", \"minParticipation\", \"minDuration\"], [\"address\",\"name\",\"symbol\"][ \"receivers\",\"amount\"]\n      [\n        \"tuple(uint8 votingMode, uint64 supportThreshold, uint64 minParticipation, uint64 minDuration, uint256 minProposerVotingPower) votingSettings\",\n        \"tuple(address addr, string name, string symbol) tokenSettings\",\n        \"tuple(address[] receivers, uint256[] amounts) mintSettings\",\n      ],\n      args,\n    );\n    return {\n      id: LIVE_CONTRACTS[networkName].tokenVotingRepo,\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that updates the governance configuration\n   *\n   * @param {string} pluginAddress\n   * @param {VotingSettings} params\n   * @return {*}  {DaoAction}\n   * @memberof TokenVotingClientEncoding\n   */\n  public updatePluginSettingsAction(\n    pluginAddress: string,\n    params: VotingSettings,\n  ): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new Error(\"Invalid plugin address\");\n    }\n    // TODO: check if to and value are correct\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: encodeUpdateVotingSettingsAction(params),\n    };\n  }\n\n  /**\n   * Computes the parameters to be given when creating a proposal that mints an amount of ERC-20 tokens to an address\n   *\n   * @param {string} minterAddress\n   * @param {MintTokenParams} params\n   * @return {*}  {DaoAction}\n   * @memberof TokenVotingClientEncoding\n   */\n  public mintTokenAction(\n    minterAddress: string,\n    params: MintTokenParams,\n  ): DaoAction {\n    if (!isAddress(minterAddress) || !isAddress(params.address)) {\n      throw new InvalidAddressError();\n    }\n    const votingInterface = IERC20MintableUpgradeable__factory\n      .createInterface();\n    const args = mintTokenParamsToContract(params);\n    // get hex bytes\n    const hexBytes = votingInterface.encodeFunctionData(\"mint\", args);\n    return {\n      to: minterAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n","import { isAddress } from \"@ethersproject/address\";\nimport {\n  boolArrayToBitmap,\n  decodeProposalId,\n  decodeRatio,\n  encodeProposalId,\n  getExtendedProposalId,\n  InvalidAddressError,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidProposalIdError,\n  IpfsPinError,\n  isProposalId,\n  NoProviderError,\n  PluginInstallationPreparationError,\n  ProposalCreationError,\n  resolveIpfsCid,\n} from \"@aragon/sdk-common\";\nimport {\n  CanVoteParams,\n  ClientCore,\n  computeProposalStatusFilter,\n  CreateMajorityVotingProposalParams,\n  ExecuteProposalStep,\n  ExecuteProposalStepValue,\n  findLog,\n  PrepareInstallationStep,\n  PrepareInstallationStepValue,\n  ProposalCreationSteps,\n  ProposalCreationStepValue,\n  ProposalMetadata,\n  ProposalQueryParams,\n  ProposalSortBy,\n  SortDirection,\n  SubgraphVotingSettings,\n  TokenType,\n  VersionTag,\n  VoteProposalParams,\n  VoteProposalStep,\n  VoteProposalStepValue,\n  VotingSettings,\n} from \"../../../client-common\";\nimport {\n  DelegateTokensParams,\n  DelegateTokensStep,\n  DelegateTokensStepValue,\n  Erc20TokenDetails,\n  Erc721TokenDetails,\n  TokenVotingMember,\n  TokenVotingPluginPrepareInstallationParams,\n  TokenVotingProposal,\n  TokenVotingProposalListItem,\n  UndelegateTokensStepValue,\n  UnwrapTokensParams,\n  UnwrapTokensStep,\n  UnwrapTokensStepValue,\n  WrapTokensParams,\n  WrapTokensStep,\n  WrapTokensStepValue,\n} from \"../../types\";\nimport {\n  SubgraphContractType,\n  SubgraphErc20Token,\n  SubgraphErc721Token,\n  SubgraphTokenVotingMember,\n  SubgraphTokenVotingProposal,\n  SubgraphTokenVotingProposalListItem,\n} from \"../types\";\nimport {\n  QueryTokenVotingMembers,\n  QueryTokenVotingPlugin,\n  QueryTokenVotingProposal,\n  QueryTokenVotingProposals,\n  QueryTokenVotingSettings,\n} from \"../graphql-queries\";\nimport {\n  toTokenVotingMember,\n  toTokenVotingProposal,\n  toTokenVotingProposalListItem,\n} from \"../utils\";\nimport {\n  GovernanceERC20__factory,\n  GovernanceWrappedERC20__factory,\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n  TokenVoting__factory,\n} from \"@aragon/osx-ethers\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  EMPTY_PROPOSAL_METADATA_LINK,\n  LIVE_CONTRACTS,\n  UNAVAILABLE_PROPOSAL_METADATA,\n  UNSUPPORTED_PROPOSAL_METADATA_LINK,\n} from \"../../../client-common/constants\";\nimport { TokenVotingClientEncoding } from \"./encoding\";\nimport { ITokenVotingClientMethods } from \"../../interfaces\";\n/**\n * Methods module the SDK TokenVoting Client\n */\nexport class TokenVotingClientMethods extends ClientCore\n  implements ITokenVotingClientMethods {\n  /**\n   * Creates a new proposal on the given TokenVoting plugin contract\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {*}  {AsyncGenerator<ProposalCreationStepValue>}\n   * @memberof TokenVotingClient\n   */\n  public async *createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): AsyncGenerator<ProposalCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const tx = await tokenVotingContract.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n      params.creatorVote || 0,\n      params.executeOnPass || false,\n    );\n\n    yield {\n      key: ProposalCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const tokenVotingContractInterface = TokenVoting__factory.createInterface();\n    const log = findLog(\n      receipt,\n      tokenVotingContractInterface,\n      \"ProposalCreated\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = tokenVotingContractInterface.parseLog(log);\n    const proposalId = parsedLog.args[\"proposalId\"];\n    if (!proposalId) {\n      throw new ProposalCreationError();\n    }\n\n    yield {\n      key: ProposalCreationSteps.DONE,\n      proposalId: encodeProposalId(params.pluginAddress, Number(proposalId)),\n    };\n  }\n\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {ProposalMetadata} params\n   * @return {*}  {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async pinMetadata(params: ProposalMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch (e) {\n      throw new IpfsPinError(e);\n    }\n  }\n  /**\n   * Cast a vote on the given proposal using the client's wallet. Depending on the proposal settings, an affirmative vote may execute the proposal's actions on the DAO.\n   *\n   * @param {VoteProposalParams} params\n   * @param {VoteValues} vote\n   * @return {*}  {AsyncGenerator<VoteProposalStepValue>}\n   * @memberof TokenVotingClient\n   */\n  public async *voteProposal(\n    params: VoteProposalParams,\n  ): AsyncGenerator<VoteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await tokenVotingContract.vote(\n      id,\n      params.vote,\n      false,\n    );\n\n    yield {\n      key: VoteProposalStep.VOTING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: VoteProposalStep.DONE,\n    };\n  }\n  /**\n   * Executes the given proposal, provided that it has already passed\n   *\n   * @param {string} proposalId\n   * @return {*}  {AsyncGenerator<ExecuteProposalStepValue>}\n   * @memberof TokenVotingClient\n   */\n  public async *executeProposal(\n    proposalId: string,\n  ): AsyncGenerator<ExecuteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const tx = await tokenVotingContract.execute(id);\n\n    yield {\n      key: ExecuteProposalStep.EXECUTING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: ExecuteProposalStep.DONE,\n    };\n  }\n\n  /**\n   * Prepares the installation of a token voting plugin in a given dao\n   *\n   * @param {TokenVotingPluginPrepareInstallationParams} params\n   * @return {*}  {AsyncGenerator<PrepareInstallationStepValue>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async *prepareInstallation(\n    params: TokenVotingPluginPrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const networkName = this.web3.getNetworkName();\n\n    // connect to psp contract\n    const pspContract = PluginSetupProcessor__factory.connect(\n      LIVE_CONTRACTS[networkName].pluginSetupProcessor,\n      signer,\n    );\n    // connect to plugin repo\n    const tokenVotingRepoContract = PluginRepo__factory.connect(\n      LIVE_CONTRACTS[networkName].tokenVotingRepo,\n      signer,\n    );\n    // use specified version or latest\n    let versionTag: VersionTag | undefined = params.versionTag;\n    if (!params.versionTag) {\n      const latestVersion = await tokenVotingRepoContract\n        [\"getLatestVersion(address)\"](\n          LIVE_CONTRACTS[networkName].tokenVotingSetup,\n        );\n      versionTag = {\n        build: latestVersion.tag.build,\n        release: latestVersion.tag.release,\n      };\n    }\n    // get install data\n    const tokenVotingPluginInstallItem = TokenVotingClientEncoding\n      .getPluginInstallItem(params.settings, networkName);\n    // execute prepareInstallationon\n    const tx = await pspContract.prepareInstallation(\n      params.daoAddressOrEns,\n      {\n        pluginSetupRef: {\n          pluginSetupRepo: LIVE_CONTRACTS[networkName].tokenVotingRepo,\n          versionTag: versionTag!,\n        },\n        data: tokenVotingPluginInstallItem.data,\n      },\n    );\n\n    yield {\n      key: PrepareInstallationStep.PREPARING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const pspContractInterface = PluginSetupProcessor__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      pspContractInterface,\n      \"InstallationPrepared\",\n    );\n    if (!log) {\n      throw new PluginInstallationPreparationError();\n    }\n\n    const parsedLog = pspContractInterface.parseLog(log);\n    const pluginAddress = parsedLog.args[\"plugin\"];\n    const preparedSetupData = parsedLog.args[\"preparedSetupData\"];\n    if (!(pluginAddress || preparedSetupData)) {\n      throw new PluginInstallationPreparationError();\n    }\n    yield {\n      key: PrepareInstallationStep.DONE,\n      pluginAddress,\n      pluginRepo: LIVE_CONTRACTS[networkName].tokenVotingRepo,\n      versionTag: versionTag!,\n      permissions: preparedSetupData.permissions,\n      helpers: preparedSetupData.helpers,\n    };\n  }\n\n  public async *wrapTokens(\n    params: WrapTokensParams,\n  ): AsyncGenerator<WrapTokensStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!isAddress(params.wrappedTokenAddress)) {\n      throw new InvalidAddressError();\n    }\n    const wrappedErc20Contract = GovernanceWrappedERC20__factory.connect(\n      params.wrappedTokenAddress,\n      signer,\n    );\n\n    const account = await signer.getAddress();\n\n    const tx = await wrappedErc20Contract.depositFor(\n      account,\n      params.amount,\n    );\n\n    yield {\n      key: WrapTokensStep.WRAPPING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: WrapTokensStep.DONE,\n    };\n  }\n  public async *unwrapTokens(\n    params: UnwrapTokensParams,\n  ): AsyncGenerator<UnwrapTokensStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!isAddress(params.wrappedTokenAddress)) {\n      throw new InvalidAddressError();\n    }\n    const wrappedErc20Contract = GovernanceWrappedERC20__factory.connect(\n      params.wrappedTokenAddress,\n      signer,\n    );\n\n    const account = await signer.getAddress();\n\n    const tx = await wrappedErc20Contract.withdrawTo(\n      account,\n      params.amount,\n    );\n\n    yield {\n      key: UnwrapTokensStep.UNWRAPPING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: UnwrapTokensStep.DONE,\n    };\n  }\n  /**\n   * Delegates all the signer's voting power to a delegatee\n   *\n   * @param {DelegateTokensParams} params\n   * @return {*}  {AsyncGenerator<DelegateTokensStepValue>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async *delegateTokens(\n    params: DelegateTokensParams,\n  ): AsyncGenerator<DelegateTokensStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const governanceErc20Contract = GovernanceERC20__factory.connect(\n      params.tokenAddress,\n      signer,\n    );\n    const tx = await governanceErc20Contract.delegate(params.delegatee);\n    yield {\n      key: DelegateTokensStep.DELEGATING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: DelegateTokensStep.DONE,\n    };\n  }\n  /**\n   * Delegates all the signer's tokens back to itself\n   *\n   * @param {string} tokenAddress\n   * @return {*}  {AsyncGenerator<UndelegateTokensStepValue>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async *undelegateTokens(\n    tokenAddress: string,\n  ): AsyncGenerator<UndelegateTokensStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    yield* this.delegateTokens({\n      tokenAddress,\n      delegatee: await signer.getAddress(),\n    });\n  }\n  /**\n   * Retrieves the current signer's delegatee for the given token\n   *\n   * @param {string} tokenAddress\n   * @return {*}  {Promise<string | null>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async getDelegatee(tokenAddress: string): Promise<string | null> {\n    const signer = this.web3.getConnectedSigner();\n    const governanceErc20Contract = GovernanceERC20__factory.connect(\n      tokenAddress,\n      signer,\n    );\n    const address = await signer.getAddress();\n    const delegatee = await governanceErc20Contract.delegates(address);\n    return address === delegatee ? null : delegatee;\n  }\n\n  /**\n   * Checks if an user can vote in a proposal\n   *\n   * @param {CanVoteParams} params\n   * @returns {*}  {Promise<boolean>}\n   */\n  public async canVote(params: CanVoteParams): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n\n    if (!isAddress(params.voterAddressOrEns)) {\n      throw new InvalidAddressError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    return tokenVotingContract.callStatic.canVote(\n      id,\n      params.voterAddressOrEns,\n      params.vote,\n    );\n  }\n\n  /**\n   * Checks whether the current proposal can be executed\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<boolean>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async canExecute(\n    proposalId: string,\n  ): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    return tokenVotingContract.canExecute(id);\n  }\n  /**\n   * Returns the list of wallet addresses holding tokens from the underlying Token contract used by the plugin\n   *\n   * @async\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<string[]>}\n   * @memberof TokenVotingClient\n   */\n  public async getMembers(pluginAddress: string): Promise<TokenVotingMember[]> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryTokenVotingMembers;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"TokenVoting members\";\n    type T = { tokenVotingPlugin: { members: SubgraphTokenVotingMember[] } };\n    const { tokenVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return tokenVotingPlugin.members.map((\n      member: SubgraphTokenVotingMember,\n    ) => toTokenVotingMember(member));\n  }\n\n  /**\n   * Returns the details of the given proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<TokenVotingProposal>}\n   * @memberof TokenVotingClient\n   */\n  public async getProposal(\n    proposalId: string,\n  ): Promise<TokenVotingProposal | null> {\n    if (!isProposalId(proposalId)) {\n      throw new InvalidProposalIdError();\n    }\n    const extendedProposalId = getExtendedProposalId(proposalId);\n    const query = QueryTokenVotingProposal;\n    const params = {\n      proposalId: extendedProposalId,\n    };\n    const name = \"TokenVoting proposal\";\n    type T = { tokenVotingProposal: SubgraphTokenVotingProposal };\n    const { tokenVotingProposal } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenVotingProposal) {\n      return null;\n    } else if (!tokenVotingProposal.metadata) {\n      return toTokenVotingProposal(\n        tokenVotingProposal,\n        EMPTY_PROPOSAL_METADATA_LINK,\n      );\n    }\n    // format in the metadata field\n    try {\n      const metadataCid = resolveIpfsCid(tokenVotingProposal.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as ProposalMetadata;\n      return toTokenVotingProposal(tokenVotingProposal, metadata);\n      // TODO: Parse and validate schema\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toTokenVotingProposal(\n          tokenVotingProposal,\n          UNSUPPORTED_PROPOSAL_METADATA_LINK,\n        );\n      }\n      return toTokenVotingProposal(\n        tokenVotingProposal,\n        UNAVAILABLE_PROPOSAL_METADATA,\n      );\n    }\n  }\n  /**\n   * Returns a list of proposals on the Plugin, filtered by the given criteria\n   *\n   * @param {ProposalQueryParams} params\n   * @return {*}  {Promise<TokenVotingProposalListItem[]>}\n   * @memberof TokenVotingClient\n   */\n  public async getProposals({\n    daoAddressOrEns,\n    limit = 10,\n    status,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = ProposalSortBy.CREATED_AT,\n  }: ProposalQueryParams): Promise<TokenVotingProposalListItem[]> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        try {\n          const resolvedAddress = await provider.resolveName(address);\n          if (!resolvedAddress) {\n            throw new InvalidAddressOrEnsError();\n          }\n          address = resolvedAddress;\n        } catch (e) {\n          throw new InvalidAddressOrEnsError(e);\n        }\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (status) {\n      where = { ...where, ...computeProposalStatusFilter(status) };\n    }\n    const query = QueryTokenVotingProposals;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"TokenVoting proposals\";\n    type T = { tokenVotingProposals: SubgraphTokenVotingProposalListItem[] };\n    const { tokenVotingProposals } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      tokenVotingProposals.map(\n        async (\n          proposal: SubgraphTokenVotingProposalListItem,\n        ): Promise<TokenVotingProposalListItem> => {\n          // format in the metadata field\n          if (!proposal.metadata) {\n            return toTokenVotingProposalListItem(\n              proposal,\n              EMPTY_PROPOSAL_METADATA_LINK,\n            );\n          }\n          try {\n            const metadataCid = resolveIpfsCid(proposal.metadata);\n            const stringMetadata = await this.ipfs.fetchString(metadataCid);\n            const metadata = JSON.parse(stringMetadata) as ProposalMetadata;\n            return toTokenVotingProposalListItem(proposal, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toTokenVotingProposalListItem(\n                proposal,\n                UNSUPPORTED_PROPOSAL_METADATA_LINK,\n              );\n            }\n            return toTokenVotingProposalListItem(\n              proposal,\n              UNAVAILABLE_PROPOSAL_METADATA,\n            );\n          }\n        },\n      ),\n    );\n  }\n\n  /**\n   * Returns the settings of a plugin given the address of the plugin instance\n   *\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<VotingSettings>}\n   * @memberof TokenVotingClient\n   */\n  public async getVotingSettings(\n    pluginAddress: string,\n  ): Promise<VotingSettings | null> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryTokenVotingSettings;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"TokenVoting settings\";\n    type T = { tokenVotingPlugin: SubgraphVotingSettings };\n    const { tokenVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenVotingPlugin) {\n      return null;\n    }\n    return {\n      minDuration: parseInt(tokenVotingPlugin.minDuration),\n      supportThreshold: decodeRatio(\n        BigInt(tokenVotingPlugin.supportThreshold),\n        6,\n      ),\n      minParticipation: decodeRatio(\n        BigInt(tokenVotingPlugin.minParticipation),\n        6,\n      ),\n      minProposerVotingPower: BigInt(\n        tokenVotingPlugin.minProposerVotingPower,\n      ),\n      votingMode: tokenVotingPlugin.votingMode,\n    };\n  }\n\n  /**\n   * Returns the details of the token used in a specific plugin instance\n   *\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<Erc20TokenDetails | null>}\n   * @memberof TokenVotingClient\n   */\n  public async getToken(\n    pluginAddress: string,\n  ): Promise<Erc20TokenDetails | Erc721TokenDetails | null> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryTokenVotingPlugin;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"TokenVoting token\";\n    type T = {\n      tokenVotingPlugin: { token: SubgraphErc20Token | SubgraphErc721Token };\n    };\n    const { tokenVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenVotingPlugin) {\n      return null;\n    }\n    let token: SubgraphErc20Token | SubgraphErc721Token =\n      tokenVotingPlugin.token;\n    // type erc20\n    if (token.__typename === SubgraphContractType.ERC20) {\n      return {\n        address: token.id,\n        name: token.name,\n        symbol: token.symbol,\n        decimals: token.decimals,\n        type: TokenType.ERC20,\n      };\n      // type erc721\n    } else if (token.__typename === SubgraphContractType.ERC721) {\n      return {\n        address: token.id,\n        name: token.name,\n        symbol: token.symbol,\n        type: TokenType.ERC721,\n      };\n    }\n    return null;\n  }\n}\n","import {\n  IERC20MintableUpgradeable__factory,\n  MajorityVotingBase__factory,\n} from \"@aragon/osx-ethers\";\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  MajorityVotingBase__factory.createInterface().getFunction(\n    \"updateVotingSettings\",\n  )\n    .format(\"minimal\"),\n  IERC20MintableUpgradeable__factory.createInterface().getFunction(\"mint\")\n    .format(\"minimal\"),\n];\n","import { bytesToHex } from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  decodeUpdatePluginSettingsAction,\n  getFunctionFragment,\n  InterfaceParams,\n  VotingSettings,\n} from \"../../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport { MintTokenParams } from \"../../types\";\nimport { ITokenVotingClientDecoding } from \"../../interfaces\";\nimport { IERC20MintableUpgradeable__factory } from \"@aragon/osx-ethers\";\nimport { mintTokenParamsFromContract } from \"../utils\";\n\n/**\n * Decoding module the SDK TokenVoting Client\n */\nexport class TokenVotingClientDecoding extends ClientCore\n  implements ITokenVotingClientDecoding {\n  /**\n   * Decodes a dao metadata from an encoded update metadata action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {VotingSettings}\n   * @memberof TokenVotingClientDecoding\n   */\n  public updatePluginSettingsAction(data: Uint8Array): VotingSettings {\n    return decodeUpdatePluginSettingsAction(data);\n  }\n  /**\n   * Decodes the mint token params from an encoded mint token action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {MintTokenParams}\n   * @memberof TokenVotingClientDecoding\n   */\n  public mintTokenAction(data: Uint8Array): MintTokenParams {\n    const votingInterface = IERC20MintableUpgradeable__factory\n      .createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = votingInterface.getFunction(\"mint\");\n    const result = votingInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return mintTokenParamsFromContract(result);\n  }\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {(InterfaceParams | null)}\n   * @memberof TokenVotingClientDecoding\n   */\n  public findInterface(data: Uint8Array): InterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n","import {\n  GovernanceERC20__factory,\n  TokenVoting__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  ClientCore,\n  CreateMajorityVotingProposalParams,\n  GasFeeEstimation,\n  VoteProposalParams,\n} from \"../../../client-common\";\nimport { ITokenVotingClientEstimation } from \"../../interfaces\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { boolArrayToBitmap, decodeProposalId } from \"@aragon/sdk-common\";\nimport { DelegateTokensParams } from \"../../types\";\n/**\n * Estimation module the SDK TokenVoting Client\n */\nexport class TokenVotingClientEstimation extends ClientCore\n  implements ITokenVotingClientEstimation {\n  /**\n   * Estimates the gas fee of creating a proposal on the plugin\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const estimatedGasFee = await tokenVotingContract.estimateGas\n      .createProposal(\n        toUtf8Bytes(params.metadataUri),\n        params.actions || [],\n        allowFailureMap,\n        Math.round(startTimestamp / 1000),\n        Math.round(endTimestamp / 1000),\n        params.creatorVote || 0,\n        params.executeOnPass || false,\n      );\n    return this.web3.getApproximateGasFee(estimatedGasFee.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of casting a vote on a proposal\n   *\n   * @param {VoteProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async voteProposal(\n    params: VoteProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      params.proposalId,\n    );\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const estimation = await tokenVotingContract.estimateGas.vote(\n      id,\n      params.vote,\n      false,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of executing a TokenVoting proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async executeProposal(\n    proposalId: string,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      proposalId,\n    );\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const estimation = await tokenVotingContract.estimateGas.execute(\n      id,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of delegating voting power to a delegatee\n   *\n   * @param {DelegateTokensParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async delegateTokens(\n    params: DelegateTokensParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    const governanceErc20Contract = GovernanceERC20__factory.connect(\n      params.tokenAddress,\n      signer,\n    );\n    const estimation = await governanceErc20Contract.estimateGas.delegate(\n      params.delegatee,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of undelegating voting power\n   *\n   * @param {string} tokenAddress\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async undelegateTokens(\n    tokenAddress: string,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    return this.delegateTokens({\n      tokenAddress,\n      delegatee: await signer.getAddress(),\n    });\n  }\n}\n","import {\n  ITokenVotingClient,\n  ITokenVotingClientDecoding,\n  ITokenVotingClientEncoding,\n  ITokenVotingClientEstimation,\n  ITokenVotingClientMethods,\n} from \"./interfaces\";\nimport { TokenVotingClientMethods } from \"./internal/client/methods\";\nimport { TokenVotingClientEncoding } from \"./internal/client/encoding\";\nimport { TokenVotingClientDecoding } from \"./internal/client/decoding\";\nimport { TokenVotingClientEstimation } from \"./internal/client/estimation\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  PluginInstallItem,\n} from \"../client-common\";\nimport { Networkish } from \"@ethersproject/providers\";\nimport { TokenVotingPluginInstall } from \"./types\";\n\n/**\n * Provider a generic client with high level methods to manage and interact a Token Voting plugin installed in a DAO\n */\nexport class TokenVotingClient extends ClientCore\n  implements ITokenVotingClient {\n  public methods: ITokenVotingClientMethods;\n  public encoding: ITokenVotingClientEncoding;\n  public decoding: ITokenVotingClientDecoding;\n  public estimation: ITokenVotingClientEstimation;\n\n  constructor(context: ContextPlugin) {\n    super(context);\n    this.methods = new TokenVotingClientMethods(context);\n    this.encoding = new TokenVotingClientEncoding(context);\n    this.decoding = new TokenVotingClientDecoding(context);\n    this.estimation = new TokenVotingClientEstimation(context);\n  }\n  static encoding = {\n    /**\n     * Computes the parameters to be given when creating the DAO,\n     * so that the plugin is configured\n     *\n     * @param {TokenVotingPluginInstall} params\n     * @param {Networkish} [network=\"mainnet\"]\n     * @return {*}  {PluginInstallItem}\n     * @memberof TokenVotingClient\n     */\n    getPluginInstallItem: (\n      params: TokenVotingPluginInstall,\n      network: Networkish = \"mainnet\",\n    ): PluginInstallItem =>\n      TokenVotingClientEncoding.getPluginInstallItem(params, network),\n  };\n}\n","import {\n  CreateProposalBaseParams,\n  ProposalBase,\n  ProposalListItemBase,\n  VersionTag,\n} from \"../client-common\";\n\n/* Installation */\nexport type MultisigPluginInstallParams = MultisigPluginSettings;\n\nexport type MultisigPluginPrepareInstallationParams = {\n  settings: MultisigPluginSettings;\n  daoAddressOrEns: string;\n  versionTag?: VersionTag;\n};\n\nexport type MultisigVotingSettings = {\n  minApprovals: number;\n  onlyListed: boolean;\n};\n\nexport type MultisigPluginSettings = {\n  members: string[];\n  votingSettings: MultisigVotingSettings;\n};\n/* update members */\nexport type UpdateAddressesParams = {\n  pluginAddress: string;\n  members: string[];\n};\nexport type RemoveAddressesParams = UpdateAddressesParams;\nexport type AddAddressesParams = UpdateAddressesParams;\n\n/* update voting settings */\nexport type UpdateMultisigVotingSettingsParams = {\n  pluginAddress: string;\n  votingSettings: MultisigVotingSettings;\n};\n\n/* Create Proposal */\nexport type CreateMultisigProposalParams = CreateProposalBaseParams & {\n  approve?: boolean;\n  tryExecution?: boolean;\n  startDate?: Date;\n  /** Date at which the proposal will expire if not approved */\n  endDate?: Date;\n};\n\n/* Approve Proposal */\nexport type ApproveMultisigProposalParams = {\n  proposalId: string;\n  tryExecution: boolean;\n};\n\nexport type CanApproveParams = {\n  proposalId: string;\n  approverAddressOrEns: string;\n};\n\nexport enum ApproveProposalStep {\n  APPROVING = \"approving\",\n  DONE = \"done\",\n}\n\nexport type ApproveProposalStepValue =\n  | { key: ApproveProposalStep.APPROVING; txHash: string }\n  | { key: ApproveProposalStep.DONE };\n\n/* Proposal */\n\nexport type MultisigProposalListItem = ProposalListItemBase & {\n  approvals: string[];\n  settings: MultisigVotingSettings;\n};\n\nexport type MultisigProposal = ProposalBase & {\n  approvals: string[];\n  settings: MultisigVotingSettings;\n};\n","import { gql } from \"graphql-request\";\n\nexport const QueryMultisigProposal = gql`\nquery MultisigProposal($proposalId: ID!) {\n  multisigProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    startDate\n    endDate\n    actions {\n      to\n      value\n      data\n    }\n    executionDate\n    executionBlockNumber\n    creationBlockNumber\n    plugin {\n      onlyListed\n    }\n    minApprovals\n    executionTxHash\n    executed\n    potentiallyExecutable\n    approvers{\n      id\n    }\n  }\n}\n`;\nexport const QueryMultisigProposals = gql`\nquery MultisigProposals($where: MultisigProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: MultisigProposal_orderBy!) {\n  multisigProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    executed\n    potentiallyExecutable\n    approvals\n    startDate\n    endDate\n    executionDate\n    executionBlockNumber\n    creationBlockNumber\n    approvers {\n      id\n    }\n    minApprovals\n    plugin{\n      onlyListed\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryMultisigVotingSettings = gql`\nquery MultisigVotingSettings($address: ID!) {\n    multisigPlugin(id: $address){\n        minApprovals\n        onlyListed\n    }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryMultisigMembers = gql`\nquery MultisigMembers($address: ID!) {\n    multisigPlugin(id: $address){\n        members {\n            address\n        }\n    }\n}\n`;\n","import { getCompactProposalId, hexToBytes } from \"@aragon/sdk-common\";\nimport {\n  computeProposalStatus,\n  DaoAction,\n  ProposalMetadata,\n  SubgraphAction,\n} from \"../../client-common\";\nimport { MultisigProposal, MultisigProposalListItem } from \"../types\";\nimport {\n  SubgraphMultisigProposal,\n  SubgraphMultisigProposalListItem,\n} from \"./types\";\n\nexport function toMultisigProposal(\n  proposal: SubgraphMultisigProposal,\n  metadata: ProposalMetadata,\n): MultisigProposal {\n  const creationDate = new Date(\n    parseInt(proposal.createdAt) * 1000,\n  );\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(\n    parseInt(proposal.endDate) * 1000,\n  );\n  const executionDate = proposal.executionDate\n    ? new Date(\n      parseInt(proposal.executionDate) * 1000,\n    )\n    : null;\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n      description: metadata.description,\n      resources: metadata.resources,\n      media: metadata.media,\n    },\n    settings: {\n      onlyListed: proposal.plugin.onlyListed,\n      minApprovals: proposal.minApprovals,\n    },\n    creationBlockNumber: parseInt(proposal.creationBlockNumber) || 0,\n    creationDate,\n    startDate,\n    endDate,\n    executionDate,\n    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,\n    executionTxHash: proposal.executionTxHash || null,\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    status: computeProposalStatus(proposal),\n    approvals: proposal.approvers.map(\n      (approver) => approver.id.slice(0, 42),\n    ),\n  };\n}\nexport function toMultisigProposalListItem(\n  proposal: SubgraphMultisigProposalListItem,\n  metadata: ProposalMetadata,\n): MultisigProposalListItem {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(\n    parseInt(proposal.endDate) * 1000,\n  );\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n    },\n    approvals: proposal.approvers.map(\n      (approver) => approver.id.slice(0, 42),\n    ),\n    settings: {\n      onlyListed: proposal.plugin.onlyListed,\n      minApprovals: proposal.minApprovals,\n    },\n    startDate,\n    endDate,\n    status: computeProposalStatus(proposal),\n  };\n}\n","import {\n  hexToBytes,\n  InvalidAddressError,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  ClientCore,\n  DaoAction,\n  PluginInstallItem,\n  SupportedNetwork,\n  SupportedNetworksArray,\n} from \"../../../client-common\";\nimport {\n  AddAddressesParams,\n  MultisigPluginInstallParams,\n  RemoveAddressesParams,\n  UpdateMultisigVotingSettingsParams,\n} from \"../../types\";\n// @ts-ignore\n// todo fix new contracts-ethers\nimport { Multisig__factory } from \"@aragon/osx-ethers\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { LIVE_CONTRACTS } from \"../../../client-common/constants\";\nimport { getNetwork, Networkish } from \"@ethersproject/providers\";\nimport { IMultisigClientEncoding } from \"../../interfaces\";\n\n/**\n * Encoding module for the SDK Multisig Client\n */\nexport class MultisigClientEncoding extends ClientCore\n  implements IMultisigClientEncoding {\n  /**\n   * Computes the parameters to be given when creating the DAO,\n   * so that the plugin is configured\n   *\n   * @param {MultisigPluginInstallParams} params\n   * @param {Networkish} network\n   *\n   * @return {*}  {PluginInstallItem}\n   * @memberof MultisigClientEncoding\n   */\n  static getPluginInstallItem(\n    params: MultisigPluginInstallParams,\n    network: Networkish,\n  ): PluginInstallItem {\n    const networkName = getNetwork(network).name as SupportedNetwork;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    const hexBytes = defaultAbiCoder.encode(\n      // members, [onlyListed, minApprovals]\n      [\n        \"address[]\",\n        \"tuple(bool, uint16)\",\n      ],\n      [\n        params.members,\n        [\n          params.votingSettings.onlyListed,\n          params.votingSettings.minApprovals,\n        ],\n      ],\n    );\n    return {\n      id: LIVE_CONTRACTS[networkName].multisigRepo,\n      data: hexToBytes(hexBytes),\n    };\n  }\n\n  /**\n   * Computes the parameters to be given when creating a proposal that updates the governance configuration\n   *\n   * @param {AddAddressesParams} params\n   * @return {*}  {DaoAction[]}\n   * @memberof MultisigClientEncoding\n   */\n  public addAddressesAction(\n    params: AddAddressesParams,\n  ): DaoAction {\n    if (!isAddress(params.pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO yup validation\n    for (const member of params.members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const multisigInterface = Multisig__factory.createInterface();\n    // get hex bytes\n    const hexBytes = multisigInterface.encodeFunctionData(\n      \"addAddresses\",\n      [params.members],\n    );\n    return {\n      to: params.pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that adds addresses to address list\n   *\n   * @param {RemoveAddressesParams} params\n   * @return {*}  {DaoAction[]}\n   * @memberof MultisigClientEncoding\n   */\n  public removeAddressesAction(\n    params: RemoveAddressesParams,\n  ): DaoAction {\n    if (!isAddress(params.pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO yup validation\n    for (const member of params.members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const multisigInterface = Multisig__factory.createInterface();\n    // get hex bytes\n    const hexBytes = multisigInterface.encodeFunctionData(\n      \"removeAddresses\",\n      [params.members],\n    );\n    return {\n      to: params.pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal updates multisig settings\n   *\n   * @param {UpdateMultisigVotingSettingsParams} params\n   * @return {*}  {DaoAction}\n   * @memberof MultisigClientEncoding\n   */\n  public updateMultisigVotingSettings(\n    params: UpdateMultisigVotingSettingsParams,\n  ): DaoAction {\n    if (!isAddress(params.pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const multisigInterface = Multisig__factory.createInterface();\n    // get hex bytes\n    const hexBytes = multisigInterface.encodeFunctionData(\n      \"updateMultisigSettings\",\n      [params.votingSettings],\n    );\n    return {\n      to: params.pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n","import {\n  boolArrayToBitmap,\n  decodeProposalId,\n  encodeProposalId,\n  getExtendedProposalId,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidProposalIdError,\n  IpfsPinError,\n  isProposalId,\n  NoProviderError,\n  PluginInstallationPreparationError,\n  ProposalCreationError,\n  resolveIpfsCid,\n} from \"@aragon/sdk-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  ApproveMultisigProposalParams,\n  ApproveProposalStep,\n  ApproveProposalStepValue,\n  CanApproveParams,\n  CreateMultisigProposalParams,\n  MultisigPluginPrepareInstallationParams,\n  MultisigProposal,\n  MultisigProposalListItem,\n  MultisigVotingSettings,\n} from \"../../types\";\nimport {\n  SubgraphMultisigProposal,\n  SubgraphMultisigProposalListItem,\n  SubgraphMultisigVotingSettings,\n} from \"../types\";\nimport {\n  ClientCore,\n  computeProposalStatusFilter,\n  ExecuteProposalStep,\n  ExecuteProposalStepValue,\n  findLog,\n  PrepareInstallationStep,\n  PrepareInstallationStepValue,\n  ProposalCreationSteps,\n  ProposalCreationStepValue,\n  ProposalMetadata,\n  ProposalQueryParams,\n  ProposalSortBy,\n  SortDirection,\n  SubgraphMembers,\n  VersionTag,\n} from \"../../../client-common\";\nimport {\n  EMPTY_PROPOSAL_METADATA_LINK,\n  LIVE_CONTRACTS,\n  UNAVAILABLE_PROPOSAL_METADATA,\n  UNSUPPORTED_PROPOSAL_METADATA_LINK,\n} from \"../../../client-common/constants\";\nimport {\n  Multisig__factory,\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  QueryMultisigMembers,\n  QueryMultisigProposal,\n  QueryMultisigProposals,\n  QueryMultisigVotingSettings,\n} from \"../graphql-queries\";\nimport { toMultisigProposal, toMultisigProposalListItem } from \"../utils\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { MultisigClientEncoding } from \"./encoding\";\nimport { IMultisigClientMethods } from \"../../interfaces\";\n\n/**\n * Methods module the SDK Address List Client\n */\nexport class MultisigClientMethods extends ClientCore\n  implements IMultisigClientMethods {\n  /**\n   * Creates a new proposal on the given multisig plugin contract\n   *\n   * @param {CreateMultisigProposalParams} params\n   * @return {*}  {AsyncGenerator<ProposalCreationStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *createProposal(\n    params: CreateMultisigProposalParams,\n  ): AsyncGenerator<ProposalCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const multisigContract = Multisig__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const tx = await multisigContract.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      params.approve || false,\n      params.tryExecution || false,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n    );\n\n    yield {\n      key: ProposalCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const multisigContractInterface = Multisig__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      multisigContractInterface,\n      \"ProposalCreated\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = multisigContractInterface.parseLog(log);\n    const proposalId = parsedLog.args[\"proposalId\"];\n    if (!proposalId) {\n      throw new ProposalCreationError();\n    }\n\n    yield {\n      key: ProposalCreationSteps.DONE,\n      proposalId: encodeProposalId(params.pluginAddress, Number(proposalId)),\n    };\n  }\n\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {ProposalMetadata} params\n   * @return {*}  {Promise<string>}\n   * @memberof MultisigClientMethods\n   */\n  public async pinMetadata(params: ProposalMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch (e) {\n      throw new IpfsPinError(e);\n    }\n  }\n  /**\n   * Allow a wallet in the multisig give approval to a proposal\n   *\n   * @param {ApproveMultisigProposalParams} params\n   * @return {*}  {AsyncGenerator<ApproveProposalStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *approveProposal(\n    params: ApproveMultisigProposalParams,\n  ): AsyncGenerator<ApproveProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await multisigContract.approve(\n      id,\n      params.tryExecution,\n    );\n\n    yield {\n      key: ApproveProposalStep.APPROVING,\n      txHash: tx.hash,\n    };\n\n    await tx.wait();\n\n    yield {\n      key: ApproveProposalStep.DONE,\n    };\n  }\n  /**\n   * Allow a wallet in the multisig give approval to a proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {AsyncGenerator<ExecuteMultisigProposalStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *executeProposal(\n    proposalId: string,\n  ): AsyncGenerator<ExecuteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await multisigContract.execute(\n      id,\n    );\n\n    yield {\n      key: ExecuteProposalStep.EXECUTING,\n      txHash: tx.hash,\n    };\n\n    await tx.wait();\n\n    yield {\n      key: ExecuteProposalStep.DONE,\n    };\n  }\n  /**\n   * Prepares the installation of a multisig plugin in a given dao\n   *\n   * @param {MultisigPluginPrepareInstallationParams} params\n   * @return {*}  {AsyncGenerator<PrepareInstallationStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *prepareInstallation(\n    params: MultisigPluginPrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const networkName = this.web3.getNetworkName();\n    // connect to psp contract\n    const pspContract = PluginSetupProcessor__factory.connect(\n      LIVE_CONTRACTS[networkName].pluginSetupProcessor,\n      signer,\n    );\n    // connect to plugin repo\n    const multisigRepoContract = PluginRepo__factory.connect(\n      LIVE_CONTRACTS[networkName].multisigRepo,\n      signer,\n    );\n    // use specified version or latest\n    let versionTag: VersionTag | undefined = params.versionTag;\n    if (!params.versionTag) {\n      const latestVersion = await multisigRepoContract\n        [\"getLatestVersion(address)\"](\n          LIVE_CONTRACTS[networkName].multisigSetup,\n        );\n      versionTag = {\n        build: latestVersion.tag.build,\n        release: latestVersion.tag.release,\n      };\n    }\n    // get install data\n    const multisigPluginInstallItem = MultisigClientEncoding\n      .getPluginInstallItem(params.settings, networkName);\n    // execute prepareInstallation\n    const tx = await pspContract.prepareInstallation(\n      params.daoAddressOrEns,\n      {\n        pluginSetupRef: {\n          pluginSetupRepo: LIVE_CONTRACTS[networkName].multisigRepo,\n          versionTag: versionTag!,\n        },\n        data: multisigPluginInstallItem.data,\n      },\n    );\n\n    yield {\n      key: PrepareInstallationStep.PREPARING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const pspContractInterface = PluginSetupProcessor__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      pspContractInterface,\n      \"InstallationPrepared\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = pspContractInterface.parseLog(log);\n    const pluginAddress = parsedLog.args[\"plugin\"];\n    const preparedSetupData = parsedLog.args[\"preparedSetupData\"];\n    if (!(pluginAddress || preparedSetupData)) {\n      throw new PluginInstallationPreparationError();\n    }\n    yield {\n      key: PrepareInstallationStep.DONE,\n      pluginAddress,\n      pluginRepo: LIVE_CONTRACTS[networkName].multisigRepo,\n      versionTag: versionTag!,\n      permissions: preparedSetupData.permissions,\n      helpers: preparedSetupData.helpers,\n    };\n  }\n  /**\n   * Checks whether the current proposal can be approved by the given address\n   *\n   * @param {string} addressOrEns\n   * @return {*}  {Promise<boolean>}\n   * @memberof MultisigClientMethods\n   */\n  public async canApprove(\n    params: CanApproveParams,\n  ): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n    if (!isAddress(params.approverAddressOrEns)) {\n      throw new InvalidAddressOrEnsError();\n    }\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    return multisigContract.canApprove(id, params.approverAddressOrEns);\n  }\n  /**\n   * Checks whether the current proposal can be executed\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<boolean>}\n   * @memberof MultisigClientMethods\n   */\n  public async canExecute(\n    proposalId: string,\n  ): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    return multisigContract.canExecute(id);\n  }\n  /**\n   * Returns the voting settings\n   *\n   * @param {string} addressOrEns\n   * @return {*}  {Promise<MultisigVotingSettings>}\n   * @memberof MultisigClientMethods\n   */\n  public async getVotingSettings(\n    pluginAddress: string,\n  ): Promise<MultisigVotingSettings> {\n    // TODO\n    // update this with yup validation\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressOrEnsError();\n    }\n    const query = QueryMultisigVotingSettings;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"Multisig settings\";\n    type T = { multisigPlugin: SubgraphMultisigVotingSettings };\n    const { multisigPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return {\n      onlyListed: multisigPlugin.onlyListed,\n      minApprovals: multisigPlugin.minApprovals,\n    };\n  }\n  /**\n   * returns the members of the multisig\n   *\n   * @param {string} addressOrEns\n   * @return {*}  {Promise<string[]>}\n   * @memberof MultisigClientMethods\n   */\n  public async getMembers(\n    pluginAddress: string,\n  ): Promise<string[]> {\n    // TODO\n    // update this with yup validation\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressOrEnsError();\n    }\n    const query = QueryMultisigMembers;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"Multisig members\";\n    type T = { multisigPlugin: SubgraphMembers };\n    const { multisigPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return multisigPlugin.members.map((member) => member.address);\n  }\n\n  /**\n   * Returns the details of the given proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {(Promise<MultisigProposal | null>)}\n   * @memberof MultisigClientMethods\n   */\n  public async getProposal(\n    proposalId: string,\n  ): Promise<MultisigProposal | null> {\n    if (!isProposalId(proposalId)) {\n      throw new InvalidProposalIdError();\n    }\n    const extendedProposalId = getExtendedProposalId(proposalId);\n    const query = QueryMultisigProposal;\n    const params = {\n      proposalId: extendedProposalId,\n    };\n    const name = \"Multisig proposal\";\n    type T = { multisigProposal: SubgraphMultisigProposal };\n    const { multisigProposal } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!multisigProposal) {\n      return null;\n    } else if (!multisigProposal.metadata) {\n      return toMultisigProposal(\n        multisigProposal,\n        EMPTY_PROPOSAL_METADATA_LINK,\n      );\n    }\n    try {\n      const metadataCid = resolveIpfsCid(multisigProposal.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as ProposalMetadata;\n      return toMultisigProposal(multisigProposal, metadata);\n      // TODO: Parse and validate schema\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toMultisigProposal(\n          multisigProposal,\n          UNSUPPORTED_PROPOSAL_METADATA_LINK,\n        );\n      }\n      return toMultisigProposal(\n        multisigProposal,\n        UNAVAILABLE_PROPOSAL_METADATA,\n      );\n    }\n  }\n\n  /**\n   * Returns a list of proposals on the Plugin, filtered by the given criteria\n   *\n   * @param {ProposalQueryParams} {\n   *       daoAddressOrEns,\n   *       limit = 10,\n   *       status,\n   *       skip = 0,\n   *       direction = SortDirection.ASC,\n   *       sortBy = ProposalSortBy.CREATED_AT,\n   *     }\n   * @return {*}  {Promise<MultisigProposalListItem[]>}\n   * @memberof MultisigClientMethods\n   */\n  public async getProposals({\n    daoAddressOrEns,\n    limit = 10,\n    status,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = ProposalSortBy.CREATED_AT,\n  }: ProposalQueryParams): Promise<MultisigProposalListItem[]> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        try {\n          const resolvedAddress = await provider.resolveName(address);\n          if (!resolvedAddress) {\n            throw new InvalidAddressOrEnsError();\n          }\n          address = resolvedAddress;\n        } catch (e) {\n          throw new InvalidAddressOrEnsError(e);\n        }\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (status) {\n      where = { ...where, ...computeProposalStatusFilter(status) };\n    }\n    const query = QueryMultisigProposals;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"Multisig proposals\";\n    type T = { multisigProposals: SubgraphMultisigProposalListItem[] };\n    const { multisigProposals } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      multisigProposals.map(\n        async (\n          proposal: SubgraphMultisigProposalListItem,\n        ): Promise<MultisigProposalListItem> => {\n          if (!proposal.metadata) {\n            return toMultisigProposalListItem(\n              proposal,\n              EMPTY_PROPOSAL_METADATA_LINK,\n            );\n          }\n          // format in the metadata field\n          try {\n            const metadataCid = resolveIpfsCid(proposal.metadata);\n            const stringMetadata = await this.ipfs.fetchString(metadataCid);\n            const metadata = JSON.parse(stringMetadata) as ProposalMetadata;\n            return toMultisigProposalListItem(proposal, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toMultisigProposalListItem(\n                proposal,\n                UNSUPPORTED_PROPOSAL_METADATA_LINK,\n              );\n            }\n            return toMultisigProposalListItem(\n              proposal,\n              UNAVAILABLE_PROPOSAL_METADATA,\n            );\n          }\n        },\n      ),\n    );\n  }\n}\n","// @ts-ignore\n// todo fix new contracts-ethers\nimport { Multisig__factory } from \"@aragon/osx-ethers\";\n\n// TODO update with function names\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  Multisig__factory.createInterface().getFunction(\"addAddresses\")\n    .format(\"minimal\"),\n  Multisig__factory.createInterface().getFunction(\n    \"removeAddresses\",\n  ).format(\"minimal\"),\n  Multisig__factory.createInterface().getFunction(\n    \"updateMultisigSettings\",\n  ).format(\"minimal\"),\n];\n","import { bytesToHex } from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  getFunctionFragment,\n  InterfaceParams,\n} from \"../../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport { MultisigVotingSettings } from \"../../types\";\n// @ts-ignore\n// todo fix new contracts-ethers\nimport { Multisig__factory } from \"@aragon/osx-ethers\";\nimport { IMultisigClientDecoding } from \"../../interfaces\";\n\n/**\n * Decoding module for the SDK AddressList Client\n */\nexport class MultisigClientDecoding extends ClientCore\n  implements IMultisigClientDecoding {\n  /**\n   * Decodes a list of addresses from an encoded add members action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string[]}\n   * @memberof MultisigClientDecoding\n   */\n  public addAddressesAction(data: Uint8Array): string[] {\n    const multisigInterface = Multisig__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n\n    const expectedfunction = multisigInterface.getFunction(\"addAddresses\");\n    const result = multisigInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Decodes a list of addresses from an encoded remove members action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string[]}\n   * @memberof MultisigClientDecoding\n   */\n  public removeAddressesAction(data: Uint8Array): string[] {\n    const multisigInterface = Multisig__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = multisigInterface.getFunction(\n      \"removeAddresses\",\n    );\n    const result = multisigInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Decodes a list of min approvals from an encoded update min approval action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {MultisigVotingSettings}\n   * @memberof MultisigClientDecoding\n   */\n  public updateMultisigVotingSettings(\n    data: Uint8Array,\n  ): MultisigVotingSettings {\n    const multisigInterface = Multisig__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = multisigInterface.getFunction(\n      \"updateMultisigSettings\",\n    );\n    const result = multisigInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return {\n      minApprovals: result[0].minApprovals,\n      onlyListed: result[0].onlyListed,\n    };\n  }\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {(InterfaceParams | null)}\n   * @memberof MultisigClientDecoding\n   */\n  public findInterface(data: Uint8Array): InterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n","import { Multisig__factory } from \"@aragon/osx-ethers\";\nimport { boolArrayToBitmap, decodeProposalId } from \"@aragon/sdk-common\";\nimport { ClientCore, GasFeeEstimation } from \"../../../client-common\";\nimport { IMultisigClientEstimation } from \"../../interfaces\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  ApproveMultisigProposalParams,\n  CreateMultisigProposalParams,\n} from \"../../types\";\n/**\n * Estimation module the SDK Address List Client\n */\nexport class MultisigClientEstimation extends ClientCore\n  implements IMultisigClientEstimation {\n  /**\n   * Estimates the gas fee of creating a proposal on the plugin\n   *\n   * @param {CreateMultisigProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async createProposal(\n    params: CreateMultisigProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const multisigContract = Multisig__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const estimation = await multisigContract.estimateGas.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      params.approve || false,\n      params.tryExecution || true,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of approving a proposal\n   *\n   * @param {ApproveMultisigProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async approveProposal(\n    params: ApproveMultisigProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    const { pluginAddress, id } = decodeProposalId(\n      params.proposalId,\n    );\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const estimation = await multisigContract.estimateGas.approve(\n      id,\n      params.tryExecution,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of executing a proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async executeProposal(\n    proposalId: string,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      proposalId,\n    );\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const estimation = await multisigContract.estimateGas.execute(\n      id,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n}\n","import {\n  IMultisigClient,\n  IMultisigClientDecoding,\n  IMultisigClientEncoding,\n  IMultisigClientEstimation,\n  IMultisigClientMethods,\n} from \"./interfaces\";\nimport { MultisigClientMethods } from \"./internal/client/methods\";\nimport { MultisigClientEncoding } from \"./internal/client/encoding\";\nimport { MultisigClientDecoding } from \"./internal/client/decoding\";\nimport { MultisigClientEstimation } from \"./internal/client/estimation\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  PluginInstallItem,\n} from \"../client-common\";\nimport { Networkish } from \"@ethersproject/providers\";\nimport { MultisigPluginInstallParams } from \"./types\";\n\n/**\n * Provider a generic client with high level methods to manage and interact an Address List Voting plugin installed in a DAO\n */\nexport class MultisigClient extends ClientCore implements IMultisigClient {\n  public methods: IMultisigClientMethods;\n  public encoding: IMultisigClientEncoding;\n  public decoding: IMultisigClientDecoding;\n  public estimation: IMultisigClientEstimation;\n  constructor(context: ContextPlugin) {\n    super(context);\n    this.methods = new MultisigClientMethods(context);\n    this.encoding = new MultisigClientEncoding(context);\n    this.decoding = new MultisigClientDecoding(context);\n    this.estimation = new MultisigClientEstimation(context);\n  }\n\n  static encoding = {\n    /**\n     * Computes the parameters to be given when creating the DAO,\n     * so that the plugin is configured\n     *\n     * @param {MultisigPluginInstallParams} params\n     * @param {Networkish} [network=\"mainnet\"]\n     * @return {*}  {PluginInstallItem}\n     * @memberof MultisigClient\n     */\n\n    getPluginInstallItem: (\n      params: MultisigPluginInstallParams,\n      network: Networkish = \"mainnet\",\n    ): PluginInstallItem =>\n      MultisigClientEncoding.getPluginInstallItem(params, network),\n  };\n}\n"],"names":["erc20ContractAbi","name","inputs","type","indexed","anonymous","outputs","stateMutability","QueryDao","gql","_templateObject","_taggedTemplateLiteralLoose","QueryDaos","_templateObject2","QueryTokenBalances","QueryTokenTransfers","QueryPlugins","QueryPlugin","QueryIPlugin","_templateObject3","DaoCreationSteps","DaoSortBy","PluginSortBy","DaoDepositSteps","AssetBalanceSortBy","TransferType","TransferSortBy","SetAllowanceSteps","PrepareUninstallationSteps","SubgraphTransferType","SubgraphTransferTypeMap","Map","DEPOSIT","WITHDRAW","ProposalStatus","VoteValues","VotingMode","SubgraphVoteValues","SubgraphVoteValuesMap","YES","NO","ABSTAIN","ProposalSortBy","ProposalCreationSteps","VoteProposalStep","ExecuteProposalStep","PrepareInstallationStep","PermissionOperationType","SupportedNetwork","SupportedNetworksArray","Object","values","DaoRole","SortDirection","TokenType","Web3Module","context","providerIdx","Math","floor","random","web3Providers","length","_proto","prototype","shiftProvider","NoProviderError","NoNodesAvailableError","getSigner","signer","NoSignerError","getProvider","getNetworkName","networkName","network","includes","UnsupportedNetworkError","getConnectedSigner","provider","connect","isUp","getNetwork","then","ensureOnline","_ensureOnline","_asyncToGenerator","_regeneratorRuntime","mark","_callee","i","wrap","_callee$","_context","prev","next","sent","abrupt","stop","apply","arguments","attachContract","address","abi","isAddress","InvalidAddressError","InvalidContractAbiError","Contract","getMaxFeePerGas","getFeeData","feeData","maxFeePerGas","CannotEstimateGasError","toBigInt","getApproximateGasFee","estimatedFee","max","factor","_this","gasFeeEstimationFactor","PRECISION_FACTOR_BASE","average","BigInt","trunc","getDaoFactoryAddress","daoFactoryAddress","NoDaoFactory","IPFSModule","_context$ipfs","ipfs","clients","clientIdx","getClient","ClientNotInitializedError","shiftClient","_this$clients","_this$clients2","Promise","resolve","nodeInfo","_this$clients3","getOnlineClient","add","_add","_callee2","input","_this2","_callee2$","_context2","runAndRetryHelper","res","hash","_x","pin","_this3","fetchBytes","cid","_this4","cat","f","retries","runAndRetry","func","onFail","e","ClientError","response","status","IpfsError","_this5","shouldRetry","fetchString","bytes","TextDecoder","decode","DataDecodingError","message","QueryStatus","GraphqlModule","_context$graphql","graphql","request","_res$_meta","_meta","deployment","_ref","query","params","GraphQLError","ClientCore","web3","UNSUPPORTED_PROPOSAL_METADATA_LINK","title","summary","description","resources","EMPTY_PROPOSAL_METADATA_LINK","UNAVAILABLE_PROPOSAL_METADATA","getGraphqlNode","netowrk","SupportedNetworksToGraphqlNetworks","_SupportedNetworksToG","MAINNET","GOERLI","POLYGON","MUMBAI","GRAPHQL_NODES","_GRAPHQL_NODES","url","IPFS_ENDPOINTS","prod","headers","test","IPFS_NODES","_IPFS_NODES","LIVE_CONTRACTS","_LIVE_CONTRACTS","daoFactory","activeContractsList","mainnet","DAOFactory","pluginSetupProcessor","PluginRepoFactory","multisigRepo","adminRepo","addresslistVotingRepo","tokenVotingRepo","multisigSetup","MultisigSetup","adminSetup","AdminSetup","addresslistVotingSetup","AddresslistVotingSetup","tokenVotingSetup","TokenVotingSetup","goerli","PluginSetupProcessor","mumbai","ensRegistry","ENSRegistry","polygon","DEFAULT_GAS_FEE_ESTIMATION_FACTOR","supportedProtocols","process","_process","_process$env","env","TESTING","push","Context","ensRegistryAddress","ipfsNodes","graphqlNodes","mergedParams","assign","set","contextParams","state","resolveNetwork","setNetworkDefaults","Array","isArray","resolveWeb3Providers","_contextParams$graphq","resolveGraphql","overriden","_contextParams$ipfsNo","resolveIpfs","resolveGasFeeEstimationFactor","_GRAPHQL_NODES$networ","_IPFS_NODES$networkNa","ensAddress","networkish","endpoints","map","item","URL","protocol","UnsupportedProtocolError","JsonRpcProvider","href","configs","forEach","config","IpfsClient","endpoint","GraphQLClient","Error","_createClass","key","get","ContextPlugin","_Context","_inheritsLoose","call","fromContext","ctx","ctxPlugin","unwrapProposalParams","metadataUri","_params$actions","actions","startDate","getTime","endDate","_params$executeOnPass","executeOnPass","_params$creatorVote","creatorVote","computeProposalStatus","proposal","now","Date","parseInt","executed","EXECUTED","PENDING","potentiallyExecutable","earlyExecutable","SUCCEEDED","ACTIVE","DEFEATED","computeProposalStatusFilter","where","round","toString","startDate_gte","startDate_lt","endDate_gte","endDate_lt","findLog","receipt","iface","eventName","logs","find","log","topics","id","getEvent","format","votingModeToContracts","votingMode","STANDARD","EARLY_EXECUTION","VOTE_REPLACEMENT","InvalidVotingModeError","votingModeFromContracts","decodeUpdatePluginSettingsAction","data","votingInterface","MajorityVotingBase__factory","createInterface","hexBytes","bytesToHex","expectedfunction","getFunction","result","decodeFunctionData","pluginSettingsFromContract","encodeUpdateVotingSettingsAction","args","votingSettingsToContract","encodeFunctionData","hexToBytes","supportThreshold","decodeRatio","minParticipation","minDuration","toNumber","minProposerVotingPower","BigNumber","from","encodeRatio","getFunctionFragment","availableFunctions","Interface","substring","Permissions","UPGRADE_PERMISSION","SET_METADATA_PERMISSION","EXECUTE_PERMISSION","WITHDRAW_PERMISSION","SET_SIGNATURE_VALIDATOR_PERMISSION","SET_TRUSTED_FORWARDER_PERMISSION","ROOT_PERMISSION","CREATE_VERSION_PERMISSION","REGISTER_PERMISSION","REGISTER_DAO_PERMISSION","REGISTER_ENS_SUBDOMAIN_PERMISSION","MINT_PERMISSION","MERKLE_MINT_PERMISSION","MODIFY_ALLOWLIST_PERMISSION","SET_CONFIGURATION_PERMISSION","PermissionIds","entries","reduce","acc","_extends2","k","v","_extends","keccak256","toUtf8Bytes","freeze","unwrapDepositParams","daoAddressOrEns","amount","_params$tokenAddress","tokenAddress","AddressZero","toDaoDetails","dao","metadata","ensDomain","subdomain","avatar","undefined","links","creationDate","createdAt","plugins","plugin","appliedPluginRepo","release","appliedVersion","build","instanceAddress","appliedPreparation","pluginAddress","toDaoListItem","toAssetBalance","balance","updateDate","lastUpdated","__typename","NATIVE","ERC721","token","symbol","ERC20","decimals","toTokenTransfer","transfer","_transfer$proposal","tokenType","transactionId","txHash","to","proposalId","_transfer$proposal2","_transfer$proposal3","toPluginRepoRelease","currentBuild","builds","toPluginRepoListItem","pluginRepo","releases","toPluginRepo","releaseMetadata","buildMetadata","current","number","_pluginRepo$releases","_pluginRepo$releases$","_pluginRepo$releases$2","_pluginRepo$releases$3","_pluginRepo$releases2","_pluginRepo$releases3","applyInstallatonParamsToContract","pluginSetupRef","pluginSetupRepo","versionTag","helpersHash","defaultAbiCoder","encode","helpers","permissions","permission","condition","applyUninstallationParamsToContract","applyInstallatonParamsFromContract","permissionParamsToContract","who","permissionWithConditionParamsToContract","concat","permissionParamsFromContract","permissionId","_Object$keys$find","keys","replace","permissionParamsWitConditionFromContract","withdrawParamsFromContract","_value","tokenStandard","recipientAddressOrEns","AVAILABLE_FUNCTION_SIGNATURES","DAO__factory","UNSUPPORTED_DAO_METADATA_LINK","EMPTY_DAO_METADATA_LINK","UNAVAILABLE_DAO_METADATA","UNSUPPORTED_RELEASE_METADATA_LINK","images","EMPTY_RELEASE_METADATA_LINK","UNAVAILABLE_RELEASE_METADATA","UNSUPPORTED_BUILD_METADATA_LINK","ui","change","pluginSetupABI","prepareInstallation","prepareUninstallation","prepareUpdate","EMPTY_BUILD_METADATA_LINK","UNAVAILABLE_BUILD_METADATA","ClientMethods","_ClientCore","createDao","ensSubdomain","match","InvalidEnsError","daoFactoryInstance","DAOFactory__factory","pluginInstallationData","_iterator","_createForOfIteratorHelperLoose","_step","done","value","repo","PluginRepo__factory","_awaitAsyncGenerator","latestRelease","currentRelease","latestVersion","tag","pluginSetupProcessorAddr","PluginSetupProcessor__factory","execPermissionFound","daoBase","daoBaseAddr","_i","_pluginInstallationDa","installData","callStatic","pluginSetupProcessorResponse","found","EXECUTE_PERMISSION_ID","MissingExecPermissionError","daoURI","daoUri","trustedForwarder","tx","CREATING","wait","daoFactoryInterface","DAORegistry__factory","_receipt$logs","pspInterface","installedLogs","_receipt$logs2","filter","parsedLog","parseLog","DONE","pluginAddresses","pinMetadata","_pinMetadata","JSON","stringify","t0","IpfsPinError","deposit","_context3","_unwrapDepositParams","daoAddress","reference","tokenInstance","t1","getAddress","t2","t3","t4","allowance","currentAllowance","CHECKED_ALLOWANCE","lt","delegateYield","_asyncGeneratorDelegate","_asyncIterator","setAllowance","spender","daoInstance","override","DEPOSITING","cr","FailedDepositError","daoInterface","AmountMismatchError","_callee3","_context4","approve","SETTING_ALLOWANCE","UpdateAllowanceError","gt","ALLOWANCE_SET","_callee4","_context5","toLowerCase","_yield$_awaitAsyncGen","iplugin","_params$pluginInstall","pluginInstallationIndex","selectedInstallation","installations","InstallationNotFoundError","_params$uninstallatio","uninstallationParams","_params$uninstallatio2","uninstallationAbi","pspContract","setupPayload","currentHelpers","PREPARING","PluginUninstallationPreparationError","operation","_callee5","hasPermission","_hasPermission","_callee6","_callee6$","_context6","Uint8Array","_x2","getDao","_getDao","_callee7","resolvedAddress","_yield$this$graphql$r","metadataCid","metadataString","_callee7$","_context7","resolveName","InvalidAddressOrEnsError","resolveIpfsCid","parse","InvalidCidError","_x3","getDaos","_getDaos","_callee9","_ref$limit","limit","_ref$skip","skip","_ref$direction","direction","_ref$sortBy","sortBy","_yield$this$graphql$r2","daos","_callee9$","_context9","ASC","CREATED_AT","all","_ref2","_callee8","stringMetadata","_callee8$","_context8","_x5","_x4","getDaoBalances","_getDaoBalances","_callee10","_ref3","_ref3$limit","_ref3$skip","_ref3$direction","_ref3$sortBy","_yield$this$graphql$r3","tokenBalances","_callee10$","_context10","LAST_UPDATED","_x6","getDaoTransfers","_getDaoTransfers","_callee11","_ref4","_ref4$limit","_ref4$skip","_ref4$direction","_ref4$sortBy","_yield$this$graphql$r4","tokenTransfers","_callee11$","_context11","_x7","getPlugins","_getPlugins","_callee13","_temp","_this6","_ref5","_ref5$limit","_ref5$skip","_ref5$direction","_ref5$sortBy","_yield$this$graphql$r5","pluginRepos","_callee13$","_context13","SUBDOMAIN","subdomain_contains_nocase","_ref6","_callee12","pluginRepoReleases","_iterator2","_step2","resolvedMetadata","_callee12$","_context12","_x9","_x8","getPlugin","_getPlugin","_callee14","_yield$this$graphql$r6","_metadataCid","_stringMetadata","_resolvedMetadata","_callee14$","_context14","_x10","ClientEncoding","applyInstallationAction","grantAction","revokeAction","applyUninstallationAction","grantWithConditionAction","withdrawAction","_withdrawAction","_this$web3$getSigner","updateDaoMetadataAction","_updateDaoMetadataAction","_this$web3$getSigner2","setDaoUriAction","registerStandardCallbackAction","interfaceId","callbackSelector","magicNumber","setSignatureValidatorAction","signatureValidator","upgradeToAction","implementationAddress","upgradeToAndCallAction","ClientEstimation","_createDao","gasEstimation","estimateGas","DepositNativeTokenError","gasLimit","_setAllowance","contract","ClientDecoding","expectedFunction","abiObjects","_abiObjects","abiObject","updateDaoMetadataRawAction","toUtf8String","ipfsCid","findInterface","functionName","_unused2","Client","methods","encoding","decoding","estimation","QueryAddresslistVotingMembers","QueryAddresslistVotingProposal","QueryAddresslistVotingProposals","QueryAddresslistVotingSettings","toAddresslistVotingProposal","executionDate","getCompactProposalId","creatorAddress","creator","media","executionTxHash","creationBlockNumber","executionBlockNumber","action","yes","no","abstain","settings","minVotingPower","totalVotingPower","duration","totalVotingWeight","votes","voters","voter","voteReplaced","vote","voteOption","toAddresslistVotingProposalListItem","AddresslistVotingClientEncoding","getPluginInstallItem","_votingSettingsToCont","votingSettings","addresses","updatePluginSettingsAction","addMembersAction","members","member","AddresslistVoting__factory","removeMembersAction","AddresslistVotingClientMethods","createProposal","addresslistContract","_params$failSafeActio","failSafeActions","allowFailureMap","boolArrayToBitmap","startTimestamp","_params$startDate","endTimestamp","_params$endDate","addresslistContractInterface","ProposalCreationError","encodeProposalId","Number","voteProposal","_decodeProposalId","decodeProposalId","VOTING","executeProposal","_decodeProposalId2","execute","EXECUTING","addresslistVotingRepoContract","addresslistVotingPluginInstallItem","pspContractInterface","preparedSetupData","PluginInstallationPreparationError","canVote","_canVote","_decodeProposalId3","voterAddressOrEns","canExecute","_canExecute","_decodeProposalId4","getMembers","_getMembers","addresslistVotingPlugin","getProposal","_getProposal","extendedProposalId","addresslistVotingProposal","isProposalId","InvalidProposalIdError","getExtendedProposalId","getProposals","_getProposals","addresslistVotingProposals","getVotingSettings","_getVotingSettings","AddresslistVotingClientDecoding","_unused","AddresslistVotingClientEstimation","_createProposal","estimatedGasFee","_voteProposal","_executeProposal","_callee3$","AddresslistVotingClient","WrapTokensStep","UnwrapTokensStep","SubgraphTokenType","SubgraphContractType","QueryTokenVotingProposal","QueryTokenVotingProposals","QueryTokenVotingSettings","QueryTokenVotingPlugin","QueryTokenVotingMembers","toTokenVotingProposal","usedVotingWeight","votingPower","parseToken","weight","toTokenVotingProposalListItem","mintTokenParamsToContract","mintTokenParamsFromContract","tokenVotingInitParamsToContract","balances","newToken","useToken","_params$useToken","wrappedToken","subgraphToken","toTokenVotingMember","delegatee","delegators","delegator","TokenVotingClientEncoding","mintTokenAction","minterAddress","IERC20MintableUpgradeable__factory","TokenVotingClientMethods","tokenVotingContract","TokenVoting__factory","tokenVotingContractInterface","tokenVotingRepoContract","tokenVotingPluginInstallItem","wrapTokens","wrappedTokenAddress","wrappedErc20Contract","GovernanceWrappedERC20__factory","account","depositFor","WRAPPING","unwrapTokens","withdrawTo","UNWRAPPING","delegateTokens","_this7","governanceErc20Contract","GovernanceERC20__factory","delegate","undelegateTokens","_this8","t5","t6","t7","t8","getDelegatee","_getDelegatee","delegates","tokenVotingPlugin","tokenVotingProposal","_callee16","_this9","tokenVotingProposals","_callee16$","_context16","_callee15","_callee15$","_context15","_callee17","_callee17$","_context17","getToken","_getToken","_callee18","_callee18$","_context18","TokenVotingClientDecoding","TokenVotingClientEstimation","_delegateTokens","_callee4$","_undelegateTokens","_callee5$","TokenVotingClient","ApproveProposalStep","QueryMultisigProposal","QueryMultisigProposals","QueryMultisigVotingSettings","QueryMultisigMembers","toMultisigProposal","onlyListed","minApprovals","approvals","approvers","approver","slice","toMultisigProposalListItem","MultisigClientEncoding","addAddressesAction","multisigInterface","Multisig__factory","removeAddressesAction","updateMultisigVotingSettings","MultisigClientMethods","multisigContract","tryExecution","multisigContractInterface","approveProposal","APPROVING","multisigRepoContract","multisigPluginInstallItem","canApprove","_canApprove","approverAddressOrEns","multisigPlugin","multisigProposal","multisigProposals","MultisigClientDecoding","MultisigClientEstimation","_approveProposal","MultisigClient"],"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"}