import { ApplyUninstallationParams, GrantPermissionParams, GrantPermissionWithConditionParams, RegisterStandardCallbackParams, RevokePermissionParams, UpgradeToAndCallParams, WithdrawParams } from "../../types";
import { ApplyInstallationParams, ClientCore, DaoAction } from "../../client-common";
import { IClientEncoding } from "../../interfaces";
/**
 * Encoding module the SDK Generic Client
 */
export declare class ClientEncoding extends ClientCore implements IClientEncoding {
    /**
     * @param {string} daoAddress
     * @param {ApplyInstallationParams} params
     * @return {*}  {DaoAction}
     * @memberof ClientEncoding
     */
    applyInstallationAction(daoAddress: string, params: ApplyInstallationParams): DaoAction[];
    applyUninstallationAction(daoAddress: string, params: ApplyUninstallationParams): DaoAction[];
    /**
     * Computes the payload to be given when creating a proposal that grants a permission within a DAO
     *
     * @param {string} daoAddress
     * @param {GrantPermissionParams} params
     * @return {*}  {DaoAction}
     * @memberof ClientEncoding
     */
    grantAction(daoAddress: string, params: GrantPermissionParams): DaoAction;
    /**
     * Computes the payload to be given when creating a proposal that grants a permission within a DAO given a certain condition
     *
     * @param {string} daoAddress
     * @param {GrantPermissionWithConditionParams} params
     * @return {*}  {DaoAction}
     * @memberof ClientEncoding
     */
    grantWithConditionAction(daoAddress: string, params: GrantPermissionWithConditionParams): DaoAction;
    /**
     * Computes the payload to be given when creating a proposal that revokes a permission within a DAO
     *
     * @param {string} daoAddress
     * @param {RevokePermissionParams} params
     * @return {*}  {DaoAction}
     * @memberof ClientEncoding
     */
    revokeAction(daoAddress: string, params: RevokePermissionParams): DaoAction;
    /**
     * Computes the payload to be given when creating a proposal that withdraws ether from the DAO
     *
     * @param {string} recipientAddressOrEns
     * @param {WithdrawParams} value
     * @return {*}  {Promise<DaoAction>}
     * @memberof ClientEncoding
     */
    withdrawAction(params: WithdrawParams): Promise<DaoAction>;
    /**
     * Computes the payload to be given when creating a proposal that updates the metadata the DAO
     *
     * @param {string} daoAddressOrEns
     * @param {DaoMetadata} params
     * @return {*}  {Promise<DaoAction>}
     * @memberof ClientEncoding
     */
    updateDaoMetadataAction(daoAddressOrEns: string, metadataUri: string): Promise<DaoAction>;
    /**
     * Computes the payload to be given when creating a proposal that sets the dao uri
     *
     * @param {string} daoAddressOrEns
     * @param {string} daoUri
     * @return {*}  {DaoAction}
     * @memberof ClientEncoding
     */
    setDaoUriAction(daoAddressOrEns: string, daoUri: string): DaoAction;
    /**
     * Computes the payload to be given when creating a proposal that registers a new standard callback
     *
     * @param {string} daoAddressOrEns
     * @param {string} daoUri
     * @return {*}  {DaoAction}
     * @memberof ClientEncoding
     */
    registerStandardCallbackAction(daoAddressOrEns: string, params: RegisterStandardCallbackParams): DaoAction;
    /**
     * Computes the payload to be given when creating a proposal that sets the signature validator
     *
     * @param {string} daoAddressOrEns
     * @param {string} signatureValidator
     * @return {*}  {DaoAction}
     * @memberof ClientEncoding
     */
    setSignatureValidatorAction(daoAddressOrEns: string, signatureValidator: string): DaoAction;
    /**
     * Computes the payload to be given when creating a proposal that sets a new implementation for the proxy
     *
     * @param {string} daoAddressOrEns
     * @param {string} implementationAddress
     * @return {*}  {DaoAction}
     * @memberof ClientEncoding
     */
    upgradeToAction(daoAddressOrEns: string, implementationAddress: string): DaoAction;
    /**
     * Computes the payload to be given when creating a proposal that sets a new implementation for the proxy and calls the callback function with the specified data
     *
     * @param {string} daoAddressOrEns
     * @param {UpgradeToAndCallParams} params
     * @return {*}  {DaoAction}
     * @memberof ClientEncoding
     */
    upgradeToAndCallAction(daoAddressOrEns: string, params: UpgradeToAndCallParams): DaoAction;
}
