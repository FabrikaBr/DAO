import { AssetBalance, CreateDaoParams, DaoBalancesQueryParams, DaoCreationStepValue, DaoDepositStepValue, DaoDetails, DaoListItem, DaoMetadata, DaoQueryParams, DepositParams, HasPermissionParams, PluginQueryParams, PluginRepo, PluginRepoListItem, PrepareUninstallationParams, PrepareUninstallationStepValue, SetAllowanceParams, SetAllowanceStepValue, Transfer, TransferQueryParams } from "../../types";
import { ClientCore } from "../../client-common";
import { IClientMethods } from "../../interfaces";
/**
 * Methods module the SDK Generic Client
 */
export declare class ClientMethods extends ClientCore implements IClientMethods {
    /**
     * Creates a DAO with the given settings and plugins
     *
     * @param {CreateDaoParams} params
     * @return {*}  {AsyncGenerator<DaoCreationStepValue>}
     * @memberof ClientMethods
     */
    createDao(params: CreateDaoParams): AsyncGenerator<DaoCreationStepValue>;
    /**
     * Pins a metadata object into IPFS and retruns the generated hash
     *
     * @param {DaoMetadata} params
     * @return {*}  {Promise<string>}
     * @memberof ClientMethods
     */
    pinMetadata(params: DaoMetadata): Promise<string>;
    /**
     * Deposits ether or an ERC20 token into the DAO
     *
     * @param {DepositParams} params
     * @return {*}  {AsyncGenerator<DaoDepositStepValue>}
     * @memberof ClientMethods
     */
    deposit(params: DepositParams): AsyncGenerator<DaoDepositStepValue>;
    /**
     * Checks if the allowance is enough and updates it
     *
     * @param {SetAllowanceParams} params
     * @return {*}  {AsyncGenerator<SetAllowanceStepValue>}
     * @memberof ClientMethods
     */
    setAllowance(params: SetAllowanceParams): AsyncGenerator<SetAllowanceStepValue>;
    /**
     * Prepare uninstallation of a plugin
     *
     * @param {PrepareUninstallationParams} params
     * @return {*}  {AsyncGenerator<PrepareUninstallationStepValue>}
     * @memberof ClientMethods
     */
    prepareUninstallation(params: PrepareUninstallationParams): AsyncGenerator<PrepareUninstallationStepValue>;
    /**
     * Checks whether a role is granted by the current DAO's ACL settings
     *
     * @param {HasPermissionParams} params
     * @return {*}  {Promise<boolean>}
     * @memberof ClientMethods
     */
    hasPermission(params: HasPermissionParams): Promise<boolean>;
    /**
     * Retrieves metadata for DAO with given identifier (address or ens domain)
     *
     * @param {string} daoAddressOrEns
     * @return {*}  {(Promise<DaoDetails | null>)}
     * @memberof ClientMethods
     */
    getDao(daoAddressOrEns: string): Promise<DaoDetails | null>;
    /**
     * Retrieves metadata for DAO with given identifier (address or ens domain)
     *
     * @param {DaoQueryParams} {
     *     limit = 10,
     *     skip = 0,
     *     direction = SortDirection.ASC,
     *     sortBy = DaoSortBy.CREATED_AT,
     *   }
     * @return {*}  {Promise<DaoListItem[]>}
     * @memberof ClientMethods
     */
    getDaos({ limit, skip, direction, sortBy, }: DaoQueryParams): Promise<DaoListItem[]>;
    /**
     * Retrieves the asset balances of the given DAO, by default, ETH, DAI, USDC and USDT on Mainnet
     *
     * @param {DaoBalancesQueryParams} {
     *     daoAddressOrEns,
     *     limit = 10,
     *     skip = 0,
     *     direction = SortDirection.ASC,
     *     sortBy = AssetBalanceSortBy.LAST_UPDATED,
     *   }
     * @return {*}  {(Promise<AssetBalance[] | null>)}
     * @memberof ClientMethods
     */
    getDaoBalances({ daoAddressOrEns, limit, skip, direction, sortBy, }: DaoBalancesQueryParams): Promise<AssetBalance[] | null>;
    /**
     * Retrieves the list of asset transfers to and from the given DAO (by default, from ETH, DAI, USDC and USDT, on Mainnet)
     *
     * @param {TransferQueryParams} {
     *     daoAddressOrEns,
     *     type,
     *     limit = 10,
     *     skip = 0,
     *     direction = SortDirection.ASC,
     *     sortBy = TransferSortBy.CREATED_AT,
     *   }
     * @return {*}  {(Promise<Transfer[] | null>)}
     * @memberof ClientMethods
     */
    getDaoTransfers({ daoAddressOrEns, type, limit, skip, direction, sortBy, }: TransferQueryParams): Promise<Transfer[] | null>;
    /**
     * Retrieves the list of plugins available on the PluginRegistry
     *
     * @param {PluginQueryParams} {
     *     limit = 10,
     *     skip = 0,
     *     direction = SortDirection.ASC,
     *     sortBy = PluginSortBy.SUBDOMAIN,
     *     subdomain
     *   }
     * @return {*}  {(Promise<PluginRepo[] | null>)}
     * @memberof ClientMethods
     */
    getPlugins({ limit, skip, direction, sortBy, subdomain, }?: PluginQueryParams): Promise<PluginRepoListItem[]>;
    /**
     * Get plugin details given an address, release and build
     *
     * @param {string} pluginAddress
     * @return {*}  {Promise<PluginRepo>}
     * @memberof ClientMethods
     */
    getPlugin(pluginAddress: string): Promise<PluginRepo>;
}
