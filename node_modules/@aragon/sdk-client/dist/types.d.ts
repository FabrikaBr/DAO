import { ApplyInstallationParamsBase, Pagination, PluginInstallItem, TokenType } from "./client-common";
export declare type CreateDaoParams = {
    metadataUri: string;
    daoUri?: string;
    ensSubdomain: string;
    trustedForwarder?: string;
    plugins: PluginInstallItem[];
};
export declare enum DaoCreationSteps {
    CREATING = "creating",
    DONE = "done"
}
export declare type DaoCreationStepValue = {
    key: DaoCreationSteps.CREATING;
    txHash: string;
} | {
    key: DaoCreationSteps.DONE;
    address: string;
    pluginAddresses: string[];
};
export declare type DaoResourceLink = {
    name: string;
    url: string;
};
export declare type DaoMetadata = {
    name: string;
    description: string;
    avatar?: string;
    links: DaoResourceLink[];
};
export declare type DaoDetails = {
    address: string;
    ensDomain: string;
    metadata: DaoMetadata;
    creationDate: Date;
    plugins: InstalledPluginListItem[];
};
export declare type DaoListItem = {
    address: string;
    ensDomain: string;
    metadata: {
        name: string;
        description: string;
        avatar?: string;
    };
    plugins: InstalledPluginListItem[];
};
export declare type DaoQueryParams = Pagination & {
    sortBy?: DaoSortBy;
};
export declare enum DaoSortBy {
    CREATED_AT = "createdAt",
    SUBDOMAIN = "subdomain"
}
export declare type InstalledPluginListItem = {
    id: string;
    instanceAddress: string;
    release: number;
    build: number;
};
export declare enum PluginSortBy {
    SUBDOMAIN = "subdomain"
}
export declare type PluginQueryParams = Pagination & {
    sortBy?: PluginSortBy;
    subdomain?: string;
};
export declare type PluginRepoReleaseMetadata = {
    name: string;
    description: string;
    images: Object;
};
export declare type PluginRepoBuildMetadata = {
    ui: string;
    change: string;
    pluginSetupABI: {
        prepareInstallation: string[];
        prepareUpdate: string[];
        prepareUninstallation: string[];
    };
};
export declare type PluginRepoRelease = {
    release: number;
    metadata: PluginRepoReleaseMetadata;
    currentBuild: number;
};
export declare type PluginRepoListItem = {
    address: string;
    subdomain: string;
    releases: PluginRepoRelease[];
};
export declare type PluginRepo = {
    address: string;
    subdomain: string;
    current: {
        build: {
            number: number;
            metadata: PluginRepoBuildMetadata;
        };
        release: {
            number: number;
            metadata: PluginRepoReleaseMetadata;
        };
    };
};
declare type DepositBaseParams = {
    daoAddressOrEns: string;
};
export declare type DepositEthParams = DepositBaseParams & {
    type: TokenType.NATIVE;
    amount: bigint;
};
export declare type DepositErc20Params = DepositBaseParams & {
    type: TokenType.ERC20;
    tokenAddress: string;
    amount: bigint;
};
export declare type DepositParams = DepositEthParams | DepositErc20Params;
export declare enum DaoDepositSteps {
    CHECKED_ALLOWANCE = "checkedAllowance",
    DEPOSITING = "depositing",
    DONE = "done"
}
export declare type DaoDepositStepValue = SetAllowanceStepValue | {
    key: DaoDepositSteps.CHECKED_ALLOWANCE;
    allowance: bigint;
} | {
    key: DaoDepositSteps.DEPOSITING;
    txHash: string;
} | {
    key: DaoDepositSteps.DONE;
    amount: bigint;
};
declare type WithdrawParamsBase = {
    recipientAddressOrEns: string;
};
declare type WithdrawEthParams = WithdrawParamsBase & {
    type: TokenType.NATIVE;
    amount: bigint;
};
declare type WithdrawErc20Params = WithdrawParamsBase & {
    type: TokenType.ERC20;
    amount: bigint;
    tokenAddress: string;
};
export declare type WithdrawParams = WithdrawEthParams | WithdrawErc20Params;
declare type AssetBalanceBase = {
    address: string;
    name: string;
    symbol: string;
    updateDate: Date;
};
declare type NativeAssetBalance = {
    type: TokenType.NATIVE;
    balance: bigint;
    updateDate: Date;
};
declare type Erc20AssetBalance = AssetBalanceBase & {
    type: TokenType.ERC20;
    balance: bigint;
    decimals: number;
};
declare type Erc721AssetBalance = AssetBalanceBase & {
    type: TokenType.ERC721;
};
export declare type DaoBalancesQueryParams = Pagination & {
    sortBy?: AssetBalanceSortBy;
    daoAddressOrEns?: string;
};
export declare enum AssetBalanceSortBy {
    LAST_UPDATED = "lastUpdated"
}
export declare type AssetBalance = NativeAssetBalance | Erc20AssetBalance | Erc721AssetBalance;
declare type TokenTransferBase = {
    creationDate: Date;
    transactionId: string;
    to: string;
    from: string;
};
declare type TokenBase = {
    address: string;
    name: string;
    symbol: string;
};
declare type NativeTokenTransfer = TokenTransferBase & {
    tokenType: TokenType.NATIVE;
    amount: bigint;
};
declare type Erc721TokenTransfer = TokenTransferBase & {
    tokenType: TokenType.ERC721;
    token: TokenBase;
};
declare type Erc20TokenTransfer = TokenTransferBase & {
    tokenType: TokenType.ERC20;
    amount: bigint;
    token: TokenBase & {
        decimals: number;
    };
};
export declare enum TransferType {
    DEPOSIT = "deposit",
    WITHDRAW = "withdraw"
}
export declare type Deposit = (NativeTokenTransfer | Erc20TokenTransfer | Erc721TokenTransfer) & {
    type: TransferType.DEPOSIT;
};
export declare type Withdraw = (NativeTokenTransfer | Erc20TokenTransfer | Erc721TokenTransfer) & {
    type: TransferType.WITHDRAW;
    proposalId: string;
};
export declare type TransferQueryParams = Pagination & {
    sortBy?: TransferSortBy;
    type?: TransferType;
    daoAddressOrEns?: string;
};
export declare enum TransferSortBy {
    CREATED_AT = "createdAt"
}
export declare type Transfer = Deposit | Withdraw;
export declare type SetAllowanceParams = {
    spender: string;
    amount: bigint;
    tokenAddress: string;
};
export declare enum SetAllowanceSteps {
    SETTING_ALLOWANCE = "settingAllowance",
    ALLOWANCE_SET = "allowanceSet"
}
export declare type SetAllowanceStepValue = {
    key: SetAllowanceSteps.SETTING_ALLOWANCE;
    txHash: string;
} | {
    key: SetAllowanceSteps.ALLOWANCE_SET;
    allowance: bigint;
};
export declare type PrepareUninstallationParams = {
    daoAddressOrEns: string;
    pluginAddress: string;
    pluginInstallationIndex?: number;
    uninstallationParams?: any[];
    uninstallationAbi?: string[];
};
export declare enum PrepareUninstallationSteps {
    PREPARING = "preparing",
    DONE = "done"
}
export declare type PrepareUninstallationStepValue = {
    key: PrepareUninstallationSteps.PREPARING;
    txHash: string;
} | {
    key: PrepareUninstallationSteps.DONE;
} & ApplyUninstallationParams;
export declare type ApplyUninstallationParams = ApplyInstallationParamsBase;
export declare type DecodedApplyUninstallationParams = ApplyInstallationParamsBase;
declare type PermissionParamsBase = {
    where: string;
    who: string;
    permission: string;
};
declare type PermissionDecodedParamsBase = PermissionParamsBase & {
    permissionId: string;
};
export declare type GrantPermissionParams = PermissionParamsBase;
export declare type RevokePermissionParams = PermissionParamsBase;
export declare type GrantPermissionDecodedParams = PermissionDecodedParamsBase;
export declare type RevokePermissionDecodedParams = PermissionDecodedParamsBase;
export declare type GrantPermissionWithConditionParams = PermissionParamsBase & {
    condition: string;
};
export declare type GrantPermissionWithConditionDecodedParams = PermissionParamsBase & {
    condition: string;
    permissionId: string;
};
export declare type HasPermissionParams = PermissionParamsBase & {
    daoAddressOrEns: string;
    data?: Uint8Array;
};
export declare type RegisterStandardCallbackParams = {
    interfaceId: string;
    callbackSelector: string;
    magicNumber: string;
};
export declare type UpgradeToAndCallParams = {
    implementationAddress: string;
    data: Uint8Array;
};
export {};
