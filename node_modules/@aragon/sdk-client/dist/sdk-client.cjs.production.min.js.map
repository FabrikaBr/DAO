{"version":3,"file":"sdk-client.cjs.production.min.js","sources":["../src/internal/abi/erc20.ts","../src/types.ts","../src/internal/types.ts","../src/internal/graphql-queries/dao.ts","../src/internal/graphql-queries/balances.ts","../src/internal/graphql-queries/transfer.ts","../src/internal/graphql-queries/plugin.ts","../src/client-common/types/plugin.ts","../src/client-common/types/common.ts","../src/client-common/modules/web3.ts","../src/client-common/modules/ipfs.ts","../src/client-common/graphql-queries/status.ts","../src/client-common/modules/graphql.ts","../src/client-common/core.ts","../src/client-common/constants.ts","../src/client-common/context.ts","../src/client-common/context-plugin.ts","../src/client-common/utils.ts","../src/client-common/encoding.ts","../src/constants.ts","../src/internal/utils.ts","../src/internal/constants.ts","../src/internal/client/methods.ts","../src/internal/client/encoding.ts","../src/internal/client/estimation.ts","../src/internal/client/decoding.ts","../src/client.ts","../src/addresslistVoting/internal/graphql-queries/members.ts","../src/addresslistVoting/internal/graphql-queries/proposal.ts","../src/addresslistVoting/internal/graphql-queries/settings.ts","../src/addresslistVoting/internal/utils.ts","../src/tokenVoting/types.ts","../src/tokenVoting/internal/types.ts","../src/addresslistVoting/internal/client/encoding.ts","../src/addresslistVoting/internal/client/methods.ts","../src/addresslistVoting/internal/constants.ts","../src/addresslistVoting/internal/client/decoding.ts","../src/addresslistVoting/internal/client/estimation.ts","../src/addresslistVoting/client.ts","../src/tokenVoting/internal/graphql-queries/proposal.ts","../src/tokenVoting/internal/graphql-queries/settings.ts","../src/tokenVoting/internal/graphql-queries/token.ts","../src/tokenVoting/internal/graphql-queries/members.ts","../src/tokenVoting/internal/utils.ts","../src/multisig/types.ts","../src/tokenVoting/internal/client/encoding.ts","../src/tokenVoting/internal/client/methods.ts","../src/tokenVoting/internal/constants.ts","../src/tokenVoting/internal/client/decoding.ts","../src/tokenVoting/internal/client/estimation.ts","../src/tokenVoting/client.ts","../src/multisig/internal/graphql-queries/proposal.ts","../src/multisig/internal/graphql-queries/settings.ts","../src/multisig/internal/graphql-queries/members.ts","../src/multisig/internal/utils.ts","../src/multisig/internal/client/encoding.ts","../src/multisig/internal/client/methods.ts","../src/multisig/internal/constants.ts","../src/multisig/internal/client/decoding.ts","../src/multisig/internal/client/estimation.ts","../src/multisig/client.ts"],"sourcesContent":["import { ContractInterface } from \"@ethersproject/contracts\";\n\nexport const erc20ContractAbi: ContractInterface = [\n  {\n    name: \"Transfer\",\n    inputs: [\n      { type: \"address\", name: \"sender\", indexed: true },\n      { type: \"address\", name: \"receiver\", indexed: true },\n      { type: \"uint256\", name: \"value\", indexed: false },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    name: \"Approval\",\n    inputs: [\n      { type: \"address\", name: \"owner\", indexed: true },\n      { type: \"address\", name: \"spender\", indexed: true },\n      { type: \"uint256\", name: \"value\", indexed: false },\n    ],\n    anonymous: false,\n    type: \"event\",\n  },\n  {\n    name: \"transfer\",\n    outputs: [{ type: \"bool\", name: \"\" }],\n    inputs: [\n      { type: \"address\", name: \"_to\" },\n      { type: \"uint256\", name: \"_value\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    name: \"approve\",\n    outputs: [{ type: \"bool\", name: \"\" }],\n    inputs: [\n      { type: \"address\", name: \"_spender\" },\n      { type: \"uint256\", name: \"_value\" },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    name: \"symbol\",\n    outputs: [{ type: \"string\", name: \"\" }],\n    inputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    name: \"decimals\",\n    outputs: [{ type: \"uint256\", name: \"\" }],\n    inputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    name: \"balanceOf\",\n    outputs: [{ type: \"uint256\", name: \"\" }],\n    inputs: [{ type: \"address\", name: \"arg0\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    name: \"allowance\",\n    outputs: [{ type: \"uint256\", name: \"\" }],\n    inputs: [\n      { type: \"address\", name: \"arg0\" },\n      { type: \"address\", name: \"arg1\" },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    name: \"totalSupply\",\n    outputs: [{ type: \"uint256\", name: \"\" }],\n    inputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","import {\n  ApplyInstallationParamsBase,\n  Pagination,\n  PluginInstallItem,\n  TokenType,\n} from \"./client-common\";\n\n/* DAO creation */\nexport type CreateDaoParams = {\n  metadataUri: string;\n  daoUri?: string;\n  ensSubdomain: string;\n  trustedForwarder?: string;\n  plugins: PluginInstallItem[];\n};\n\nexport enum DaoCreationSteps {\n  CREATING = \"creating\",\n  DONE = \"done\",\n}\n\nexport type DaoCreationStepValue =\n  | { key: DaoCreationSteps.CREATING; txHash: string }\n  | { key: DaoCreationSteps.DONE; address: string; pluginAddresses: string[] };\n\n/* DAOs */\nexport type DaoResourceLink = { name: string; url: string };\nexport type DaoMetadata = {\n  name: string;\n  description: string;\n  avatar?: string;\n  links: DaoResourceLink[];\n};\nexport type DaoDetails = {\n  address: string;\n  ensDomain: string;\n  metadata: DaoMetadata;\n  creationDate: Date;\n  plugins: InstalledPluginListItem[];\n};\n\nexport type DaoListItem = {\n  address: string;\n  ensDomain: string;\n  metadata: {\n    name: string;\n    description: string;\n    avatar?: string;\n  };\n  plugins: InstalledPluginListItem[];\n};\n\nexport type DaoQueryParams = Pagination & {\n  sortBy?: DaoSortBy;\n};\n\nexport enum DaoSortBy {\n  CREATED_AT = \"createdAt\",\n  SUBDOMAIN = \"subdomain\",\n  // POPULARITY = \"totalProposals\", // currently defined as number of proposals\n}\n\n/* Plugins */\n\nexport type InstalledPluginListItem = {\n  id: string;\n  instanceAddress: string;\n  release: number;\n  build: number;\n};\n\nexport enum PluginSortBy {\n  SUBDOMAIN = \"subdomain\",\n}\n\nexport type PluginQueryParams = Pagination & {\n  sortBy?: PluginSortBy;\n  subdomain?: string;\n};\n\n/* Plugin repos */\n\nexport type PluginRepoReleaseMetadata = {\n  name: string;\n  description: string;\n  images: Object; // TODO specify parameters\n};\n\nexport type PluginRepoBuildMetadata = {\n  ui: string;\n  change: string;\n  pluginSetupABI: {\n    prepareInstallation: string[];\n    prepareUpdate: string[];\n    prepareUninstallation: string[];\n  };\n};\n\nexport type PluginRepoRelease = {\n  release: number;\n  metadata: PluginRepoReleaseMetadata;\n  currentBuild: number;\n};\n\nexport type PluginRepoListItem = {\n  address: string;\n  subdomain: string;\n  releases: PluginRepoRelease[];\n};\n\nexport type PluginRepo = {\n  address: string;\n  subdomain: string;\n  current: {\n    build: {\n      number: number;\n      metadata: PluginRepoBuildMetadata;\n    };\n    release: {\n      number: number;\n      metadata: PluginRepoReleaseMetadata;\n    };\n  };\n};\n\n/* Deposits */\ntype DepositBaseParams = {\n  daoAddressOrEns: string;\n};\n\nexport type DepositEthParams = DepositBaseParams & {\n  type: TokenType.NATIVE;\n  amount: bigint;\n};\nexport type DepositErc20Params = DepositBaseParams & {\n  type: TokenType.ERC20;\n  tokenAddress: string;\n  amount: bigint;\n};\n// export type DepositErc721Params = DepositBaseParams & {\n//   type: TokenType.ERC721;\n//   tokenAddress: string;\n// };\n\nexport type DepositParams = DepositEthParams | DepositErc20Params; // | DepositErc721Params;\n\nexport enum DaoDepositSteps {\n  CHECKED_ALLOWANCE = \"checkedAllowance\",\n  DEPOSITING = \"depositing\",\n  DONE = \"done\",\n}\n\nexport type DaoDepositStepValue =\n  | SetAllowanceStepValue\n  | { key: DaoDepositSteps.CHECKED_ALLOWANCE; allowance: bigint }\n  | { key: DaoDepositSteps.DEPOSITING; txHash: string }\n  | { key: DaoDepositSteps.DONE; amount: bigint };\n\n/* Withdrawals */\ntype WithdrawParamsBase = {\n  recipientAddressOrEns: string;\n};\n\ntype WithdrawEthParams = WithdrawParamsBase & {\n  type: TokenType.NATIVE;\n  amount: bigint;\n};\n\ntype WithdrawErc20Params = WithdrawParamsBase & {\n  type: TokenType.ERC20;\n  amount: bigint;\n  tokenAddress: string;\n};\n\nexport type WithdrawParams = WithdrawEthParams | WithdrawErc20Params;\n\n/* Balances */\ntype AssetBalanceBase = {\n  address: string;\n  name: string;\n  symbol: string;\n  updateDate: Date;\n};\n\ntype NativeAssetBalance = {\n  type: TokenType.NATIVE;\n  balance: bigint;\n  updateDate: Date;\n};\ntype Erc20AssetBalance = AssetBalanceBase & {\n  type: TokenType.ERC20;\n  balance: bigint;\n  decimals: number;\n};\ntype Erc721AssetBalance = AssetBalanceBase & {\n  type: TokenType.ERC721;\n};\n\nexport type DaoBalancesQueryParams = Pagination & {\n  sortBy?: AssetBalanceSortBy;\n  daoAddressOrEns?: string;\n};\nexport enum AssetBalanceSortBy {\n  LAST_UPDATED = \"lastUpdated\",\n}\n\nexport type AssetBalance =\n  | NativeAssetBalance\n  | Erc20AssetBalance\n  | Erc721AssetBalance;\n\n/* Transfers */\n\ntype TokenTransferBase = {\n  creationDate: Date;\n  transactionId: string;\n  to: string;\n  from: string;\n};\n\ntype TokenBase = {\n  address: string;\n  name: string;\n  symbol: string;\n};\n\ntype NativeTokenTransfer = TokenTransferBase & {\n  tokenType: TokenType.NATIVE;\n  amount: bigint;\n};\n\ntype Erc721TokenTransfer = TokenTransferBase & {\n  tokenType: TokenType.ERC721;\n  token: TokenBase;\n};\n\ntype Erc20TokenTransfer = TokenTransferBase & {\n  tokenType: TokenType.ERC20;\n  amount: bigint;\n  token: TokenBase & {\n    decimals: number;\n  };\n};\n\nexport enum TransferType {\n  DEPOSIT = \"deposit\",\n  WITHDRAW = \"withdraw\",\n}\n\nexport type Deposit =\n  & (NativeTokenTransfer | Erc20TokenTransfer | Erc721TokenTransfer)\n  & {\n    type: TransferType.DEPOSIT;\n  };\n\nexport type Withdraw =\n  & (NativeTokenTransfer | Erc20TokenTransfer | Erc721TokenTransfer)\n  & {\n    type: TransferType.WITHDRAW;\n    proposalId: string;\n  };\n\nexport type TransferQueryParams = Pagination & {\n  sortBy?: TransferSortBy;\n  type?: TransferType;\n  daoAddressOrEns?: string;\n};\nexport enum TransferSortBy {\n  CREATED_AT = \"createdAt\",\n}\n\nexport type Transfer = Deposit | Withdraw;\n\n/* Allowance */\nexport type SetAllowanceParams = {\n  spender: string;\n  amount: bigint;\n  tokenAddress: string;\n};\n\nexport enum SetAllowanceSteps {\n  SETTING_ALLOWANCE = \"settingAllowance\",\n  ALLOWANCE_SET = \"allowanceSet\",\n}\n\nexport type SetAllowanceStepValue =\n  | { key: SetAllowanceSteps.SETTING_ALLOWANCE; txHash: string }\n  | { key: SetAllowanceSteps.ALLOWANCE_SET; allowance: bigint };\n\n/* Uninstallation */\nexport type PrepareUninstallationParams = {\n  daoAddressOrEns: string;\n  pluginAddress: string;\n  pluginInstallationIndex?: number;\n  uninstallationParams?: any[];\n  uninstallationAbi?: string[];\n};\nexport enum PrepareUninstallationSteps {\n  PREPARING = \"preparing\",\n  DONE = \"done\",\n}\nexport type PrepareUninstallationStepValue =\n  | { key: PrepareUninstallationSteps.PREPARING; txHash: string }\n  | {\n    key: PrepareUninstallationSteps.DONE;\n  } & ApplyUninstallationParams;\n\nexport type ApplyUninstallationParams = ApplyInstallationParamsBase;\nexport type DecodedApplyUninstallationParams = ApplyInstallationParamsBase;\n\n/* Permissions */\ntype PermissionParamsBase = {\n  where: string;\n  who: string;\n  permission: string;\n};\ntype PermissionDecodedParamsBase = PermissionParamsBase & {\n  permissionId: string;\n};\nexport type GrantPermissionParams = PermissionParamsBase;\nexport type RevokePermissionParams = PermissionParamsBase;\nexport type GrantPermissionDecodedParams = PermissionDecodedParamsBase;\nexport type RevokePermissionDecodedParams = PermissionDecodedParamsBase;\n\nexport type GrantPermissionWithConditionParams = PermissionParamsBase & {\n  condition: string;\n};\nexport type GrantPermissionWithConditionDecodedParams = PermissionParamsBase & {\n  condition: string;\n  permissionId: string;\n};\n\nexport type HasPermissionParams = PermissionParamsBase & {\n  daoAddressOrEns: string;\n  data?: Uint8Array;\n};\n\nexport type RegisterStandardCallbackParams = {\n  interfaceId: string;\n  callbackSelector: string;\n  magicNumber: string;\n};\n\nexport type UpgradeToAndCallParams = {\n  implementationAddress: string;\n  data: Uint8Array;\n};\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { TransferType } from \"../types\";\n\nexport type SubgraphPluginListItem = {\n  appliedPreparation: {\n    pluginAddress: string;\n  };\n  appliedPluginRepo: {\n    subdomain: string;\n  };\n  appliedVersion: {\n    build: number;\n    release: {\n      release: number;\n    };\n  };\n};\n\ntype SubgraphDaoBase = {\n  id: string;\n  subdomain: string;\n  metadata: string;\n  plugins: SubgraphPluginListItem[];\n};\n\nexport type SubgraphDao = SubgraphDaoBase & {\n  createdAt: string;\n};\n\nexport type SubgraphDaoListItem = SubgraphDaoBase;\n\nexport type SubgraphBalance = {\n  __typename: string;\n  token: {\n    id: string;\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  balance: string;\n  lastUpdated: string;\n};\n\nexport enum SubgraphTransferType {\n  DEPOSIT = \"Deposit\",\n  WITHDRAW = \"Withdraw\",\n}\n\nexport type SubgraphTransferListItem = {\n  from: string;\n  to: string;\n  type: SubgraphTransferType;\n  createdAt: string;\n  txHash: string;\n  proposal: {\n    id: string | null;\n  };\n  amount: string;\n  token: SubgraphToken;\n  __typename: string;\n};\n\nexport type SubgraphToken = {\n  id: string;\n  name: string;\n  symbol: string;\n  decimals: number;\n};\nexport const SubgraphTransferTypeMap: Map<\n  TransferType,\n  SubgraphTransferType\n> = new Map([\n  [TransferType.DEPOSIT, SubgraphTransferType.DEPOSIT],\n  [TransferType.WITHDRAW, SubgraphTransferType.WITHDRAW],\n]);\n\nexport type ContractPermissionParams = [string, string, string];\nexport type ContractPermissionWithConditionParams = [\n  string,\n  string,\n  string,\n  string,\n];\nexport type ContractWithdrawParams = [string, string, BigNumber, string];\n\nexport type SubgraphPluginRepoReleaseListItem = {\n  release: number;\n  metadata: string;\n  builds: {\n    build: number;\n  }[];\n};\n\nexport type SubgraphPluginRepoRelease = SubgraphPluginRepoReleaseListItem & {\n  builds: {\n    build: number;\n    metadata: string;\n  }[];\n};\n\nexport type SubgraphPluginRepoListItem = {\n  id: string;\n  subdomain: string;\n  releases: SubgraphPluginRepoReleaseListItem[];\n};\n\nexport type SubgraphPluginRepo = SubgraphPluginRepoListItem & {\n  releases: SubgraphPluginRepoRelease[];\n};\n\nexport type SubgraphPluginVersion = {\n  release: {\n    release: number;\n  };\n  metadata: string;\n  build: number;\n};\n\nexport type SubgraphPluginPreparation = {\n  helpers: string[];\n  pluginRepo: {\n    id: string;\n  };\n};\n\nexport type SubgraphPluginInstallation = {\n  appliedVersion: SubgraphPluginVersion;\n  appliedPreparation: SubgraphPluginPreparation;\n};\n","import { gql } from \"graphql-request\";\n\nexport const QueryDao = gql`\n  query Dao($address: ID!) {\n    dao(id: $address){\n      id\n      subdomain\n      metadata\n      createdAt\n      plugins{\n        appliedPreparation {\n          pluginAddress\n        }\n        appliedPluginRepo {\n          subdomain\n        }\n        appliedVersion{\n          build\n          release {\n            release\n          }\n        }\n      }\n    }\n  }\n`;\nexport const QueryDaos = gql`\n  query Daos ($limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: Dao_orderBy!) {\n    daos(first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n      id\n      subdomain\n      metadata\n      plugins{\n        appliedPreparation {\n          pluginAddress\n        }\n        appliedPluginRepo {\n          subdomain\n        }\n        appliedVersion{\n          build\n          release {\n            release\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const QueryDaoTransfersByAddress = gql`\nquery DaoTransfersByAddress($address: ID!) {\n  dao(id: $address) {\n    withdraws {\n      id\n      token {\n        symbol\n        decimals\n        symbol\n      }\n      to\n      dao {\n        id\n        subdomain\n      }\n      amount\n      reference\n      transaction\n      creationDate\n    }\n    deposits {\n      id\n      token {\n        symbol\n        decimals\n        symbol\n      }\n      sender\n      dao {\n        id\n        subdomain\n      }\n      amount\n      reference\n      transaction\n      creationDate\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenBalances = gql`\nquery TokenBalances($where: TokenBalance_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenBalance_orderBy!) {\n  tokenBalances (where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy) {\n    lastUpdated\n    __typename\n    ... on ERC20Balance {\n      balance\n      token {\n        name\n        decimals\n        symbol\n        id\n      }\n    }\n    ... on ERC721Balance {\n      token {\n        name\n        symbol\n        id\n      }\n    }\n    ... on NativeBalance {\n      balance\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenTransfers = gql`\nquery TokenTransfers($where: TokenTransfer_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenTransfer_orderBy!) {\n  tokenTransfers (where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy) {\n    from\n    to\n    type\n    createdAt\n    txHash\n    proposal{\n      id\n    }\n    __typename\n    ... on ERC20Transfer {\n      amount\n      token {\n        id\n        name\n        symbol\n        decimals\n      }\n    }\n    ... on ERC721Transfer {\n      token{\n      \tid\n        name\n        symbol\n      }\n      \n    }\n    ... on NativeTransfer {\n      amount\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryPlugins = gql`\nquery Plugins($where: PluginRepo_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: PluginRepo_orderBy!) {\n  pluginRepos(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    subdomain\n    releases{\n      release\n      metadata\n      builds{\n        build\n      }\n    }\n  }\n}\n`;\n\nexport const QueryPlugin = gql`\nquery Plugin($id: ID!) {\n  pluginRepo(id:$id){\n    subdomain\n    releases(orderBy: release, orderDirection: desc, first: 1){\n      release\n      metadata\n      builds(orderBy: build, orderDirection: desc, first: 1){\n        build\n        metadata\n      }\n    }\n  }\n}\n`;\n\nexport const QueryIPlugin = gql`\nquery IPlugin($address: ID!, $where: IPlugin_filter!) {\n\tiplugin(id:$address, where:$where){\n    installations(where:{state: Installed}) {\n      appliedPreparation{\n        helpers\n        pluginRepo {\n          id\n        }\n      }\n     \tappliedVersion {\n        metadata\n        build\n        release{\n          release\n        }\n      }\n    }   \n  }\n}\n`;\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { DaoAction, Pagination } from \"./common\";\n\n/**\n * Contains the states of a proposal. Note that on chain\n * proposals cannot be in draft state\n */\nexport enum ProposalStatus {\n  ACTIVE = \"Active\",\n  PENDING = \"Pending\",\n  SUCCEEDED = \"Succeeded\",\n  EXECUTED = \"Executed\",\n  DEFEATED = \"Defeated\",\n}\n\nexport enum VoteValues {\n  // NONE = 0,\n  ABSTAIN = 1,\n  YES = 2,\n  NO = 3,\n}\n\n// TYPES\n\nexport type MajorityVotingSettingsBase = {\n  /** Float between 0 and 1 */\n  supportThreshold: number;\n  /** Float between 0 and 1 */\n  minParticipation: number;\n};\n\nexport type MajorityVotingProposalSettings = MajorityVotingSettingsBase & {\n  duration: number;\n};\nexport type MajorityVotingSettings = MajorityVotingSettingsBase & {\n  /* default is standard */\n  votingMode?: VotingMode;\n  /* minimum is 3600 */\n  minDuration: number;\n  /* default is 0 */\n  minProposerVotingPower?: bigint;\n};\n\nexport type VotingSettings = MajorityVotingSettings;\n\nexport enum VotingMode {\n  STANDARD = \"Standard\",\n  EARLY_EXECUTION = \"EarlyExecution\",\n  VOTE_REPLACEMENT = \"VoteReplacement\",\n}\n\nexport type ContractVotingSettings = [\n  BigNumber, // votingMode\n  BigNumber, // supportThreshold\n  BigNumber, // minParticipation\n  BigNumber, // minDuration\n  BigNumber, // minProposerVotingPower\n];\n\nexport type CreateProposalBaseParams = {\n  pluginAddress: string;\n  actions?: DaoAction[];\n  /** For every action item, denotes whether its execution could fail\n   * without aborting the whole proposal execution */\n  failSafeActions?: Array<boolean>;\n  metadataUri: string;\n};\n\nexport type CreateMajorityVotingProposalParams = CreateProposalBaseParams & {\n  startDate?: Date;\n  endDate?: Date;\n  executeOnPass?: boolean;\n  creatorVote?: VoteValues;\n};\n\nexport type VoteProposalParams = {\n  vote: VoteValues;\n  proposalId: string;\n};\n\nexport type CanVoteParams = {\n  proposalId: string;\n  voterAddressOrEns: string;\n  vote: VoteValues;\n};\n\n/**\n * Contains the human-readable information about a proposal\n */\nexport type ProposalMetadata = {\n  title: string;\n  summary: string;\n  description: string;\n  resources: Array<{ url: string; name: string }>;\n  media?: {\n    header?: string;\n    logo?: string;\n  };\n};\n\n/**\n * Contains the human-readable information about a proposal\n */\nexport type ProposalMetadataSummary = {\n  title: string;\n  summary: string;\n};\n\n// Long version\nexport type ProposalBase = {\n  id: string;\n  dao: {\n    address: string;\n    name: string;\n  };\n  creatorAddress: string;\n  metadata: ProposalMetadata;\n  startDate: Date;\n  endDate: Date;\n  creationDate: Date;\n  actions: Array<DaoAction>;\n  status: ProposalStatus;\n  creationBlockNumber: number;\n  executionDate: Date | null;\n  executionBlockNumber: number | null;\n  executionTxHash: string | null;\n};\n\nexport type ProposalVoteBase = {\n  address: string;\n  vote: VoteValues;\n  voteReplaced: boolean;\n};\n\n// Short version\nexport type ProposalListItemBase = {\n  id: string;\n  dao: {\n    address: string;\n    name: string;\n  };\n  creatorAddress: string;\n  metadata: ProposalMetadataSummary;\n  startDate: Date;\n  endDate: Date;\n  status: ProposalStatus;\n};\n\nexport enum SubgraphVoteValues {\n  YES = \"Yes\",\n  NO = \"No\",\n  ABSTAIN = \"Abstain\",\n}\nexport const SubgraphVoteValuesMap: Map<\n  SubgraphVoteValues,\n  VoteValues\n> = new Map([\n  [SubgraphVoteValues.YES, VoteValues.YES],\n  [SubgraphVoteValues.NO, VoteValues.NO],\n  [SubgraphVoteValues.ABSTAIN, VoteValues.ABSTAIN],\n]);\n\nexport type SubgraphVoterListItemBase = {\n  voter: {\n    address: string;\n  };\n  voteReplaced: boolean;\n  voteOption: SubgraphVoteValues;\n};\n\nexport type SubgraphAction = {\n  to: string;\n  value: string;\n  data: string;\n};\n\nexport type SubgraphProposalBase = {\n  id: string;\n  dao: {\n    id: string;\n    subdomain: string;\n  };\n  creator: string;\n  metadata: string;\n  yes: string;\n  no: string;\n  abstain: string;\n  startDate: string;\n  endDate: string;\n  executed: boolean;\n  potentiallyExecutable: boolean;\n};\n\nexport interface IComputeStatusProposal {\n  startDate: string;\n  endDate: string;\n  executed: boolean;\n  earlyExecutable?: boolean;\n  potentiallyExecutable: boolean;\n}\n\nexport type ProposalQueryParams = Pagination & {\n  sortBy?: ProposalSortBy;\n  status?: ProposalStatus;\n  daoAddressOrEns?: string;\n};\n\nexport enum ProposalSortBy {\n  CREATED_AT = \"createdAt\",\n  // POPULARITY = \"popularity\",\n  // VOTES = \"votes\",\n}\n\n// STEPS\n\n// PROPOSAL CREATION\nexport enum ProposalCreationSteps {\n  CREATING = \"creating\",\n  DONE = \"done\",\n}\n\nexport type ProposalCreationStepValue =\n  | { key: ProposalCreationSteps.CREATING; txHash: string }\n  | { key: ProposalCreationSteps.DONE; proposalId: string };\n\n// PROPOSAL VOTING\nexport enum VoteProposalStep {\n  VOTING = \"voting\",\n  DONE = \"done\",\n}\n\nexport type VoteProposalStepValue =\n  | { key: VoteProposalStep.VOTING; txHash: string }\n  | { key: VoteProposalStep.DONE };\n\n// PROPOSAL EXECUTION\nexport enum ExecuteProposalStep {\n  EXECUTING = \"executing\",\n  DONE = \"done\",\n}\n\nexport type ExecuteProposalStepValue =\n  | { key: ExecuteProposalStep.EXECUTING; txHash: string }\n  | { key: ExecuteProposalStep.DONE };\n\nexport type ContractPluginSettings = [BigNumber, BigNumber, BigNumber];\n\nexport type SubgraphVotingSettings = {\n  minDuration: string;\n  minProposerVotingPower: string;\n  minParticipation: string;\n  supportThreshold: string;\n  votingMode: VotingMode;\n};\n\nexport type SubgraphMembers = {\n  members: {\n    address: string;\n  }[];\n};\nexport enum PrepareInstallationStep {\n  PREPARING = \"preparing\",\n  DONE = \"done\",\n}\n\nexport type PrepareInstallationStepValue =\n  | { key: PrepareInstallationStep.PREPARING; txHash: string }\n  | {\n    key: PrepareInstallationStep.DONE;\n  } & ApplyInstallationParams;\n\nexport type ApplyInstallationParamsBase = {\n  permissions: MultiTargetPermission[];\n  versionTag: VersionTag;\n  pluginRepo: string;\n  pluginAddress: string;\n};\n\nexport type ApplyInstallationParams = ApplyInstallationParamsBase & {\n  helpers: string[];\n};\nexport type DecodedApplyInstallationParams = ApplyInstallationParamsBase & {\n  helpersHash: string;\n};\n\nexport type VersionTag = {\n  build: number;\n  release: number;\n};\n\nexport enum PermissionOperationType {\n  GRANT = 0,\n  REVOKE = 1,\n  GRANT_WITH_CONDITION = 2,\n}\n\nexport type MultiTargetPermission = {\n  operation: PermissionOperationType;\n  where: string;\n  who: string;\n  condition?: string;\n  permissionId: string;\n};\n","export enum SupportedNetwork {\n  MAINNET = \"homestead\",\n  GOERLI = \"goerli\",\n  POLYGON = \"matic\",\n  MUMBAI = \"maticmum\",\n}\n\nexport const SupportedNetworksArray = Object.values(SupportedNetwork);\n\n\nexport type NetworkDeployment = {\n  daoFactory: string;\n  pluginSetupProcessor: string;\n  multisigRepo: string;\n  adminRepo: string;\n  addresslistVotingRepo: string;\n  tokenVotingRepo: string;\n  multisigSetup: string;\n  adminSetup: string;\n  addresslistVotingSetup: string;\n  tokenVotingSetup: string;\n  ensRegistry?: string;\n};\n\n// This file contains common types, interfaces, and enumerations\n\nexport enum DaoRole {\n  UPGRADE_ROLE = \"UPGRADE_ROLE\",\n  DAO_CONFIG_ROLE = \"DAO_CONFIG_ROLE\",\n  EXEC_ROLE = \"EXEC_ROLE\",\n  WITHDRAW_ROLE = \"WITHDRAW_ROLE\",\n  SET_SIGNATURE_VALIDATOR_ROLE = \"SET_SIGNATURE_VALIDATOR_ROLE\",\n}\n\n/**\n * Contains the payload passed to the global DAO factory so that\n * plugins can be initialized\n */\nexport interface PluginInstallItem {\n  id: string; // ENS domain or address of the plugin's Repo\n  data: Uint8Array;\n}\n/**\n * Contains the payload passed to governance contracts, serializing\n * the actions to do upon approval\n */\nexport type DaoAction = {\n  to: string;\n  value: bigint;\n  data: Uint8Array;\n};\n\n/**\n * Contains the general human readable information about the DAO\n */\nexport type DaoConfig = {\n  name: string;\n  metadataUri: string;\n};\n\nexport type GasFeeEstimation = {\n  average: bigint;\n  max: bigint;\n};\n\nexport interface IPagination {\n  skip?: number;\n  limit?: number;\n  direction?: SortDirection;\n}\n\nexport type Pagination = {\n  skip?: number;\n  limit?: number;\n  direction?: SortDirection;\n};\n\nexport enum SortDirection {\n  ASC = \"asc\",\n  DESC = \"desc\",\n}\n\nexport interface InterfaceParams {\n  id: string;\n  functionName: string;\n  hash: string;\n}\n\nexport enum TokenType {\n  NATIVE = \"native\",\n  ERC20 = \"erc20\",\n  ERC721 = \"erc721\",\n}","import { Context } from \"../../client-common/context\";\nimport { JsonRpcProvider } from \"@ethersproject/providers\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { Contract, ContractInterface } from \"@ethersproject/contracts\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport {\n  GasFeeEstimation,\n  SupportedNetwork,\n  SupportedNetworksArray,\n} from \"../types/common\";\nimport { IClientWeb3Core } from \"../interfaces\";\nimport {\n  CannotEstimateGasError,\n  InvalidAddressError,\n  InvalidContractAbiError,\n  NoDaoFactory,\n  NoNodesAvailableError,\n  NoProviderError,\n  NoSignerError,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nexport class Web3Module implements IClientWeb3Core {\n  private static readonly PRECISION_FACTOR_BASE = 1000;\n  private providerIdx: number = -1;\n  private context: Context;\n\n  constructor(context: Context) {\n    this.context = context;\n    this.providerIdx = Math.floor(Math.random() * context.web3Providers.length);\n  }\n\n  /** Starts using the next available Web3 provider */\n  public shiftProvider(): void {\n    if (!this.context.web3Providers.length) {\n      throw new NoProviderError();\n    } else if (this.context.web3Providers.length <= 1) {\n      throw new NoNodesAvailableError(\"web3\");\n    }\n    this.providerIdx = (this.providerIdx + 1) %\n      this.context.web3Providers.length;\n  }\n\n  /** Retrieves the current signer */\n  public getSigner(): Signer {\n    if (!this.context.signer) {\n      throw new NoSignerError();\n    }\n    return this.context.signer;\n  }\n  /** Returns the currently active network provider */\n  public getProvider(): JsonRpcProvider {\n    if (!this.context.web3Providers[this.providerIdx]) {\n      throw new NoProviderError();\n    }\n    return this.context.web3Providers[this.providerIdx];\n  }\n\n  /** Returns the currently active network */\n  public getNetworkName(): SupportedNetwork {\n    const networkName = this.context.network.name as SupportedNetwork;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    return networkName;\n  }\n\n  /** Returns a signer connected to the current network provider */\n  public getConnectedSigner(): Signer {\n    let signer = this.getSigner();\n    if (!signer.provider) {\n      const provider = this.getProvider();\n      signer = signer.connect(provider);\n    }\n    return signer;\n  }\n\n  /** Returns whether the current provider is functional or not */\n  public isUp(): Promise<boolean> {\n    const provider = this.getProvider();\n    return provider\n      .getNetwork()\n      .then(() => true)\n      .catch(() => false);\n  }\n\n  public async ensureOnline(): Promise<void> {\n    if (!this.context.web3Providers.length) {\n      throw new NoProviderError();\n    }\n\n    for (let i = 0; i < this.context.web3Providers.length; i++) {\n      if (await this.isUp()) return;\n      this.shiftProvider();\n    }\n    throw new NoNodesAvailableError(\"web3\");\n  }\n\n  /**\n   * Returns a contract instance at the given address\n   *\n   * @param address Contract instance address\n   * @param abi The Application Binary Inteface of the contract\n   * @return A contract instance attached to the given address\n   */\n  public attachContract<T>(\n    address: string,\n    abi: ContractInterface,\n  ): Contract & T {\n    if (!address || !isAddress(address)) throw new InvalidAddressError();\n    else if (!abi) throw new InvalidContractAbiError();\n    const signer = this.getConnectedSigner();\n    return new Contract(address, abi, signer) as Contract & T;\n  }\n\n  /** Calculates the expected maximum gas fee */\n  public getMaxFeePerGas(): Promise<bigint> {\n    return this.getConnectedSigner()\n      .getFeeData()\n      .then((feeData) => {\n        if (!feeData.maxFeePerGas) {\n          throw new CannotEstimateGasError();\n        }\n        return feeData.maxFeePerGas.toBigInt();\n      });\n  }\n\n  public getApproximateGasFee(estimatedFee: bigint): Promise<GasFeeEstimation> {\n    return this.getMaxFeePerGas().then((maxFeePerGas) => {\n      const max = estimatedFee * maxFeePerGas;\n\n      const factor = this.context.gasFeeEstimationFactor *\n        Web3Module.PRECISION_FACTOR_BASE;\n\n      const average = (max * BigInt(Math.trunc(factor))) /\n        BigInt(Web3Module.PRECISION_FACTOR_BASE);\n\n      return { average, max };\n    });\n  }\n\n  /** Returns the current DAO factory address */\n  public getDaoFactoryAddress(): string {\n    if (!this.context.daoFactoryAddress) {\n      throw new NoDaoFactory();\n    }\n    return this.context.daoFactoryAddress;\n  }\n}\n","import { Context } from \"../../client-common/context\";\nimport { IClientIpfsCore } from \"../interfaces\";\nimport {\n  Client as IpfsClient,\n  ClientError,\n  PinResponse,\n} from \"@aragon/sdk-ipfs\";\nimport {\n  ClientNotInitializedError,\n  IpfsError,\n  NoNodesAvailableError,\n  runAndRetry,\n  DataDecodingError\n} from \"@aragon/sdk-common\";\n\nexport class IPFSModule implements IClientIpfsCore {\n  private clientIdx: number = -1;\n  private clients: IpfsClient[] = [];\n  constructor(context: Context) {\n    // Storing client data in the private module's scope to prevent external mutation\n    if (context.ipfs?.length) {\n      this.clients = context.ipfs;\n      this.clientIdx = Math.floor(Math.random() * context.ipfs.length);\n    }\n  }\n\n  public getClient(): IpfsClient {\n    if (!this.clients.length || !this.clients[this.clientIdx]) {\n      throw new ClientNotInitializedError(\"ipfs\");\n    }\n    return this.clients[this.clientIdx];\n  }\n\n  /**\n   * Starts using the next available IPFS endpoint\n   */\n  public shiftClient(): void {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"ipfs\");\n    } else if (this.clients?.length < 2) {\n      throw new NoNodesAvailableError(\"ipfs\");\n    }\n    this.clientIdx = (this.clientIdx + 1) % this.clients.length;\n  }\n\n  /** Returns `true` if the current client is on line */\n  public isUp(): Promise<boolean> {\n    if (!this.clients?.length) return Promise.resolve(false);\n    return this.getClient().nodeInfo().then(() => true).catch(() => false);\n  }\n\n  public async ensureOnline(): Promise<void> {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"ipfs\");\n    }\n    for (let i = 0; i < this.clients?.length; i++) {\n      if (await this.isUp()) return;\n      this.shiftClient();\n    }\n    throw new NoNodesAvailableError(\"ipfs\");\n  }\n\n  public getOnlineClient(): Promise<IpfsClient> {\n    return this.ensureOnline().then(() => this.getClient());\n  }\n\n  // IPFS METHODS\n\n  public async add(input: string | Uint8Array): Promise<string> {\n    return this.runAndRetryHelper(() => this.getClient().add(input)).then((\n      res,\n    ) => res.hash);\n  }\n\n  public pin(input: string): Promise<PinResponse> {\n    return this.runAndRetryHelper(() => this.getClient().pin(input));\n  }\n\n  public fetchBytes(cid: string): Promise<Uint8Array | undefined> {\n    return this.runAndRetryHelper(() => this.getClient().cat(cid));\n  }\n\n  private runAndRetryHelper<T>(f: () => Promise<T>): Promise<T> {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"ipfs\");\n    }\n    let retries = this.clients.length;\n    return runAndRetry({\n      func: f,\n      onFail: (e: Error) => {\n        if (e instanceof ClientError) {\n          if (e.response.status < 500) {\n            // If the error code is not a 5XX means the\n            // error is not generated by the server\n            throw new IpfsError(e);\n          }\n        }\n        retries--;\n        this.shiftClient();\n      },\n      shouldRetry: () => retries > 0,\n    });\n  }\n\n  public fetchString(cid: string): Promise<string> {\n    return this.fetchBytes(cid)\n      .then((bytes) => new TextDecoder().decode(bytes))\n      .catch((e) => {\n        throw new DataDecodingError(e.message);\n      });\n  }\n}\n","import { gql } from \"graphql-request\";\n\nexport const QueryStatus = gql`\n{\n  _meta{\n    deployment\n  }\n}\n`;\n","import {\n  ClientNotInitializedError,\n  GraphQLError,\n  NoNodesAvailableError,\n  runAndRetry,\n} from \"@aragon/sdk-common\";\nimport { ClientError, GraphQLClient } from \"graphql-request\";\nimport { Context } from \"../../client-common/context\";\nimport { QueryStatus } from \"../graphql-queries\";\nimport { IClientGraphQLCore } from \"../interfaces\";\n\nexport class GraphqlModule implements IClientGraphQLCore {\n  private clientIdx: number = -1;\n  private clients: GraphQLClient[] = [];\n  constructor(context: Context) {\n    if (context.graphql?.length) {\n      this.clients = context.graphql;\n      this.clientIdx = Math.floor(Math.random() * context.graphql.length);\n    }\n  }\n  /**\n   * Get the current graphql client\n   * @returns {GraphQLClient}\n   */\n  public getClient(): GraphQLClient {\n    if (!this.clients.length || !this.clients[this.clientIdx]) {\n      throw new ClientNotInitializedError(\"graphql\");\n    }\n    return this.clients[this.clientIdx];\n  }\n\n  /**\n   * Starts using the next available Graphql endpoint\n   * @returns {void}\n   */\n  public shiftClient(): void {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    } else if (this.clients.length < 2) {\n      throw new NoNodesAvailableError(\"graphql\");\n    }\n    this.clientIdx = (this.clientIdx + 1) % this.clients.length;\n  }\n\n  /**\n   * Checks if the current node is online\n   * @returns {Promise<boolean>}\n   */\n  public isUp(): Promise<boolean> {\n    return this.getClient().request(QueryStatus).then((res) => {\n      return !!res._meta?.deployment;\n    }).catch(() => {\n      return false;\n    });\n  }\n\n  /**\n   * Ensures that the graphql is online.\n   * If the current node is not online\n   * it will shift to the next one and\n   * repeat until it finds an online\n   * node. In the case that there are no\n   * nodes or none of them is available\n   * it will throw an error\n   * @returns {Promise<void>}\n   */\n  public async ensureOnline(): Promise<void> {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    }\n    for (let i = 0; i < this.clients.length; i++) {\n      if (await this.isUp()) return;\n      this.shiftClient();\n    }\n    throw new NoNodesAvailableError(\"graphql\");\n  }\n\n  public request({ query, params, name }: {\n    query: string;\n    params: { [key: string]: any };\n    name?: string;\n  }) {\n    if (!this.clients.length) {\n      throw new ClientNotInitializedError(\"graphql\");\n    }\n    let retries = this.clients.length;\n    return runAndRetry({\n      func: () => this.getClient().request(query, params),\n      onFail: (e: Error) => {\n        if (e instanceof ClientError) {\n          // If the error code is not a 5XX means the\n          // error is not generated by the server\n          if (e.response.status < 500) {\n            throw new GraphQLError(name || \"\", e);\n          }\n        }\n        retries--;\n        this.shiftClient();\n      },\n      shouldRetry: () => retries > 0,\n    });\n  }\n}\n","import {\n  IClientCore,\n  IClientGraphQLCore,\n  IClientIpfsCore,\n  IClientWeb3Core,\n} from \"./interfaces\";\nimport { Context } from \"./context\";\nimport { Web3Module } from \"./modules/web3\";\nimport { IPFSModule } from \"./modules/ipfs\";\nimport { GraphqlModule } from \"./modules/graphql\";\n\n/**\n * Provides the low level foundation so that subclasses have ready-made access to Web3, IPFS and GraphQL primitives\n */\nexport abstract class ClientCore implements IClientCore {\n  public web3: IClientWeb3Core;\n  public ipfs: IClientIpfsCore;\n  public graphql: IClientGraphQLCore;\n  constructor(context: Context) {\n    this.web3 = new Web3Module(context);\n    this.ipfs = new IPFSModule(context);\n    this.graphql = new GraphqlModule(context);\n  }\n}\n","import { activeContractsList } from \"@aragon/osx-ethers\";\nimport { NetworkDeployment, SupportedNetwork } from \"./types/common\";\nimport { ProposalMetadata } from \"./types/plugin\";\n\nexport const UNSUPPORTED_PROPOSAL_METADATA_LINK: ProposalMetadata = {\n  title: \"(unsupported metadata link)\",\n  summary: \"(the link to the metadata is not supported)\",\n  description: \"(the link to the metadata is not supported)\",\n  resources: [],\n};\nexport const EMPTY_PROPOSAL_METADATA_LINK: ProposalMetadata = {\n  title: \"(the proposal has no metadata)\",\n  summary: \"(the current proposal does not have any content defined)\",\n  description: \"(the current proposal does not have any content defined)\",\n  resources: [],\n};\nexport const UNAVAILABLE_PROPOSAL_METADATA: ProposalMetadata = {\n  title: \"(unavailable metadata)\",\n  summary: \"(the proposal metadata is not available)\",\n  description: \"(the proposal metadata is not available)\",\n  resources: [],\n};\n\nconst getGraphqlNode = (netowrk: SupportedNetwork): string => {\n  return `https://subgraph.satsuma-prod.com/qHR2wGfc5RLi6/aragon/osx-${\n    SupportedNetworksToGraphqlNetworks[netowrk]\n  }/api`;\n};\n\ntype GraphqlNetworks = \"mainnet\" | \"goerli\" | \"polygon\" | \"mumbai\";\n\nconst SupportedNetworksToGraphqlNetworks: {\n  [K in SupportedNetwork]: GraphqlNetworks;\n} = {\n  [SupportedNetwork.MAINNET]: \"mainnet\",\n  [SupportedNetwork.GOERLI]: \"goerli\",\n  [SupportedNetwork.POLYGON]: \"polygon\",\n  [SupportedNetwork.MUMBAI]: \"mumbai\",\n};\n\nexport const GRAPHQL_NODES: { [K in SupportedNetwork]: { url: string }[] } = {\n  [SupportedNetwork.MAINNET]: [{\n    url: getGraphqlNode(SupportedNetwork.MAINNET),\n  }],\n  [SupportedNetwork.GOERLI]: [{ url: getGraphqlNode(SupportedNetwork.GOERLI) }],\n  [SupportedNetwork.POLYGON]: [{\n    url: getGraphqlNode(SupportedNetwork.POLYGON),\n  }],\n  [SupportedNetwork.MUMBAI]: [{ url: getGraphqlNode(SupportedNetwork.MUMBAI) }],\n};\n\nconst IPFS_ENDPOINTS = {\n  prod: [\n    {\n      url: \"https://ipfs-0.aragon.network\",\n      headers: {\n        \"X-API-KEY\": \"b477RhECf8s8sdM7XrkLBs2wHc4kCMwpbcFC55Kt\",\n      },\n    },\n    {\n      url: \"https://ipfs-1.aragon.network\",\n      headers: {\n        \"X-API-KEY\": \"b477RhECf8s8sdM7XrkLBs2wHc4kCMwpbcFC55Kt\",\n      },\n    },\n  ],\n  test: [\n    {\n      url: \"https://testing-ipfs-0.aragon.network\",\n      headers: {\n        \"X-API-KEY\": \"b477RhECf8s8sdM7XrkLBs2wHc4kCMwpbcFC55Kt\",\n      },\n    },\n  ],\n};\n\nexport const IPFS_NODES: {\n  [K in SupportedNetwork]: {\n    url: string;\n    headers?: Record<string, string> | undefined;\n  }[];\n} = {\n  [SupportedNetwork.MAINNET]: IPFS_ENDPOINTS.prod,\n  [SupportedNetwork.GOERLI]: IPFS_ENDPOINTS.test,\n  [SupportedNetwork.POLYGON]: IPFS_ENDPOINTS.prod,\n  [SupportedNetwork.MUMBAI]: IPFS_ENDPOINTS.test,\n};\n\nexport const LIVE_CONTRACTS: { [K in SupportedNetwork]: NetworkDeployment } = {\n  [SupportedNetwork.MAINNET]: {\n    daoFactory: activeContractsList.mainnet.DAOFactory,\n    pluginSetupProcessor: activeContractsList.mainnet.PluginRepoFactory,\n    multisigRepo: activeContractsList.mainnet[\"multisig-repo\"],\n    adminRepo: activeContractsList.mainnet[\"admin-repo\"],\n    addresslistVotingRepo:\n      activeContractsList.mainnet[\"address-list-voting-repo\"],\n    tokenVotingRepo: activeContractsList.mainnet[\"token-voting-repo\"],\n    multisigSetup: activeContractsList.mainnet.MultisigSetup,\n    adminSetup: activeContractsList.mainnet.AdminSetup,\n    addresslistVotingSetup: activeContractsList.mainnet.AddresslistVotingSetup,\n    tokenVotingSetup: activeContractsList.mainnet.TokenVotingSetup,\n  },\n  [SupportedNetwork.GOERLI]: {\n    daoFactory: activeContractsList.goerli.DAOFactory,\n    pluginSetupProcessor: activeContractsList.goerli.PluginSetupProcessor,\n    multisigRepo: activeContractsList.goerli[\"multisig-repo\"],\n    adminRepo: activeContractsList.goerli[\"admin-repo\"],\n    addresslistVotingRepo:\n      activeContractsList.goerli[\"address-list-voting-repo\"],\n    tokenVotingRepo: activeContractsList.goerli[\"token-voting-repo\"],\n    multisigSetup: activeContractsList.goerli.MultisigSetup,\n    adminSetup: activeContractsList.goerli.AdminSetup,\n    addresslistVotingSetup: activeContractsList.goerli.AddresslistVotingSetup,\n    tokenVotingSetup: activeContractsList.goerli.TokenVotingSetup,\n  },\n  [SupportedNetwork.MUMBAI]: {\n    daoFactory: activeContractsList.mumbai.DAOFactory,\n    pluginSetupProcessor: activeContractsList.mumbai.PluginSetupProcessor,\n    multisigRepo: activeContractsList.mumbai[\"multisig-repo\"],\n    adminRepo: activeContractsList.mumbai[\"admin-repo\"],\n    addresslistVotingRepo:\n      activeContractsList.mumbai[\"address-list-voting-repo\"],\n    tokenVotingRepo: activeContractsList.mumbai[\"token-voting-repo\"],\n    multisigSetup: activeContractsList.mumbai.MultisigSetup,\n    adminSetup: activeContractsList.mumbai.AdminSetup,\n    addresslistVotingSetup: activeContractsList.mumbai.AddresslistVotingSetup,\n    tokenVotingSetup: activeContractsList.mumbai.TokenVotingSetup,\n    ensRegistry: activeContractsList.mumbai.ENSRegistry,\n  },\n  [SupportedNetwork.POLYGON]: {\n    daoFactory: activeContractsList.polygon.DAOFactory,\n    pluginSetupProcessor: activeContractsList.polygon.PluginSetupProcessor,\n    multisigRepo: activeContractsList.polygon[\"multisig-repo\"],\n    adminRepo: activeContractsList.polygon[\"admin-repo\"],\n    addresslistVotingRepo:\n      activeContractsList.polygon[\"address-list-voting-repo\"],\n    tokenVotingRepo: activeContractsList.polygon[\"token-voting-repo\"],\n    multisigSetup: activeContractsList.polygon.MultisigSetup,\n    adminSetup: activeContractsList.polygon.AdminSetup,\n    addresslistVotingSetup: activeContractsList.polygon.AddresslistVotingSetup,\n    tokenVotingSetup: activeContractsList.polygon.TokenVotingSetup,\n    ensRegistry: activeContractsList.polygon.ENSRegistry,\n  },\n};\n","import { ContextParams, ContextState } from \"./types/context\";\nimport {\n  getNetwork,\n  JsonRpcProvider,\n  Network,\n  Networkish,\n} from \"@ethersproject/providers\";\nimport {\n  InvalidAddressError,\n  UnsupportedNetworkError,\n  UnsupportedProtocolError,\n} from \"@aragon/sdk-common\";\nimport { Client as IpfsClient } from \"@aragon/sdk-ipfs\";\nimport { GraphQLClient } from \"graphql-request\";\nimport {\n  GRAPHQL_NODES,\n  IPFS_NODES,\n  LIVE_CONTRACTS,\n} from \"./constants\";\nimport { SupportedNetwork, SupportedNetworksArray } from \"./types/common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nexport { ContextParams } from \"./types/context\";\n\nconst DEFAULT_GAS_FEE_ESTIMATION_FACTOR = 0.625;\ntype OverriddenState = {\n  daoFactoryAddress: boolean;\n  ensRegistryAddress: boolean;\n  gasFeeEstimationFactor: boolean;\n  ipfsNodes: boolean;\n  graphqlNodes: boolean;\n};\nconst supportedProtocols = [\"https:\"];\nif (typeof process !== \"undefined\" && process?.env?.TESTING) {\n  supportedProtocols.push(\"http:\");\n}\n\nexport class Context {\n  protected state: ContextState = {} as ContextState;\n  protected overriden: OverriddenState = {\n    daoFactoryAddress: false,\n    ensRegistryAddress: false,\n    gasFeeEstimationFactor: false,\n    ipfsNodes: false,\n    graphqlNodes: false,\n  };\n  // INTERNAL CONTEXT STATE\n  /**\n   * @param {Object} params\n   *\n   * @constructor\n   */\n  constructor(params?: Partial<ContextParams>) {\n    // set network to mainnet, overrided by the value of params\n    const mergedParams = Object.assign({ network: \"mainnet\" }, params);\n    this.set(mergedParams);\n  }\n\n  set(contextParams: Partial<ContextParams>) {\n    if (contextParams.network) {\n      this.state.network = Context.resolveNetwork(\n        contextParams.network,\n        contextParams.ensRegistryAddress,\n      );\n      // once the network is resolved set default values\n      this.setNetworkDefaults();\n    }\n    if (contextParams.signer) {\n      this.state.signer = contextParams.signer;\n    }\n    if (\n      contextParams.web3Providers ||\n      (Array.isArray(contextParams.web3Providers) &&\n        contextParams.web3Providers.length)\n    ) {\n      this.state.web3Providers = Context.resolveWeb3Providers(\n        contextParams.web3Providers,\n        this.state.network,\n      );\n    }\n    if (contextParams.graphqlNodes?.length) {\n      this.state.graphql = Context.resolveGraphql(contextParams.graphqlNodes);\n      this.overriden.graphqlNodes = true;\n    }\n    if (contextParams.ipfsNodes?.length) {\n      this.state.ipfs = Context.resolveIpfs(contextParams.ipfsNodes);\n      this.overriden.ipfsNodes = true;\n    }\n    if (contextParams.daoFactoryAddress) {\n      this.state.daoFactoryAddress = contextParams.daoFactoryAddress;\n      this.overriden.daoFactoryAddress = true;\n    }\n    if (contextParams.ensRegistryAddress) {\n      this.state.ensRegistryAddress = contextParams.ensRegistryAddress;\n      this.overriden.ensRegistryAddress = true;\n    }\n    if (contextParams.gasFeeEstimationFactor) {\n      this.state.gasFeeEstimationFactor = Context.resolveGasFeeEstimationFactor(\n        contextParams.gasFeeEstimationFactor,\n      );\n      this.overriden.gasFeeEstimationFactor = true;\n    }\n  }\n\n  private setNetworkDefaults() {\n    const networkName = this.network.name as SupportedNetwork;\n    if (\n      !GRAPHQL_NODES[networkName]?.length ||\n      !IPFS_NODES[networkName]?.length ||\n      !LIVE_CONTRACTS[networkName]\n    ) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n\n    if (!this.overriden.graphqlNodes) {\n      this.state.graphql = Context.resolveGraphql(GRAPHQL_NODES[networkName]);\n    }\n\n    if (!this.overriden.ipfsNodes) {\n      this.state.ipfs = Context.resolveIpfs(IPFS_NODES[networkName]);\n    }\n\n    if (!this.overriden.daoFactoryAddress) {\n      this.state.daoFactoryAddress = LIVE_CONTRACTS[networkName].daoFactory;\n    }\n\n    if (!this.overriden.ensRegistryAddress) {\n      let ensRegistry = LIVE_CONTRACTS[networkName].ensRegistry;\n      if (!ensRegistry) {\n        ensRegistry = this.network.ensAddress;\n      }\n      this.state.ensRegistryAddress = ensRegistry;\n    }\n    if (!this.overriden.gasFeeEstimationFactor) {\n      this.state.gasFeeEstimationFactor = DEFAULT_GAS_FEE_ESTIMATION_FACTOR;\n    }\n  }\n\n  // GETTERS\n\n  /**\n   * Getter for the network\n   *\n   * @var network\n   *\n   * @returns {Networkish}\n   *\n   * @public\n   */\n  get network() {\n    return this.state.network;\n  }\n  /**\n   * Getter for the Signer\n   *\n   * @var signer\n   *\n   * @returns {Signer}\n   *\n   * @public\n   */\n  get ensRegistryAddress(): string | undefined {\n    return this.state.ensRegistryAddress;\n  }\n\n  /**\n   * Getter for the Signer\n   *\n   * @var signer\n   *\n   * @returns {Signer}\n   *\n   * @public\n   */\n  get signer(): Signer {\n    return this.state.signer;\n  }\n\n  /**\n   * Getter for the web3 providers\n   *\n   * @var web3Providers\n   *\n   * @returns {JsonRpcProvider[]}\n   *\n   * @public\n   */\n  get web3Providers(): JsonRpcProvider[] {\n    return this.state.web3Providers || []\n  }\n\n  /**\n   * Getter for daoFactoryAddress property\n   *\n   * @var daoFactoryAddress\n   *\n   * @returns {string}\n   *\n   * @public\n   */\n  get daoFactoryAddress(): string {\n    return this.state.daoFactoryAddress;\n  }\n\n  /**\n   * Getter for the gas fee reducer used in estimations\n   *\n   * @var gasFeeEstimationFactor\n   *\n   * @returns {number}\n   *\n   * @public\n   */\n  get gasFeeEstimationFactor(): number {\n    return (\n      this.state.gasFeeEstimationFactor\n    );\n  }\n\n  /**\n   * Getter for the IPFS http client\n   *\n   * @var ipfs\n   *\n   * @returns {IpfsClient[]}\n   *\n   * @public\n   */\n  get ipfs(): IpfsClient[] {\n    return this.state.ipfs;\n  }\n\n  /**\n   * Getter for the GraphQL client\n   *\n   * @var graphql\n   *\n   * @returns {GraphQLClient[]}\n   *\n   * @public\n   */\n  get graphql(): GraphQLClient[] {\n    return this.state.graphql;\n  }\n\n  // INTERNAL HELPERS\n  private static resolveNetwork(\n    networkish: Networkish,\n    ensRegistryAddress?: string,\n  ): Network {\n    const network = getNetwork(networkish);\n    const networkName = network.name as SupportedNetwork;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n\n    if (ensRegistryAddress) {\n      if (!isAddress(ensRegistryAddress)) {\n        throw new InvalidAddressError();\n      } else {\n        network.ensAddress = ensRegistryAddress;\n      }\n    }\n\n    if (!network.ensAddress) {\n      const ensAddress = LIVE_CONTRACTS[networkName].ensRegistry;\n      if (!ensAddress) {\n        throw new UnsupportedNetworkError(networkName);\n      }\n      network.ensAddress = ensAddress;\n    }\n    return network;\n  }\n\n  private static resolveWeb3Providers(\n    endpoints: string | JsonRpcProvider | (string | JsonRpcProvider)[],\n    network: Network,\n  ): JsonRpcProvider[] {\n    if (Array.isArray(endpoints)) {\n      return endpoints.map((item) => {\n        if (typeof item === \"string\") {\n          const url = new URL(item);\n          if (!supportedProtocols.includes(url.protocol)) {\n            throw new UnsupportedProtocolError(url.protocol);\n          }\n          return new JsonRpcProvider(url.href, network);\n        }\n        return item;\n      });\n    } else if (typeof endpoints === \"string\") {\n      const url = new URL(endpoints);\n      if (!supportedProtocols.includes(url.protocol)) {\n        throw new UnsupportedProtocolError(url.protocol);\n      }\n      return [new JsonRpcProvider(url.href, network)];\n    } else {\n      return [endpoints];\n    }\n  }\n\n  private static resolveIpfs(\n    configs: {\n      url: string;\n      headers?: Record<string, string>;\n    }[],\n  ): IpfsClient[] {\n    let clients: IpfsClient[] = [];\n    configs.forEach((config) => {\n      const url = new URL(config.url);\n      if (!supportedProtocols.includes(url.protocol)) {\n        throw new UnsupportedProtocolError(url.protocol);\n      }\n      clients.push(new IpfsClient(url, config.headers));\n    });\n    return clients;\n  }\n\n  private static resolveGraphql(endpoints: { url: string }[]): GraphQLClient[] {\n    let clients: GraphQLClient[] = [];\n    endpoints.forEach((endpoint) => {\n      const url = new URL(endpoint.url);\n      if (!supportedProtocols.includes(url.protocol)) {\n        throw new UnsupportedProtocolError(url.protocol);\n      }\n      clients.push(new GraphQLClient(url.href));\n    });\n    return clients;\n  }\n\n  private static resolveGasFeeEstimationFactor(\n    gasFeeEstimationFactor: number,\n  ): number {\n    if (gasFeeEstimationFactor < 0 || gasFeeEstimationFactor > 1) {\n      throw new Error(\n        \"Gas estimation factor value should be a number between 0 and 1\",\n      );\n    }\n    return gasFeeEstimationFactor;\n  }\n}\n","import { Context } from \"./context\";\nimport {\n  ContextPluginParams,\n} from \"./types/context\";\n\nexport class ContextPlugin extends Context {\n  // INTERNAL CONTEXT STATE\n\n  /**\n   * @param {ContextPluginParams} params The parameters for the client context\n   *\n   * @constructor\n   */\n  constructor(params?: Partial<ContextPluginParams>) {\n    super(params)\n  }\n\n  /**\n   * Generate a plugin context from a client clontext and a plugin address\n   *\n   * @param {Context} ctx\n   * @param {string} pluginAddress\n   * @return {*}  {ContextPlugin}\n   * @memberof ContextPlugin\n   */\n  static fromContext(ctx: Context): ContextPlugin {\n    const ctxPlugin = new ContextPlugin({});\n    Object.assign(ctxPlugin, ctx);\n    return ctxPlugin;\n  }\n\n  set(contextParams: Partial<ContextPluginParams>) {\n    super.set(contextParams);\n  }\n\n}\n","import { IDAO } from \"@aragon/osx-ethers\";\nimport { ContractReceipt } from \"@ethersproject/contracts\";\nimport { VoteValues, VotingMode } from \"./types/plugin\";\nimport {\n  CreateMajorityVotingProposalParams,\n  IComputeStatusProposal,\n  ProposalStatus,\n} from \"./types/plugin\";\n\nimport { Interface } from \"@ethersproject/abi\";\nimport { id } from \"@ethersproject/hash\";\nimport { Log } from \"@ethersproject/providers\";\nimport { InvalidVotingModeError } from \"@aragon/sdk-common\";\n\nexport function unwrapProposalParams(\n  params: CreateMajorityVotingProposalParams,\n): [string, IDAO.ActionStruct[], number, number, boolean, number] {\n  return [\n    params.metadataUri,\n    params.actions ?? [],\n    // TODO: Verify => seconds?\n    params.startDate ? Math.floor(params.startDate.getTime() / 1000) : 0,\n    // TODO: Verify => seconds?\n    params.endDate ? Math.floor(params.endDate.getTime() / 1000) : 0,\n    params.executeOnPass ?? false,\n    params.creatorVote ?? VoteValues.ABSTAIN,\n  ];\n}\n\nexport function computeProposalStatus(\n  proposal: IComputeStatusProposal,\n): ProposalStatus {\n  const now = new Date();\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  if (proposal.executed) {\n    return ProposalStatus.EXECUTED;\n  }\n  if (startDate >= now) {\n    return ProposalStatus.PENDING;\n  }\n  if (proposal.potentiallyExecutable || proposal.earlyExecutable) {\n    return ProposalStatus.SUCCEEDED;\n  }\n  if (endDate >= now) {\n    return ProposalStatus.ACTIVE;\n  }\n  return ProposalStatus.DEFEATED;\n}\n\nexport function computeProposalStatusFilter(\n  status: ProposalStatus,\n): Object {\n  let where = {};\n  const now = Math.round(new Date().getTime() / 1000).toString();\n  switch (status) {\n    case ProposalStatus.PENDING:\n      where = { startDate_gte: now };\n      break;\n    case ProposalStatus.ACTIVE:\n      where = { startDate_lt: now, endDate_gte: now, executed: false };\n      break;\n    case ProposalStatus.EXECUTED:\n      where = { executed: true };\n      break;\n    case ProposalStatus.SUCCEEDED:\n      where = { potentiallyExecutable: true, endDate_lt: now };\n      break;\n    case ProposalStatus.DEFEATED:\n      where = {\n        potentiallyExecutable: false,\n        endDate_lt: now,\n        executed: false,\n      };\n      break;\n    default:\n      throw new Error(\"invalid proposal status\");\n  }\n  return where;\n}\n\nexport function findLog(\n  receipt: ContractReceipt,\n  iface: Interface,\n  eventName: string,\n): Log | undefined {\n  return receipt.logs.find(\n    (log) =>\n      log.topics[0] ===\n        id(\n          iface.getEvent(eventName).format(\n            \"sighash\",\n          ),\n        ),\n  );\n}\n\nexport function votingModeToContracts(votingMode: VotingMode): number {\n  switch (votingMode) {\n    case VotingMode.STANDARD:\n      return 0;\n    case VotingMode.EARLY_EXECUTION:\n      return 1;\n    case VotingMode.VOTE_REPLACEMENT:\n      return 2;\n    default:\n      throw new InvalidVotingModeError();\n  }\n}\nexport function votingModeFromContracts(votingMode: number): VotingMode {\n  switch (votingMode) {\n    case 0:\n      return VotingMode.STANDARD;\n    case 1:\n      return VotingMode.EARLY_EXECUTION;\n    case 2:\n      return VotingMode.VOTE_REPLACEMENT;\n    default:\n      throw new InvalidVotingModeError();\n  }\n}\n","import {\n  MajorityVotingBase,\n  MajorityVotingBase__factory,\n} from \"@aragon/osx-ethers\";\nimport { bytesToHex, hexToBytes } from \"@aragon/sdk-common\";\nimport { VotingMode, VotingSettings } from \"./types/plugin\";\nimport { FunctionFragment, Interface, Result } from \"@ethersproject/abi\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { votingModeFromContracts, votingModeToContracts } from \"./utils\";\nimport { encodeRatio, decodeRatio } from \"@aragon/sdk-common\";\n\nexport function decodeUpdatePluginSettingsAction(\n  data: Uint8Array,\n): VotingSettings {\n  const votingInterface = MajorityVotingBase__factory.createInterface();\n  const hexBytes = bytesToHex(data);\n  const expectedfunction = votingInterface.getFunction(\"updateVotingSettings\");\n  const result = votingInterface.decodeFunctionData(\n    expectedfunction,\n    hexBytes,\n  );\n  return pluginSettingsFromContract(result);\n}\n\nexport function encodeUpdateVotingSettingsAction(\n  params: VotingSettings,\n): Uint8Array {\n  const votingInterface = MajorityVotingBase__factory.createInterface();\n  const args = votingSettingsToContract(params);\n  // get hex bytes\n  const hexBytes = votingInterface.encodeFunctionData(\n    \"updateVotingSettings\",\n    [args],\n  );\n  // Strip 0x => encode in Uint8Array\n  return hexToBytes(hexBytes);\n}\n\nfunction pluginSettingsFromContract(result: Result): VotingSettings {\n  return {\n    votingMode: votingModeFromContracts(result[0][0]),\n    supportThreshold: decodeRatio(result[0][1], 6),\n    minParticipation: decodeRatio(result[0][2], 6),\n    minDuration: result[0][3].toNumber(),\n    minProposerVotingPower: BigInt(result[0][4]),\n  };\n}\n\nexport function votingSettingsToContract(\n  params: VotingSettings,\n): MajorityVotingBase.VotingSettingsStruct {\n  return {\n    votingMode: BigNumber.from(\n      votingModeToContracts(params.votingMode || VotingMode.STANDARD),\n    ),\n    supportThreshold: encodeRatio(params.supportThreshold, 6),\n    minParticipation: encodeRatio(params.minParticipation, 6),\n    minDuration: BigNumber.from(params.minDuration),\n    minProposerVotingPower: BigNumber.from(params.minProposerVotingPower || 0),\n  };\n}\n\nexport function getFunctionFragment(\n  data: Uint8Array,\n  availableFunctions: string[],\n): FunctionFragment {\n  const hexBytes = bytesToHex(data);\n  const iface = new Interface(availableFunctions);\n  return iface.getFunction(hexBytes.substring(0, 10));\n}\n","import { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n\nconst Permissions = {\n  UPGRADE_PERMISSION: \"UPGRADE_PERMISSION\",\n  SET_METADATA_PERMISSION: \"SET_METADATA_PERMISSION\",\n  EXECUTE_PERMISSION: \"EXECUTE_PERMISSION\",\n  WITHDRAW_PERMISSION: \"WITHDRAW_PERMISSION\",\n  SET_SIGNATURE_VALIDATOR_PERMISSION: \"SET_SIGNATURE_VALIDATOR_PERMISSION\",\n  SET_TRUSTED_FORWARDER_PERMISSION: \"SET_TRUSTED_FORWARDER_PERMISSION\",\n  ROOT_PERMISSION: \"ROOT_PERMISSION\",\n  CREATE_VERSION_PERMISSION: \"CREATE_VERSION_PERMISSION\",\n  REGISTER_PERMISSION: \"REGISTER_PERMISSION\",\n  REGISTER_DAO_PERMISSION: \"REGISTER_DAO_PERMISSION\",\n  REGISTER_ENS_SUBDOMAIN_PERMISSION: \"REGISTER_ENS_SUBDOMAIN_PERMISSION\",\n  MINT_PERMISSION: \"MINT_PERMISSION\",\n  MERKLE_MINT_PERMISSION: \"MERKLE_MINT_PERMISSION\",\n  MODIFY_ALLOWLIST_PERMISSION: \"MODIFY_ALLOWLIST_PERMISSION\",\n  SET_CONFIGURATION_PERMISSION: \"SET_CONFIGURATION_PERMISSION\",\n};\n\nconst PermissionIds = Object.entries(Permissions).reduce(\n  (acc, [k, v]) => ({ ...acc, [k + \"_ID\"]: keccak256(toUtf8Bytes(v)) }),\n  {} as { [k: string]: string },\n);\nObject.freeze(Permissions);\nexport { Permissions };\nObject.freeze(PermissionIds);\nexport { PermissionIds };\n","import {\n  ApplyUninstallationParams,\n  AssetBalance,\n  DaoDetails,\n  DaoListItem,\n  DaoMetadata,\n  DepositErc20Params,\n  DepositEthParams,\n  GrantPermissionDecodedParams,\n  GrantPermissionParams,\n  GrantPermissionWithConditionDecodedParams,\n  GrantPermissionWithConditionParams,\n  InstalledPluginListItem,\n  PluginRepo,\n  PluginRepoBuildMetadata,\n  PluginRepoListItem,\n  PluginRepoRelease,\n  PluginRepoReleaseMetadata,\n  RevokePermissionDecodedParams,\n  RevokePermissionParams,\n  Transfer,\n  TransferType,\n  WithdrawParams,\n} from \"../types\";\nimport {\n  ContractPermissionParams,\n  ContractPermissionWithConditionParams,\n  SubgraphBalance,\n  SubgraphDao,\n  SubgraphDaoListItem,\n  SubgraphPluginListItem,\n  SubgraphPluginRepo,\n  SubgraphPluginRepoListItem,\n  SubgraphPluginRepoReleaseListItem,\n  SubgraphTransferListItem,\n  SubgraphTransferType,\n} from \"./types\";\nimport { defaultAbiCoder, Result } from \"@ethersproject/abi\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { PluginSetupProcessor } from \"@aragon/osx-ethers\";\nimport {\n  ApplyInstallationParams,\n  DecodedApplyInstallationParams,\n  TokenType,\n} from \"../client-common\";\nimport { PermissionIds } from \"../constants\";\n\nexport function unwrapDepositParams(\n  params: DepositEthParams | DepositErc20Params,\n): [string, bigint, string, string] {\n  return [\n    params.daoAddressOrEns,\n    params.amount,\n    (params as any)?.tokenAddress ?? AddressZero,\n    \"\",\n  ];\n}\n\nexport function toDaoDetails(\n  dao: SubgraphDao,\n  metadata: DaoMetadata,\n): DaoDetails {\n  return {\n    address: dao.id,\n    ensDomain: dao.subdomain + \".dao.eth\",\n    metadata: {\n      name: metadata.name,\n      description: metadata.description,\n      avatar: metadata.avatar || undefined,\n      links: metadata.links,\n    },\n    creationDate: new Date(parseInt(dao.createdAt) * 1000),\n    // TODO update when new subgraph schema is deployed\n    plugins: dao.plugins.map(\n      (\n        plugin: SubgraphPluginListItem,\n      ): InstalledPluginListItem => (\n        {\n          id: `${plugin.appliedPluginRepo.subdomain}.plugin.dao.eth`,\n          release: plugin.appliedVersion.release.release,\n          build: plugin.appliedVersion.build,\n          instanceAddress: plugin.appliedPreparation.pluginAddress,\n        }\n      ),\n    ),\n  };\n}\n\nexport function toDaoListItem(\n  dao: SubgraphDaoListItem,\n  metadata: DaoMetadata,\n): DaoListItem {\n  return {\n    address: dao.id,\n    ensDomain: dao.subdomain + \".dao.eth\",\n    metadata: {\n      name: metadata.name,\n      description: metadata.description,\n      avatar: metadata.avatar || undefined,\n    },\n    plugins: dao.plugins.map(\n      (\n        plugin: SubgraphPluginListItem,\n      ): InstalledPluginListItem => (\n        {\n          id: `${plugin.appliedPluginRepo.subdomain}.plugin.dao.eth`,\n          release: plugin.appliedVersion.release.release,\n          build: plugin.appliedVersion.build,\n          instanceAddress: plugin.appliedPreparation.pluginAddress,\n        }\n      ),\n    ),\n  };\n}\n\nexport function toAssetBalance(balance: SubgraphBalance): AssetBalance {\n  const updateDate = new Date(parseInt(balance.lastUpdated) * 1000);\n  if (balance.__typename === \"NativeBalance\") {\n    return {\n      type: TokenType.NATIVE,\n      balance: BigInt(balance.balance),\n      updateDate,\n    };\n  } else if (balance.__typename === \"ERC721Balance\") {\n    return {\n      type: TokenType.ERC721,\n      name: balance.token.name,\n      symbol: balance.token.symbol,\n      updateDate,\n      address: balance.token.id,\n    };\n  } else {\n    return {\n      type: TokenType.ERC20,\n      address: balance.token.id,\n      name: balance.token.name,\n      symbol: balance.token.symbol,\n      decimals: balance.token.decimals,\n      balance: BigInt(balance.balance),\n      updateDate,\n    };\n  }\n}\n\nexport function toTokenTransfer(transfer: SubgraphTransferListItem): Transfer {\n  const creationDate = new Date(parseInt(transfer.createdAt) * 1000);\n  if (transfer.__typename === \"NativeTransfer\") {\n    if (transfer.type === SubgraphTransferType.DEPOSIT) {\n      return {\n        type: TransferType.DEPOSIT,\n        tokenType: TokenType.NATIVE,\n        amount: BigInt(transfer.amount),\n        creationDate,\n        transactionId: transfer.txHash,\n        from: transfer.from,\n        to: transfer.to,\n      };\n    }\n    return {\n      type: TransferType.WITHDRAW,\n      tokenType: TokenType.NATIVE,\n      amount: BigInt(transfer.amount),\n      creationDate,\n      transactionId: transfer.txHash,\n      proposalId: transfer.proposal?.id || \"\",\n      to: transfer.to,\n      from: transfer.from,\n    };\n  } else if (transfer.__typename === \"ERC721Transfer\") {\n    if (transfer.type === SubgraphTransferType.DEPOSIT) {\n      return {\n        type: TransferType.DEPOSIT,\n        tokenType: TokenType.ERC721,\n        token: {\n          address: transfer.token.id,\n          name: transfer.token.name,\n          symbol: transfer.token.symbol,\n        },\n        creationDate,\n        transactionId: transfer.txHash,\n        from: transfer.from,\n        to: transfer.to,\n      };\n    }\n    return {\n      type: TransferType.WITHDRAW,\n      tokenType: TokenType.ERC721,\n      token: {\n        address: transfer.token.id,\n        name: transfer.token.name,\n        symbol: transfer.token.symbol,\n      },\n      creationDate,\n      transactionId: transfer.txHash,\n      to: transfer.to,\n      from: transfer.from,\n      proposalId: transfer.proposal?.id || \"\",\n    };\n  } else {\n    if (transfer.type === SubgraphTransferType.DEPOSIT) {\n      return {\n        type: TransferType.DEPOSIT,\n        tokenType: TokenType.ERC20,\n        token: {\n          address: transfer.token.id,\n          name: transfer.token.name,\n          symbol: transfer.token.symbol,\n          decimals: transfer.token.decimals,\n        },\n        amount: BigInt(transfer.amount),\n        creationDate,\n        transactionId: transfer.txHash,\n        from: transfer.from,\n        to: transfer.to,\n      };\n    }\n    return {\n      type: TransferType.WITHDRAW,\n      tokenType: TokenType.ERC20,\n      token: {\n        address: transfer.token.id,\n        name: transfer.token.name,\n        symbol: transfer.token.symbol,\n        decimals: transfer.token.decimals,\n      },\n      amount: BigInt(transfer.amount),\n      creationDate,\n      transactionId: transfer.txHash,\n      to: transfer.to,\n      from: transfer.from,\n      proposalId: transfer.proposal?.id || \"\",\n    };\n  }\n}\n\nexport function toPluginRepoRelease(\n  release: SubgraphPluginRepoReleaseListItem,\n  metadata: PluginRepoReleaseMetadata,\n): PluginRepoRelease {\n  return {\n    release: release.release,\n    currentBuild: Math.max(...release.builds.map((build) => build.build)),\n    metadata,\n  };\n}\n\nexport function toPluginRepoListItem(\n  pluginRepo: SubgraphPluginRepoListItem,\n  releases: PluginRepoRelease[],\n): PluginRepoListItem {\n  return {\n    address: pluginRepo.id,\n    subdomain: pluginRepo.subdomain,\n    releases,\n  };\n}\nexport function toPluginRepo(\n  pluginRepo: SubgraphPluginRepo,\n  releaseMetadata: PluginRepoReleaseMetadata,\n  buildMetadata: PluginRepoBuildMetadata,\n): PluginRepo {\n  return {\n    address: pluginRepo.id,\n    subdomain: pluginRepo.subdomain,\n    current: {\n      build: {\n        metadata: buildMetadata,\n        // the subgraph returns only one build ordered by build number\n        // in descending order, this means it's the latest build\n        number: pluginRepo.releases?.[0]?.builds?.[0]?.build,\n      },\n      release: {\n        metadata: releaseMetadata,\n        // the subgraph returns only one realease ordered by realease number\n        // in descending order, this means it's the latest realease\n        number: pluginRepo.releases?.[0]?.release,\n      },\n    },\n  };\n}\n\nexport function applyInstallatonParamsToContract(\n  params: ApplyInstallationParams,\n): PluginSetupProcessor.ApplyInstallationParamsStruct {\n  return {\n    plugin: params.pluginAddress,\n    pluginSetupRef: {\n      pluginSetupRepo: params.pluginRepo,\n      versionTag: params.versionTag,\n    },\n    helpersHash: keccak256(\n      defaultAbiCoder.encode([\"address[]\"], [params.helpers]),\n    ),\n    permissions: params.permissions.map((permission) => {\n      return { ...permission, condition: permission.condition || AddressZero };\n    }),\n  };\n}\nexport function applyUninstallationParamsToContract(\n  params: ApplyUninstallationParams,\n): PluginSetupProcessor.ApplyUninstallationParamsStruct {\n  return {\n    plugin: params.pluginAddress,\n    pluginSetupRef: {\n      pluginSetupRepo: params.pluginRepo,\n      versionTag: params.versionTag,\n    },\n    permissions: params.permissions.map((permission) => {\n      return { ...permission, condition: permission.condition || AddressZero };\n    }),\n  };\n}\nexport function applyInstallatonParamsFromContract(\n  result: Result,\n): DecodedApplyInstallationParams {\n  const params = result[1];\n  return {\n    helpersHash: params.helpersHash,\n    permissions: params.permissions,\n    versionTag: params.pluginSetupRef.versionTag,\n    pluginAddress: params.plugin,\n    pluginRepo: params.pluginSetupRef.pluginSetupRepo,\n  };\n}\n\nexport function permissionParamsToContract(\n  params: GrantPermissionParams | RevokePermissionParams,\n): ContractPermissionParams {\n  return [params.where, params.who, keccak256(toUtf8Bytes(params.permission))];\n}\nexport function permissionWithConditionParamsToContract(\n  params: GrantPermissionWithConditionParams,\n): ContractPermissionWithConditionParams {\n  return [\n    ...permissionParamsToContract({\n      who: params.who,\n      where: params.where,\n      permission: params.permission,\n    }),\n    params.condition,\n  ];\n}\n\nexport function permissionParamsFromContract(\n  result: Result,\n): GrantPermissionDecodedParams | RevokePermissionDecodedParams {\n  return {\n    where: result[0],\n    who: result[1],\n    permissionId: result[2],\n    permission: Object.keys(PermissionIds)\n      .find((k) => PermissionIds[k] === result[2])\n      ?.replace(/_ID$/, \"\") || \"\",\n  };\n}\nexport function permissionParamsWitConditionFromContract(\n  result: Result,\n): GrantPermissionWithConditionDecodedParams {\n  return {\n    ...permissionParamsFromContract(result),\n    condition: result[3],\n  };\n}\n\nexport function withdrawParamsFromContract(\n  to: string,\n  _value: bigint,\n  result: Result,\n  tokenStandard: TokenType,\n): WithdrawParams {\n  if (tokenStandard === TokenType.ERC20) {\n    return {\n      type: TokenType.ERC20,\n      tokenAddress: to,\n      recipientAddressOrEns: result[0],\n      amount: BigInt(result[1]),\n    };\n  }\n  // TODO Add ERC721 and ERC1155\n  throw new Error(\"not implemented\");\n}\n","import { DAO__factory } from \"@aragon/osx-ethers\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport {\n  DaoMetadata,\n  PluginRepoBuildMetadata,\n  PluginRepoReleaseMetadata,\n} from \"../types\";\nimport { erc20ContractAbi } from \"./abi/erc20\";\n\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  new Contract(AddressZero, erc20ContractAbi).interface.getFunction(\"transfer\")\n    .format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"grant\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"grantWithCondition\").format(\n    \"minimal\",\n  ),\n  DAO__factory.createInterface().getFunction(\"revoke\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"setMetadata\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"setDaoURI\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"registerStandardCallback\").format(\n    \"minimal\",\n  ),\n  DAO__factory.createInterface().getFunction(\"setSignatureValidator\").format(\n    \"minimal\",\n  ),\n  DAO__factory.createInterface().getFunction(\"upgradeTo\").format(\"minimal\"),\n  DAO__factory.createInterface().getFunction(\"upgradeToAndCall\").format(\n    \"minimal\",\n  ),\n];\n\nexport const UNSUPPORTED_DAO_METADATA_LINK: DaoMetadata = {\n  name: \"(unsupported metadata link)\",\n  description: \"(the metadata link is not supported)\",\n  links: [],\n};\nexport const EMPTY_DAO_METADATA_LINK: DaoMetadata = {\n  name: \"(the DAO has no metadata)\",\n  description: \"(the DAO did not define any content)\",\n  links: [],\n};\n\nexport const UNAVAILABLE_DAO_METADATA: DaoMetadata = {\n  name: \"(unavailable metadata)\",\n  description: \"(the DAO metadata is not available)\",\n  links: [],\n};\nexport const UNSUPPORTED_RELEASE_METADATA_LINK: PluginRepoReleaseMetadata = {\n  name: \"(unsupported metadata link)\",\n  description: \"(the metadata link is not supported)\",\n  images: {},\n};\nexport const EMPTY_RELEASE_METADATA_LINK: PluginRepoReleaseMetadata = {\n  name: \"(the release has no metadata)\",\n  description: \"(the release did not define any content)\",\n  images: {},\n};\n\nexport const UNAVAILABLE_RELEASE_METADATA: PluginRepoReleaseMetadata = {\n  name: \"(unavailable metadata)\",\n  description: \"(the release metadata is not available)\",\n  images: {},\n};\n\nexport const UNSUPPORTED_BUILD_METADATA_LINK: PluginRepoBuildMetadata = {\n  ui: \"\",\n  change: \"(unsupported metadata link)\",\n  pluginSetupABI: {\n    prepareInstallation: [],\n    prepareUninstallation: [],\n    prepareUpdate: [],\n  },\n};\nexport const EMPTY_BUILD_METADATA_LINK: PluginRepoBuildMetadata = {\n  ui: \"\",\n  change: \"(the build has no metadata)\",\n  pluginSetupABI: {\n    prepareInstallation: [],\n    prepareUninstallation: [],\n    prepareUpdate: [],\n  },\n};\n\nexport const UNAVAILABLE_BUILD_METADATA: PluginRepoBuildMetadata = {\n  ui: \"\",\n  change: \"(unavailable metadata)\",\n  pluginSetupABI: {\n    prepareInstallation: [],\n    prepareUninstallation: [],\n    prepareUpdate: [],\n  },\n};\n","import {\n  DAO__factory,\n  DAOFactory,\n  DAOFactory__factory,\n  DAORegistry__factory,\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  AmountMismatchError,\n  FailedDepositError,\n  InstallationNotFoundError,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidEnsError,\n  IpfsPinError,\n  MissingExecPermissionError,\n  NoProviderError,\n  PluginUninstallationPreparationError,\n  resolveIpfsCid,\n  UpdateAllowanceError,\n} from \"@aragon/sdk-common\";\n\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract, ContractTransaction } from \"@ethersproject/contracts\";\nimport { erc20ContractAbi } from \"../abi/erc20\";\nimport {\n  QueryDao,\n  QueryDaos,\n  QueryIPlugin,\n  QueryPlugin,\n  QueryPlugins,\n  QueryTokenBalances,\n  QueryTokenTransfers,\n} from \"../graphql-queries\";\nimport {\n  AssetBalance,\n  AssetBalanceSortBy,\n  CreateDaoParams,\n  DaoBalancesQueryParams,\n  DaoCreationSteps,\n  DaoCreationStepValue,\n  DaoDepositSteps,\n  DaoDepositStepValue,\n  DaoDetails,\n  DaoListItem,\n  DaoMetadata,\n  DaoQueryParams,\n  DaoSortBy,\n  DepositParams,\n  HasPermissionParams,\n  PluginQueryParams,\n  PluginRepo,\n  PluginRepoBuildMetadata,\n  PluginRepoListItem,\n  PluginRepoRelease,\n  PluginRepoReleaseMetadata,\n  PluginSortBy,\n  PrepareUninstallationParams,\n  PrepareUninstallationSteps,\n  PrepareUninstallationStepValue,\n  SetAllowanceParams,\n  SetAllowanceSteps,\n  SetAllowanceStepValue,\n  Transfer,\n  TransferQueryParams,\n  TransferSortBy,\n} from \"../../types\";\nimport {\n  SubgraphBalance,\n  SubgraphDao,\n  SubgraphDaoListItem,\n  SubgraphPluginInstallation,\n  SubgraphPluginRepo,\n  SubgraphPluginRepoListItem,\n  SubgraphTransferListItem,\n  SubgraphTransferTypeMap,\n} from \"../types\";\nimport {\n  ClientCore,\n  findLog,\n  LIVE_CONTRACTS,\n  MultiTargetPermission,\n  SortDirection,\n  TokenType,\n} from \"../../client-common\";\nimport {\n  toAssetBalance,\n  toDaoDetails,\n  toDaoListItem,\n  toPluginRepo,\n  toPluginRepoListItem,\n  toPluginRepoRelease,\n  toTokenTransfer,\n  unwrapDepositParams,\n} from \"../utils\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { id } from \"@ethersproject/hash\";\nimport {\n  EMPTY_BUILD_METADATA_LINK,\n  EMPTY_DAO_METADATA_LINK,\n  EMPTY_RELEASE_METADATA_LINK,\n  UNAVAILABLE_BUILD_METADATA,\n  UNAVAILABLE_DAO_METADATA,\n  UNAVAILABLE_RELEASE_METADATA,\n  UNSUPPORTED_BUILD_METADATA_LINK,\n  UNSUPPORTED_DAO_METADATA_LINK,\n  UNSUPPORTED_RELEASE_METADATA_LINK,\n} from \"../constants\";\nimport { IClientMethods } from \"../../interfaces\";\nimport { PermissionIds } from \"../../constants\";\n\n/**\n * Methods module the SDK Generic Client\n */\nexport class ClientMethods extends ClientCore implements IClientMethods {\n  /**\n   * Creates a DAO with the given settings and plugins\n   *\n   * @param {CreateDaoParams} params\n   * @return {*}  {AsyncGenerator<DaoCreationStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *createDao(\n    params: CreateDaoParams,\n  ): AsyncGenerator<DaoCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (\n      params.ensSubdomain && !params.ensSubdomain.match(/^[a-z0-9\\-]+$/)\n    ) {\n      throw new InvalidEnsError();\n    }\n\n    const daoFactoryInstance = DAOFactory__factory.connect(\n      this.web3.getDaoFactoryAddress(),\n      signer,\n    );\n\n    const pluginInstallationData: DAOFactory.PluginSettingsStruct[] = [];\n    for (const plugin of params.plugins) {\n      const repo = PluginRepo__factory.connect(plugin.id, signer);\n\n      const currentRelease = await repo.latestRelease();\n      const latestVersion = await repo[\"getLatestVersion(uint8)\"](\n        currentRelease,\n      );\n      pluginInstallationData.push({\n        pluginSetupRef: {\n          pluginSetupRepo: repo.address,\n          versionTag: latestVersion.tag,\n        },\n        data: plugin.data,\n      });\n    }\n\n    // check if at least one plugin requests EXECUTE_PERMISSION on the DAO\n    // This check isn't 100% correct all the time\n    // simulate the DAO creation to get an address\n    const pluginSetupProcessorAddr = await daoFactoryInstance\n      .pluginSetupProcessor();\n    const pluginSetupProcessor = PluginSetupProcessor__factory.connect(\n      pluginSetupProcessorAddr,\n      signer,\n    );\n    let execPermissionFound = false;\n\n    // using the DAO base because it reflects a newly created DAO the best\n    const daoBaseAddr = await daoFactoryInstance.daoBase();\n    // simulates each plugin installation seperately to get the requested permissions\n    for (const installData of pluginInstallationData) {\n      const pluginSetupProcessorResponse = await pluginSetupProcessor.callStatic\n        .prepareInstallation(daoBaseAddr, installData);\n      const found = pluginSetupProcessorResponse[1].permissions.find(\n        (permission) =>\n          permission.permissionId === PermissionIds.EXECUTE_PERMISSION_ID,\n      );\n      if (found) {\n        execPermissionFound = true;\n        break;\n      }\n    }\n\n    if (!execPermissionFound) {\n      throw new MissingExecPermissionError();\n    }\n\n    const tx = await daoFactoryInstance.connect(signer).createDao(\n      {\n        subdomain: params.ensSubdomain,\n        metadata: toUtf8Bytes(params.metadataUri),\n        daoURI: params.daoUri || \"\",\n        trustedForwarder: params.trustedForwarder || AddressZero,\n      },\n      pluginInstallationData,\n    );\n\n    yield {\n      key: DaoCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n    // start tx\n    const receipt = await tx.wait();\n    const daoFactoryInterface = DAORegistry__factory.createInterface();\n    // find dao address using the dao registry address\n    const log = receipt.logs?.find(\n      (e) =>\n        e.topics[0] ===\n          id(daoFactoryInterface.getEvent(\"DAORegistered\").format(\"sighash\")),\n    );\n\n    if (!log) {\n      throw new Error(\"Failed to create DAO\");\n    }\n\n    // Plugin logs\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const installedLogs = receipt.logs?.filter(\n      (e) =>\n        e.topics[0] ===\n          id(pspInterface.getEvent(\"InstallationApplied\").format(\"sighash\")),\n    );\n\n    // DAO logs\n    const parsedLog = daoFactoryInterface.parseLog(log);\n    if (!parsedLog.args[\"dao\"]) {\n      throw new Error(\"Failed to create DAO\");\n    }\n\n    yield {\n      key: DaoCreationSteps.DONE,\n      address: parsedLog.args[\"dao\"],\n      pluginAddresses: installedLogs.map(\n        (log) => pspInterface.parseLog(log).args[1],\n      ),\n    };\n  }\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {DaoMetadata} params\n   * @return {*}  {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async pinMetadata(params: DaoMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch (e) {\n      throw new IpfsPinError(e);\n    }\n  }\n  /**\n   * Deposits ether or an ERC20 token into the DAO\n   *\n   * @param {DepositParams} params\n   * @return {*}  {AsyncGenerator<DaoDepositStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *deposit(\n    params: DepositParams,\n  ): AsyncGenerator<DaoDepositStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    if (params.type !== TokenType.NATIVE && params.type !== TokenType.ERC20) {\n      throw new Error(\"Please, use the token's transfer function directly\");\n    }\n\n    const [daoAddress, amount, tokenAddress, reference] = unwrapDepositParams(\n      params,\n    );\n\n    if (tokenAddress && tokenAddress !== AddressZero) {\n      // check current allowance\n      const tokenInstance = new Contract(\n        tokenAddress,\n        erc20ContractAbi,\n        signer,\n      );\n      const currentAllowance = await tokenInstance.allowance(\n        await signer.getAddress(),\n        daoAddress,\n      );\n      yield {\n        key: DaoDepositSteps.CHECKED_ALLOWANCE,\n        allowance: currentAllowance.toBigInt(),\n      };\n      // if its lower than the needed, set it to the correct one\n      if (currentAllowance.lt(params.amount)) {\n        // If the target is an ERC20 token, ensure that the amount can be transferred\n        // Relay the yield steps to the caller as they are received\n        yield* this.setAllowance(\n          {\n            amount: params.amount,\n            spender: daoAddress,\n            tokenAddress,\n          },\n        );\n      }\n    }\n\n    // Doing the transfer\n    const daoInstance = DAO__factory.connect(daoAddress, signer);\n    const override: { value?: bigint } = {};\n\n    if (tokenAddress === AddressZero) {\n      // Ether\n      override.value = amount;\n    }\n\n    const tx = await daoInstance.deposit(\n      tokenAddress,\n      amount,\n      reference,\n      override,\n    );\n    yield { key: DaoDepositSteps.DEPOSITING, txHash: tx.hash };\n\n    const cr = await tx.wait();\n    const log = findLog(cr, daoInstance.interface, \"Deposited\");\n    if (!log) {\n      throw new FailedDepositError();\n    }\n\n    const daoInterface = DAO__factory.createInterface();\n    const parsedLog = daoInterface.parseLog(log);\n\n    if (!amount.toString() === parsedLog.args[\"amount\"]) {\n      throw new AmountMismatchError(\n        amount,\n        parsedLog.args[\"amount\"].toBigInt(),\n      );\n    }\n    yield { key: DaoDepositSteps.DONE, amount: amount };\n  }\n\n  /**\n   * Checks if the allowance is enough and updates it\n   *\n   * @param {SetAllowanceParams} params\n   * @return {*}  {AsyncGenerator<SetAllowanceStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *setAllowance(\n    params: SetAllowanceParams,\n  ): AsyncGenerator<SetAllowanceStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    // TODO\n    // add params check with yup\n    const tokenInstance = new Contract(\n      params.tokenAddress,\n      erc20ContractAbi,\n      signer,\n    );\n    const tx: ContractTransaction = await tokenInstance.approve(\n      params.spender,\n      params.amount,\n    );\n\n    yield {\n      key: SetAllowanceSteps.SETTING_ALLOWANCE,\n      txHash: tx.hash,\n    };\n\n    const cr = await tx.wait();\n    const log = findLog(cr, tokenInstance.interface, \"Approval\");\n\n    if (!log) {\n      throw new UpdateAllowanceError();\n    }\n    const value = log.data;\n    if (!value || BigNumber.from(params.amount).gt(BigNumber.from(value))) {\n      throw new UpdateAllowanceError();\n    }\n\n    yield {\n      key: SetAllowanceSteps.ALLOWANCE_SET,\n      allowance: params.amount,\n    };\n  }\n  /**\n   * Prepare uninstallation of a plugin\n   *\n   * @param {PrepareUninstallationParams} params\n   * @return {*}  {AsyncGenerator<PrepareUninstallationStepValue>}\n   * @memberof ClientMethods\n   */\n  public async *prepareUninstallation(\n    params: PrepareUninstallationParams,\n  ): AsyncGenerator<PrepareUninstallationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const networkName = this.web3.getNetworkName();\n    type T = {\n      iplugin: { installations: SubgraphPluginInstallation[] };\n    };\n    const { iplugin } = await this.graphql.request<T>({\n      query: QueryIPlugin,\n      params: {\n        address: params.pluginAddress.toLowerCase(),\n        where: { dao: params.daoAddressOrEns },\n      },\n      name: \"plugin\",\n    });\n\n    // filter specified installation\n    const { pluginInstallationIndex = 0 } = params;\n    const selectedInstallation = iplugin.installations[pluginInstallationIndex];\n    if (!selectedInstallation) {\n      throw new InstallationNotFoundError();\n    }\n    // encode uninstallation params\n    const { uninstallationParams = [], uninstallationAbi = [] } = params;\n    const data = defaultAbiCoder.encode(\n      uninstallationAbi,\n      uninstallationParams,\n    );\n    // connect to psp contract\n    const pspContract = PluginSetupProcessor__factory.connect(\n      LIVE_CONTRACTS[networkName].pluginSetupProcessor,\n      signer,\n    );\n    const tx = await pspContract.prepareUninstallation(\n      params.daoAddressOrEns,\n      {\n        pluginSetupRef: {\n          pluginSetupRepo:\n            selectedInstallation.appliedPreparation.pluginRepo.id,\n          versionTag: {\n            build: selectedInstallation.appliedVersion.build,\n            release: selectedInstallation.appliedVersion.release.release,\n          },\n        },\n        setupPayload: {\n          plugin: params.pluginAddress,\n          currentHelpers: selectedInstallation.appliedPreparation.helpers,\n          data,\n        },\n      },\n    );\n    yield {\n      key: PrepareUninstallationSteps.PREPARING,\n      txHash: tx.hash,\n    };\n    const cr = await tx.wait();\n\n    const log = findLog(cr, pspContract.interface, \"UninstallationPrepared\");\n    if (!log) {\n      throw new PluginUninstallationPreparationError();\n    }\n    const parsedLog = pspContract.interface.parseLog(log);\n    const permissions = parsedLog.args[\"permissions\"];\n    if (!permissions) {\n      throw new PluginUninstallationPreparationError();\n    }\n    yield {\n      key: PrepareUninstallationSteps.DONE,\n      permissions: permissions.map((permission: MultiTargetPermission) => ({\n        operation: permission.operation,\n        where: permission.where,\n        who: permission.who,\n        permissionId: permission.permissionId,\n      })),\n      pluginRepo: selectedInstallation.appliedPreparation.pluginRepo.id,\n      pluginAddress: params.pluginAddress,\n      versionTag: {\n        build: selectedInstallation.appliedVersion.build,\n        release: selectedInstallation.appliedVersion.release.release,\n      },\n    };\n  }\n  /**\n   * Checks whether a role is granted by the current DAO's ACL settings\n   *\n   * @param {HasPermissionParams} params\n   * @return {*}  {Promise<boolean>}\n   * @memberof ClientMethods\n   */\n  public async hasPermission(params: HasPermissionParams): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n    // connect to the managing dao\n    const daoInstance = DAO__factory.connect(params.daoAddressOrEns, signer);\n    return daoInstance.hasPermission(\n      params.where,\n      params.who,\n      id(params.permission),\n      params.data || new Uint8Array([]),\n    );\n  }\n  /**\n   * Retrieves metadata for DAO with given identifier (address or ens domain)\n   *\n   * @param {string} daoAddressOrEns\n   * @return {*}  {(Promise<DaoDetails | null>)}\n   * @memberof ClientMethods\n   */\n  public async getDao(daoAddressOrEns: string): Promise<DaoDetails | null> {\n    let address = daoAddressOrEns;\n    if (!isAddress(address)) {\n      await this.web3.ensureOnline();\n      const provider = this.web3.getProvider();\n      if (!provider) {\n        throw new NoProviderError();\n      }\n      try {\n        const resolvedAddress = await provider.resolveName(address);\n        if (!resolvedAddress) {\n          throw new InvalidAddressOrEnsError();\n        }\n        address = resolvedAddress.toLowerCase();\n      } catch (e) {\n        throw new InvalidAddressOrEnsError(e);\n      }\n    }\n    const query = QueryDao;\n    const params = { address };\n    const name = \"DAO\";\n    type T = { dao: SubgraphDao };\n    const { dao } = await this.graphql.request<T>({ query, params, name });\n    if (!dao) {\n      return null;\n    } else if (!dao.metadata) {\n      return toDaoDetails(\n        dao,\n        EMPTY_DAO_METADATA_LINK,\n      );\n    }\n    try {\n      const metadataCid = resolveIpfsCid(dao.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as DaoMetadata;\n      return toDaoDetails(dao, metadata);\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toDaoDetails(dao, UNSUPPORTED_DAO_METADATA_LINK);\n      }\n      return toDaoDetails(dao, UNAVAILABLE_DAO_METADATA);\n    }\n  }\n  /**\n   * Retrieves metadata for DAO with given identifier (address or ens domain)\n   *\n   * @param {DaoQueryParams} {\n   *     limit = 10,\n   *     skip = 0,\n   *     direction = SortDirection.ASC,\n   *     sortBy = DaoSortBy.CREATED_AT,\n   *   }\n   * @return {*}  {Promise<DaoListItem[]>}\n   * @memberof ClientMethods\n   */\n  public async getDaos({\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = DaoSortBy.CREATED_AT,\n  }: DaoQueryParams): Promise<DaoListItem[]> {\n    const query = QueryDaos;\n    const params = {\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"DAOs\";\n    type T = { daos: SubgraphDaoListItem[] };\n    const { daos } = await this.graphql.request<T>({ query, params, name });\n    return Promise.all(\n      daos.map(\n        async (dao: SubgraphDaoListItem): Promise<DaoListItem> => {\n          if (!dao.metadata) {\n            return toDaoListItem(\n              dao,\n              EMPTY_DAO_METADATA_LINK,\n            );\n          }\n          try {\n            const metadataCid = resolveIpfsCid(dao.metadata);\n            const stringMetadata = await this.ipfs.fetchString(metadataCid);\n            const metadata = JSON.parse(stringMetadata);\n            return toDaoListItem(dao, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toDaoListItem(dao, UNSUPPORTED_DAO_METADATA_LINK);\n            }\n            return toDaoListItem(dao, UNAVAILABLE_DAO_METADATA);\n          }\n        },\n      ),\n    );\n  }\n  /**\n   * Retrieves the asset balances of the given DAO, by default, ETH, DAI, USDC and USDT on Mainnet\n   *\n   * @param {DaoBalancesQueryParams} {\n   *     daoAddressOrEns,\n   *     limit = 10,\n   *     skip = 0,\n   *     direction = SortDirection.ASC,\n   *     sortBy = AssetBalanceSortBy.LAST_UPDATED,\n   *   }\n   * @return {*}  {(Promise<AssetBalance[] | null>)}\n   * @memberof ClientMethods\n   */\n  public async getDaoBalances({\n    daoAddressOrEns,\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = AssetBalanceSortBy.LAST_UPDATED,\n  }: DaoBalancesQueryParams): Promise<AssetBalance[] | null> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        const resolvedAddress = await provider.resolveName(address);\n        if (!resolvedAddress) {\n          throw new InvalidAddressOrEnsError();\n        }\n        address = resolvedAddress;\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    const query = QueryTokenBalances;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"dao balances\";\n    type T = { tokenBalances: SubgraphBalance[] };\n    const { tokenBalances } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (tokenBalances.length === 0) {\n      return [];\n    }\n    return Promise.all(\n      tokenBalances.map(\n        (balance: SubgraphBalance): AssetBalance => toAssetBalance(balance),\n      ),\n    );\n  }\n  /**\n   * Retrieves the list of asset transfers to and from the given DAO (by default, from ETH, DAI, USDC and USDT, on Mainnet)\n   *\n   * @param {TransferQueryParams} {\n   *     daoAddressOrEns,\n   *     type,\n   *     limit = 10,\n   *     skip = 0,\n   *     direction = SortDirection.ASC,\n   *     sortBy = TransferSortBy.CREATED_AT,\n   *   }\n   * @return {*}  {(Promise<Transfer[] | null>)}\n   * @memberof ClientMethods\n   */\n  public async getDaoTransfers({\n    daoAddressOrEns,\n    type,\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = TransferSortBy.CREATED_AT,\n  }: TransferQueryParams): Promise<Transfer[] | null> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        try {\n          const resolvedAddress = await provider.resolveName(address);\n          if (!resolvedAddress) {\n            throw new InvalidAddressOrEnsError();\n          }\n          address = resolvedAddress;\n        } catch (e) {\n          throw new InvalidAddressOrEnsError(e);\n        }\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (type) {\n      where = { ...where, type: SubgraphTransferTypeMap.get(type) };\n    }\n    const query = QueryTokenTransfers;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"dao transfers\";\n    type T = { tokenTransfers: SubgraphTransferListItem[] };\n    const { tokenTransfers } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenTransfers) {\n      return null;\n    }\n    return Promise.all(\n      tokenTransfers.map(\n        (transfer: SubgraphTransferListItem): Transfer =>\n          toTokenTransfer(transfer),\n      ),\n    );\n  }\n\n  /**\n   * Retrieves the list of plugins available on the PluginRegistry\n   *\n   * @param {PluginQueryParams} {\n   *     limit = 10,\n   *     skip = 0,\n   *     direction = SortDirection.ASC,\n   *     sortBy = PluginSortBy.SUBDOMAIN,\n   *     subdomain\n   *   }\n   * @return {*}  {(Promise<PluginRepo[] | null>)}\n   * @memberof ClientMethods\n   */\n  public async getPlugins({\n    limit = 10,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = PluginSortBy.SUBDOMAIN,\n    subdomain,\n  }: PluginQueryParams = {}): Promise<PluginRepoListItem[]> {\n    let where = {};\n    if (subdomain) {\n      where = { subdomain_contains_nocase: subdomain };\n    }\n    const query = QueryPlugins;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"plugin repos\";\n    type T = { pluginRepos: SubgraphPluginRepoListItem[] };\n    const { pluginRepos } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      pluginRepos.map(\n        async (\n          pluginRepo: SubgraphPluginRepoListItem,\n        ): Promise<PluginRepoListItem> => {\n          let pluginRepoReleases: PluginRepoRelease[] = [];\n          for (const release of pluginRepo.releases) {\n            let metadata: PluginRepoReleaseMetadata;\n            if (!release.metadata) {\n              metadata = EMPTY_RELEASE_METADATA_LINK;\n            } else {\n              try {\n                const metadataCid = resolveIpfsCid(release.metadata);\n                const stringMetadata = await this.ipfs.fetchString(metadataCid);\n                const resolvedMetadata = JSON.parse(stringMetadata);\n                metadata = resolvedMetadata;\n              } catch (err) {\n                metadata = UNAVAILABLE_RELEASE_METADATA;\n                if (err instanceof InvalidCidError) {\n                  metadata = UNSUPPORTED_RELEASE_METADATA_LINK;\n                }\n              }\n            }\n            pluginRepoReleases = [\n              ...pluginRepoReleases,\n              toPluginRepoRelease(release, metadata),\n            ];\n          }\n          return toPluginRepoListItem(pluginRepo, pluginRepoReleases);\n        },\n      ),\n    );\n  }\n  /**\n   * Get plugin details given an address, release and build\n   *\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<PluginRepo>}\n   * @memberof ClientMethods\n   */\n  public async getPlugin(pluginAddress: string): Promise<PluginRepo> {\n    const name = \"plugin version\";\n    const query = QueryPlugin;\n    type T = { pluginRepo: SubgraphPluginRepo };\n    const { pluginRepo } = await this.graphql.request<T>({\n      query,\n      params: { id: pluginAddress },\n      name,\n    });\n    // get release metadata\n    let releaseMetadata: PluginRepoReleaseMetadata;\n    if (!pluginRepo.releases[0].metadata) {\n      releaseMetadata = EMPTY_RELEASE_METADATA_LINK;\n    } else {\n      try {\n        const metadataCid = resolveIpfsCid(pluginRepo.releases[0].metadata);\n        const stringMetadata = await this.ipfs.fetchString(metadataCid);\n        const resolvedMetadata = JSON.parse(stringMetadata);\n        releaseMetadata = resolvedMetadata;\n      } catch (err) {\n        releaseMetadata = UNAVAILABLE_RELEASE_METADATA;\n        if (err instanceof InvalidCidError) {\n          releaseMetadata = UNSUPPORTED_RELEASE_METADATA_LINK;\n        }\n      }\n    }\n    // get build metadata\n    let buildMetadata: PluginRepoBuildMetadata;\n    if (!pluginRepo.releases[0].builds[0].metadata) {\n      buildMetadata = EMPTY_BUILD_METADATA_LINK;\n    } else {\n      try {\n        const metadataCid = resolveIpfsCid(\n          pluginRepo.releases[0].builds[0].metadata,\n        );\n        const stringMetadata = await this.ipfs.fetchString(metadataCid);\n        const resolvedMetadata = JSON.parse(stringMetadata);\n        buildMetadata = resolvedMetadata;\n      } catch (err) {\n        buildMetadata = UNAVAILABLE_BUILD_METADATA;\n        if (err instanceof InvalidCidError) {\n          buildMetadata = UNSUPPORTED_BUILD_METADATA_LINK;\n        }\n      }\n    }\n    return toPluginRepo(pluginRepo, releaseMetadata, buildMetadata);\n  }\n}\n","import {\n  ApplyUninstallationParams,\n  GrantPermissionParams,\n  GrantPermissionWithConditionParams,\n  RegisterStandardCallbackParams,\n  RevokePermissionParams,\n  UpgradeToAndCallParams,\n  WithdrawParams,\n} from \"../../types\";\nimport {\n  ApplyInstallationParams,\n  ClientCore,\n  DaoAction,\n  LIVE_CONTRACTS,\n  TokenType,\n} from \"../../client-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  DAO__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  applyInstallatonParamsToContract,\n  applyUninstallationParamsToContract,\n  permissionParamsToContract,\n  permissionWithConditionParamsToContract,\n} from \"../utils\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { erc20ContractAbi } from \"../abi/erc20\";\nimport {\n  hexToBytes,\n  InvalidAddressError,\n} from \"@aragon/sdk-common\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { IClientEncoding } from \"../../interfaces\";\nimport { Permissions } from \"../../constants\";\n\n/**\n * Encoding module the SDK Generic Client\n */\nexport class ClientEncoding extends ClientCore implements IClientEncoding {\n  /**\n   * @param {string} daoAddress\n   * @param {ApplyInstallationParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public applyInstallationAction(\n    daoAddress: string,\n    params: ApplyInstallationParams,\n  ): DaoAction[] {\n    if (!isAddress(daoAddress)) {\n      throw new InvalidAddressError();\n    }\n    const network = this.web3.getNetworkName();\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n\n    const args = applyInstallatonParamsToContract(params);\n    const hexBytes = pspInterface.encodeFunctionData(\"applyInstallation\", [\n      daoAddress,\n      args,\n    ]);\n    // Grant ROOT_PERMISION in the DAO to the PSP\n    const grantAction = this.grantAction(daoAddress, {\n      where: daoAddress,\n      who: LIVE_CONTRACTS[network].pluginSetupProcessor,\n      permission: Permissions.ROOT_PERMISSION,\n    });\n\n    // Revoke ROOT_PERMISION in the DAO to the PSP\n    const revokeAction = this.revokeAction(daoAddress, {\n      where: daoAddress,\n      who: LIVE_CONTRACTS[network].pluginSetupProcessor,\n      permission: Permissions.ROOT_PERMISSION,\n    });\n    return [\n      grantAction,\n      {\n        to: LIVE_CONTRACTS[network].pluginSetupProcessor,\n        value: BigInt(0),\n        data: hexToBytes(hexBytes),\n      },\n      revokeAction,\n    ];\n  }\n\n  public applyUninstallationAction(\n    daoAddress: string,\n    params: ApplyUninstallationParams,\n  ): DaoAction[] {\n    const network = this.web3.getNetworkName();\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const args = applyUninstallationParamsToContract(params);\n    const hexBytes = pspInterface.encodeFunctionData(\"applyUninstallation\", [\n      daoAddress,\n      args,\n    ]);\n    // Grant ROOT_PERMISION in the DAO to the PSP\n    const grantAction = this.grantAction(daoAddress, {\n      where: daoAddress,\n      who: LIVE_CONTRACTS[network].pluginSetupProcessor,\n      permission: Permissions.ROOT_PERMISSION,\n    });\n\n    // Revoke ROOT_PERMISION in the DAO to the PSP\n    const revokeAction = this.revokeAction(daoAddress, {\n      where: daoAddress,\n      who: LIVE_CONTRACTS[network].pluginSetupProcessor,\n      permission: Permissions.ROOT_PERMISSION,\n    });\n    return [\n      grantAction,\n      {\n        to: LIVE_CONTRACTS[network].pluginSetupProcessor,\n        value: BigInt(0),\n        data: hexToBytes(hexBytes),\n      },\n      revokeAction,\n    ];\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that grants a permission within a DAO\n   *\n   * @param {string} daoAddress\n   * @param {GrantPermissionParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public grantAction(\n    daoAddress: string,\n    params: GrantPermissionParams,\n  ): DaoAction {\n    const { where, who } = params;\n    if (\n      !isAddress(where) || !isAddress(who) || !isAddress(daoAddress)\n    ) {\n      throw new InvalidAddressError();\n    }\n    const daoInterface = DAO__factory.createInterface();\n    const args = permissionParamsToContract(\n      {\n        who,\n        where,\n        permission: params.permission,\n      },\n    );\n    // get hex bytes\n    const hexBytes = daoInterface.encodeFunctionData(\"grant\", args);\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that grants a permission within a DAO given a certain condition\n   *\n   * @param {string} daoAddress\n   * @param {GrantPermissionWithConditionParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public grantWithConditionAction(\n    daoAddress: string,\n    params: GrantPermissionWithConditionParams,\n  ): DaoAction {\n    const { where, who } = params;\n    if (\n      !isAddress(where) || !isAddress(who) || !isAddress(daoAddress)\n    ) {\n      throw new InvalidAddressError();\n    }\n    const daoInterface = DAO__factory.createInterface();\n    const args = permissionWithConditionParamsToContract(\n      {\n        who,\n        where,\n        permission: params.permission,\n        condition: params.condition,\n      },\n    );\n    // get hex bytes\n    const hexBytes = daoInterface.encodeFunctionData(\n      \"grantWithCondition\",\n      args,\n    );\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that revokes a permission within a DAO\n   *\n   * @param {string} daoAddress\n   * @param {RevokePermissionParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public revokeAction(\n    daoAddress: string,\n    params: RevokePermissionParams,\n  ): DaoAction {\n    const { where, who } = params;\n    if (\n      !isAddress(where) || !isAddress(who) || !isAddress(daoAddress)\n    ) {\n      throw new InvalidAddressError();\n    }\n    const daoInterface = DAO__factory.createInterface();\n    const args = permissionParamsToContract(\n      {\n        who,\n        where,\n        permission: params.permission,\n      },\n    );\n    // get hex bytes\n    const hexBytes = daoInterface.encodeFunctionData(\"revoke\", args);\n    return {\n      to: daoAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that withdraws ether from the DAO\n   *\n   * @param {string} recipientAddressOrEns\n   * @param {WithdrawParams} value\n   * @return {*}  {Promise<DaoAction>}\n   * @memberof ClientEncoding\n   */\n  public async withdrawAction(params: WithdrawParams): Promise<DaoAction> {\n    let to = params.recipientAddressOrEns;\n    if (!isAddress(params.recipientAddressOrEns)) {\n      const resolvedAddress = await this.web3.getSigner()?.resolveName(\n        params.recipientAddressOrEns,\n      );\n      if (!resolvedAddress) {\n        throw new Error(\"invalid ens\");\n      }\n      to = resolvedAddress;\n    }\n\n    switch (params.type) {\n      case TokenType.NATIVE:\n        return { to, value: params.amount, data: new Uint8Array() };\n      case TokenType.ERC20:\n        if (!params.tokenAddress) {\n          throw new Error(\"Empty token contract address\");\n        }\n\n        const iface = new Contract(\n          params.tokenAddress,\n          erc20ContractAbi,\n        ).interface;\n        const data = iface.encodeFunctionData(\"transfer\", [\n          params.recipientAddressOrEns,\n          params.amount,\n        ]);\n        return {\n          to: params.tokenAddress,\n          value: BigInt(0),\n          data: hexToBytes(data),\n        };\n    }\n    throw new Error(\"Unsupported token type\");\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that updates the metadata the DAO\n   *\n   * @param {string} daoAddressOrEns\n   * @param {DaoMetadata} params\n   * @return {*}  {Promise<DaoAction>}\n   * @memberof ClientEncoding\n   */\n  public async updateDaoMetadataAction(\n    daoAddressOrEns: string,\n    metadataUri: string,\n  ): Promise<DaoAction> {\n    let address = daoAddressOrEns;\n    if (!isAddress(daoAddressOrEns)) {\n      const resolvedAddress = await this.web3.getSigner()?.resolveName(\n        daoAddressOrEns,\n      );\n      if (!resolvedAddress) {\n        throw new Error(\"Invalid ENS\");\n      }\n      address = resolvedAddress;\n    }\n    // upload metadata to IPFS\n    const daoInterface = DAO__factory.createInterface();\n    const args = toUtf8Bytes(metadataUri);\n    const hexBytes = daoInterface.encodeFunctionData(\"setMetadata\", [args]);\n    return {\n      to: address,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets the dao uri\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} daoUri\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public setDaoUriAction(\n    daoAddressOrEns: string,\n    daoUri: string,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"setDaoURI\", [daoUri]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that registers a new standard callback\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} daoUri\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public registerStandardCallbackAction(\n    daoAddressOrEns: string,\n    params: RegisterStandardCallbackParams,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\n      \"registerStandardCallback\",\n      [params.interfaceId, params.callbackSelector, params.magicNumber],\n    );\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets the signature validator\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} signatureValidator\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public setSignatureValidatorAction(\n    daoAddressOrEns: string,\n    signatureValidator: string,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"setSignatureValidator\", [\n      signatureValidator,\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets a new implementation for the proxy\n   *\n   * @param {string} daoAddressOrEns\n   * @param {string} implementationAddress\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public upgradeToAction(\n    daoAddressOrEns: string,\n    implementationAddress: string,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"upgradeTo\", [\n      implementationAddress,\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the payload to be given when creating a proposal that sets a new implementation for the proxy and calls the callback function with the specified data\n   *\n   * @param {string} daoAddressOrEns\n   * @param {UpgradeToAndCallParams} params\n   * @return {*}  {DaoAction}\n   * @memberof ClientEncoding\n   */\n  public upgradeToAndCallAction(\n    daoAddressOrEns: string,\n    params: UpgradeToAndCallParams,\n  ): DaoAction {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = daoInterface.encodeFunctionData(\"upgradeToAndCall\", [\n      params.implementationAddress,\n      params.data,\n    ]);\n    return {\n      to: daoAddressOrEns,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n","import {\n  DAO__factory,\n  DAOFactory,\n  DAOFactory__factory,\n  PluginRepo__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  DepositNativeTokenError,\n  InvalidAddressOrEnsError,\n  NoProviderError,\n} from \"@aragon/sdk-common\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { erc20ContractAbi } from \"../abi/erc20\";\nimport { ClientCore, GasFeeEstimation, TokenType } from \"../../client-common\";\nimport {\n  CreateDaoParams,\n  DepositParams,\n  SetAllowanceParams,\n} from \"../../types\";\nimport { unwrapDepositParams } from \"../utils\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { IClientEstimation } from \"../../interfaces\";\n\n/**\n * Estimation module the SDK Generic Client\n */\nexport class ClientEstimation extends ClientCore implements IClientEstimation {\n  /**\n   * Estimates the gas fee of creating a DAO\n   *\n   * @param {CreateDaoParams} _params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public async createDao(params: CreateDaoParams): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    if (\n      params.ensSubdomain && !params.ensSubdomain.match(/^[a-z0-9\\-]+$/)\n    ) {\n      throw new Error(\"Invalid subdomain format: use a-z, 0-9 and -\");\n    }\n\n    const daoInstance = DAOFactory__factory.connect(\n      this.web3.getDaoFactoryAddress(),\n      signer,\n    );\n    const pluginInstallationData: DAOFactory.PluginSettingsStruct[] = [];\n    for (const plugin of params.plugins) {\n      const repo = PluginRepo__factory.connect(plugin.id, signer);\n\n      const currentRelease = await repo.latestRelease();\n      const latestVersion = await repo[\"getLatestVersion(uint8)\"](\n        currentRelease,\n      );\n      pluginInstallationData.push({\n        pluginSetupRef: {\n          pluginSetupRepo: repo.address,\n          versionTag: latestVersion.tag,\n        },\n        data: plugin.data,\n      });\n    }\n\n    const gasEstimation = await daoInstance.estimateGas.createDao(\n      {\n        subdomain: params.ensSubdomain,\n        metadata: toUtf8Bytes(params.metadataUri),\n        daoURI: params.daoUri || \"\",\n        trustedForwarder: params.trustedForwarder || AddressZero,\n      },\n      pluginInstallationData,\n    );\n\n    return this.web3.getApproximateGasFee(gasEstimation.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of depositing ether or an ERC20 token into the DAO\n   * This does not estimate the gas cost of updating the allowance of an ERC20 token\n   *\n   * @param {DepositParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public deposit(\n    params: DepositParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    if (params.type !== TokenType.NATIVE && params.type !== TokenType.ERC20) {\n      throw new DepositNativeTokenError();\n    }\n\n    const [daoAddress, amount, tokenAddress, reference] = unwrapDepositParams(\n      params,\n    );\n\n    const daoInstance = DAO__factory.connect(daoAddress, signer);\n\n    const override: { value?: bigint } = {};\n    if (tokenAddress === AddressZero) {\n      override.value = amount;\n    }\n\n    return daoInstance.estimateGas\n      .deposit(tokenAddress, amount, reference, override)\n      .then((gasLimit) => {\n        return this.web3.getApproximateGasFee(gasLimit.toBigInt());\n      });\n  }\n  /**\n   * Estimates the gas fee of updating the allowance of an ERC20 token\n   *\n   * @param {SetAllowanceParams} _params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof ClientEstimation\n   */\n  public async setAllowance(\n    params: SetAllowanceParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    // resolve ens\n    let daoAddress = params.spender;\n    if (!isAddress(daoAddress)) {\n      await this.web3.ensureOnline();\n      const provider = this.web3.getProvider();\n      if (!provider) {\n        throw new NoProviderError();\n      }\n      const resolvedAddress = await provider.resolveName(daoAddress);\n      if (!resolvedAddress) {\n        throw new InvalidAddressOrEnsError();\n      }\n      daoAddress = resolvedAddress;\n    }\n\n    const contract = new Contract(\n      params.tokenAddress,\n      erc20ContractAbi,\n      signer,\n    );\n    return contract.estimateGas.approve(\n      daoAddress,\n      params.amount,\n    ).then((gasLimit) => {\n      return this.web3.getApproximateGasFee(gasLimit.toBigInt());\n    });\n  }\n}\n","import {\n  DaoMetadata,\n  DecodedApplyUninstallationParams,\n  GrantPermissionWithConditionParams,\n  GrantPermissionDecodedParams,\n  RevokePermissionDecodedParams,\n  RegisterStandardCallbackParams,\n  UpgradeToAndCallParams,\n  WithdrawParams,\n} from \"../../types\";\n\nimport {\n  ClientCore,\n  DecodedApplyInstallationParams,\n  getFunctionFragment,\n  InterfaceParams,\n  TokenType\n} from \"../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport {\n  DAO__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  applyInstallatonParamsFromContract,\n  permissionParamsFromContract,\n  permissionParamsWitConditionFromContract,\n  withdrawParamsFromContract,\n} from \"../utils\";\nimport { bytesToHex, hexToBytes, resolveIpfsCid } from \"@aragon/sdk-common\";\nimport { erc20ContractAbi } from \"../abi/erc20\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { toUtf8String } from \"@ethersproject/strings\";\nimport { IClientDecoding } from \"../../interfaces\";\n\n/**\n * Decoding module the SDK Generic Client\n */\nexport class ClientDecoding extends ClientCore implements IClientDecoding {\n  /**\n   * @param {data} Uint8Array\n   * @return {*}  {DecodedApplyInstallationParams}\n   * @memberof ClientDecoding\n   */\n  public applyInstallationAction(\n    data: Uint8Array,\n  ): DecodedApplyInstallationParams {\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = pspInterface.getFunction(\"applyInstallation\");\n    const result = pspInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return applyInstallatonParamsFromContract(result);\n  }\n  /**\n   * @param {data} Uint8Array\n   * @return {*}  {DecodedApplyInstallationParams}\n   * @memberof ClientDecoding\n   */\n  public applyUninstallationAction(\n    data: Uint8Array,\n  ): DecodedApplyUninstallationParams {\n    const pspInterface = PluginSetupProcessor__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = pspInterface.getFunction(\"applyUninstallation\");\n    const result = pspInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return applyInstallatonParamsFromContract(result);\n  }\n  /**\n   * Decodes the permission parameters from an encoded grant action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {GrantPermissionDecodedParams}\n   * @memberof ClientDecoding\n   */\n  public grantAction(data: Uint8Array): GrantPermissionDecodedParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"grant\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return permissionParamsFromContract(result);\n  }\n  /**\n   * Decodes the grant permission with condition parameters from an encoded grant with condition action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {GrantPermissionWithConditionParams}\n   * @memberof ClientDecoding\n   */\n  public grantWithConditionAction(\n    data: Uint8Array,\n  ): GrantPermissionWithConditionParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"grantWithCondition\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return permissionParamsWitConditionFromContract(result);\n  }\n  /**\n   * Decodes the permission parameters from an encoded revoke action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {RevokePermissionDecodedParams}\n   * @memberof ClientDecoding\n   */\n  public revokeAction(data: Uint8Array): RevokePermissionDecodedParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"revoke\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return permissionParamsFromContract(result);\n  }\n  /**\n   * Decodes the withdraw parameters from an encoded withdraw action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {WithdrawParams}\n   * @memberof ClientDecoding\n   */\n  public withdrawAction(\n    to: string,\n    value: bigint,\n    data: Uint8Array,\n  ): WithdrawParams {\n    // Native\n    if (!data?.length) {\n      return {\n        type: TokenType.NATIVE,\n        recipientAddressOrEns: to,\n        amount: value,\n      };\n    }\n\n    // ERC20 and other\n    const abiObjects = [{\n      tokenStandard: TokenType.ERC20,\n      abi: erc20ContractAbi,\n    }];\n    for (const abiObject of abiObjects) {\n      const hexBytes = bytesToHex(data);\n      const iface = new Contract(AddressZero, abiObject.abi).interface;\n      const expectedFunction = iface.getFunction(\"transfer\");\n      const result = iface.decodeFunctionData(expectedFunction, hexBytes);\n      return withdrawParamsFromContract(\n        to,\n        value,\n        result,\n        abiObject.tokenStandard,\n      );\n    }\n    throw new Error(\"The received action is not recognized\");\n  }\n  /**\n   * Decodes a dao metadata ipfs uri from an encoded update metadata action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string}\n   * @memberof ClientDecoding\n   */\n  public updateDaoMetadataRawAction(data: Uint8Array): string {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"setMetadata\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    const metadataUri = toUtf8String(result[0]);\n    resolveIpfsCid(metadataUri);\n    return metadataUri;\n  }\n  /**\n   * Decodes a dao metadata from an encoded update metadata raw action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {Promise<DaoMetadata>}\n   * @memberof ClientDecoding\n   */\n  public async updateDaoMetadataAction(data: Uint8Array): Promise<DaoMetadata> {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"setMetadata\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    const metadataUri = toUtf8String(result[0]);\n    const ipfsCid = resolveIpfsCid(metadataUri);\n    try {\n      const stringMetadata = await this.ipfs.fetchString(ipfsCid);\n      return JSON.parse(stringMetadata);\n    } catch {\n      throw new Error(\"Error reading data from IPFS\");\n    }\n  }\n  /**\n   * Decodes the daoUri from a setDaoUriAction\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string}\n   * @memberof ClientDecoding\n   */\n  public setDaoUriAction(data: Uint8Array): string {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\"setDaoURI\");\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return result[0];\n  }\n  /**\n   * Decodes the RegisterStandardCallbackParams from a registerStandardCallbackAction\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {RegisterStandardCallbackParams}\n   * @memberof ClientDecoding\n   */\n  public registerStandardCallbackAction(\n    data: Uint8Array,\n  ): RegisterStandardCallbackParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"registerStandardCallback\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return {\n      interfaceId: result[0],\n      callbackSelector: result[1],\n      magicNumber: result[2],\n    };\n  }\n  /**\n   * Decodes the implementation address from an encoded upgradeToAction\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string}\n   * @memberof ClientDecoding\n   */\n  public setSignatureValidatorAction(\n    data: Uint8Array,\n  ): string {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"setSignatureValidator\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return result[0];\n  }\n  public upgradeToAction(data: Uint8Array): string {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"upgradeTo\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return result[0];\n  }\n  /**\n   * Decodes upgradeToAndCallback params from an upgradeToAndCallAction\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {UpgradeToAndCallParams}\n   * @memberof ClientDecoding\n   */\n  public upgradeToAndCallAction(\n    data: Uint8Array,\n  ): UpgradeToAndCallParams {\n    const daoInterface = DAO__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedFunction = daoInterface.getFunction(\n      \"upgradeToAndCall\",\n    );\n    const result = daoInterface.decodeFunctionData(expectedFunction, hexBytes);\n    return {\n      implementationAddress: result[0],\n      data: hexToBytes(result[1]),\n    };\n  }\n\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {(InterfaceParams | null)}\n   * @memberof ClientDecoding\n   */\n  public findInterface(data: Uint8Array): InterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n","import { Context } from \"./client-common/context\";\nimport { ClientMethods } from \"./internal/client/methods\";\nimport { ClientEncoding } from \"./internal/client/encoding\";\nimport { ClientEstimation } from \"./internal/client/estimation\";\nimport { ClientDecoding } from \"./internal/client/decoding\";\nimport {\n  IClient,\n  IClientDecoding,\n  IClientEncoding,\n  IClientEstimation,\n  IClientMethods,\n} from \"./interfaces\";\nimport { ClientCore } from \"./client-common/core\";\n\n/**\n * Provider a generic client with high level methods to manage and interact with DAO's\n */\nexport class Client extends ClientCore implements IClient {\n  public methods: IClientMethods;\n  public encoding: IClientEncoding;\n  public decoding: IClientDecoding;\n  public estimation: IClientEstimation;\n\n  constructor(context: Context) {\n    super(context);\n    this.methods = new ClientMethods(context);\n    this.encoding = new ClientEncoding(context);\n    this.decoding = new ClientDecoding(context);\n    this.estimation = new ClientEstimation(context);\n  }\n}\n","import { gql } from \"graphql-request\";\n\nexport const QueryAddresslistVotingMembers = gql`\nquery AddresslistVotingMembers($address: ID!) {\n    addresslistVotingPlugin(id: $address){\n        members {\n            address\n        }\n    }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryAddresslistVotingProposal = gql`\nquery AddresslistVotingProposal($proposalId: ID!) {\n  addresslistVotingProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    creationBlockNumber\n    executionDate\n    executionBlockNumber\n    actions {\n      to\n      value\n      data\n    }\n    yes\n    no\n    abstain\n    votingMode\n    supportThreshold\n    startDate\n    endDate\n    executed\n    earlyExecutable\n    potentiallyExecutable\n    executionTxHash\n    voters{\n      voter{\n        address\n      }\n      voteOption\n      voteReplaced\n    }\n    totalVotingPower\n    minVotingPower\n  }\n}\n`;\nexport const QueryAddresslistVotingProposals = gql`\nquery AddresslistVotingProposals($where: AddresslistVotingProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: AddresslistVotingProposal_orderBy!) {\n  addresslistVotingProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    yes\n    no\n    abstain\n    startDate\n    endDate\n    executed\n    earlyExecutable\n    potentiallyExecutable\n    voters{\n      voter{\n        address\n      }\n      voteOption\n      voteReplaced\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryAddresslistVotingSettings = gql`\nquery AddresslistVotingSettings($address: ID!) {\n  addresslistVotingPlugin(id: $address){\n    minDuration\n    minProposerVotingPower\n    minParticipation\n    supportThreshold\n    votingMode\n  }\n}\n`;\n","import {\n  decodeRatio,\n  getCompactProposalId,\n  hexToBytes,\n} from \"@aragon/sdk-common\";\nimport {\n  computeProposalStatus,\n  ContractVotingSettings,\n  DaoAction,\n  ProposalMetadata,\n  SubgraphAction,\n  SubgraphVoteValuesMap,\n  VoteValues,\n  votingSettingsToContract,\n} from \"../../client-common\";\nimport {\n  AddresslistVotingPluginInstall,\n  AddresslistVotingProposal,\n  AddresslistVotingProposalListItem,\n} from \"../types\";\nimport {\n  ContractAddresslistVotingInitParams,\n  SubgraphAddresslistVotingProposal,\n  SubgraphAddresslistVotingProposalListItem,\n  SubgraphAddresslistVotingVoterListItem,\n} from \"./types\";\n\nexport function toAddresslistVotingProposal(\n  proposal: SubgraphAddresslistVotingProposal,\n  metadata: ProposalMetadata,\n): AddresslistVotingProposal {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  const creationDate = new Date(\n    parseInt(proposal.createdAt) * 1000,\n  );\n  const executionDate = proposal.executionDate\n    ? new Date(\n      parseInt(proposal.executionDate) * 1000,\n    )\n    : null;\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n      description: metadata.description,\n      resources: metadata.resources,\n      media: metadata.media,\n    },\n    startDate,\n    endDate,\n    creationDate,\n    executionTxHash: proposal.executionTxHash || null,\n    creationBlockNumber: parseInt(proposal.creationBlockNumber),\n    executionDate,\n    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? parseInt(proposal.yes) : 0,\n      no: proposal.no ? parseInt(proposal.no) : 0,\n      abstain: proposal.abstain ? parseInt(proposal.abstain) : 0,\n    },\n    settings: {\n      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),\n      minParticipation: decodeRatio(\n        (BigInt(proposal.minVotingPower) * BigInt(1000000)) /\n          BigInt(proposal.totalVotingPower),\n        6,\n      ),\n      duration: parseInt(proposal.endDate) -\n        parseInt(proposal.startDate),\n    },\n    totalVotingWeight: parseInt(proposal.totalVotingPower),\n    votes: proposal.voters.map(\n      (voter: SubgraphAddresslistVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n        };\n      },\n    ),\n  };\n}\nexport function toAddresslistVotingProposalListItem(\n  proposal: SubgraphAddresslistVotingProposalListItem,\n  metadata: ProposalMetadata,\n): AddresslistVotingProposalListItem {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n    },\n    startDate,\n    endDate,\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? parseInt(proposal.yes) : 0,\n      no: proposal.no ? parseInt(proposal.no) : 0,\n      abstain: proposal.abstain ? parseInt(proposal.abstain) : 0,\n    },\n    votes: proposal.voters.map(\n      (voter: SubgraphAddresslistVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n        };\n      },\n    ),\n  };\n}\n\nexport function addresslistVotingInitParamsToContract(\n  params: AddresslistVotingPluginInstall,\n): ContractAddresslistVotingInitParams {\n  return [\n    Object.values(\n      votingSettingsToContract(params.votingSettings),\n    ) as ContractVotingSettings,\n    params.addresses,\n  ];\n}\n","import {\n  MajorityVotingProposalSettings,\n  ProposalBase,\n  ProposalListItemBase,\n  ProposalVoteBase,\n  TokenType,\n  VersionTag,\n  VotingSettings,\n} from \"../client-common\";\n\nexport type TokenVotingPluginInstall = {\n  votingSettings: VotingSettings;\n  newToken?: NewTokenParams;\n  useToken?: ExistingTokenParams;\n};\n\ntype ExistingTokenParams = {\n  tokenAddress: string;\n  wrappedToken: {\n    name: string;\n    symbol: string;\n  };\n};\n\ntype NewTokenParams = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  minter?: string;\n  balances: { address: string; balance: bigint }[];\n};\n\n// PROPOSAL RETRIEVAL\nexport type TokenVotingProposalVote = ProposalVoteBase & {\n  weight: bigint;\n};\n\nexport type TokenVotingProposal = ProposalBase & {\n  result: TokenVotingProposalResult;\n  settings: MajorityVotingProposalSettings;\n  token: Erc20TokenDetails | Erc721TokenDetails | null;\n  usedVotingWeight: bigint;\n  votes: TokenVotingProposalVote[];\n  totalVotingWeight: bigint;\n};\n\nexport type TokenVotingProposalListItem = ProposalListItemBase & {\n  token: Erc20TokenDetails | Erc721TokenDetails | null;\n  result: TokenVotingProposalResult;\n  totalVotingWeight: bigint;\n  settings: MajorityVotingProposalSettings;\n  votes: TokenVotingProposalVote[];\n};\n\nexport type TokenVotingProposalResult = {\n  yes: bigint;\n  no: bigint;\n  abstain: bigint;\n};\n\nexport type Erc20TokenDetails = TokenBaseDetails & {\n  decimals: number;\n  type: TokenType.ERC20;\n};\nexport type Erc721TokenDetails = TokenBaseDetails & {\n  type: TokenType.ERC721;\n};\n\nexport type TokenBaseDetails = {\n  address: string;\n  name: string;\n  symbol: string;\n};\n\nexport type MintTokenParams = {\n  address: string;\n  amount: bigint;\n};\n\nexport type TokenVotingPluginPrepareInstallationParams = {\n  settings: TokenVotingPluginInstall;\n  daoAddressOrEns: string;\n  versionTag?: VersionTag;\n};\n\ntype WrapTokensBase = {\n  wrappedTokenAddress: string;\n  amount: bigint;\n};\n\nexport type WrapTokensParams = WrapTokensBase;\nexport type UnwrapTokensParams = WrapTokensBase;\n\nexport enum WrapTokensStep {\n  WRAPPING = \"wrapping\",\n  DONE = \"done\",\n}\n\nexport type WrapTokensStepValue =\n  | { key: WrapTokensStep.WRAPPING; txHash: string }\n  | { key: WrapTokensStep.DONE };\n\nexport enum UnwrapTokensStep {\n  UNWRAPPING = \"unwrapping\",\n  DONE = \"done\",\n}\nexport type UnwrapTokensStepValue =\n  | { key: UnwrapTokensStep.UNWRAPPING; txHash: string }\n  | { key: UnwrapTokensStep.DONE };\n\n/* Delegate */\nexport type DelegateTokensParams = {\n  tokenAddress: string;\n  delegatee: string;\n};\n\nexport const enum DelegateTokensStep {\n  DELEGATING = \"delegating\",\n  DONE = \"done\",\n}\n\nexport const enum UndelegateTokensStep {\n  UNDELEGATING = \"delegating\",\n  DONE = \"done\",\n}\n\ntype DelegateTokensStepCommon = {\n  key: DelegateTokensStep.DELEGATING | UndelegateTokensStep.UNDELEGATING;\n  txHash: string;\n} | { key: DelegateTokensStep.DONE | UndelegateTokensStep.DONE };\n\nexport type UndelegateTokensStepValue = DelegateTokensStepCommon;\nexport type DelegateTokensStepValue = DelegateTokensStepCommon;\n\nexport type TokenVotingMember = {\n  /** The address of the member */\n  address: string;\n  /** The balance of the member */\n  balance: bigint;\n  /** The voting power of the member taking into account the delagation */\n  votingPower: bigint;\n  /** The address that you delegated yout voting power to\n   *  If null, you are not delegating your voting power */\n  delegatee: string | null;\n  /** The list of addresses that delegated their voting power this member */\n  delegators: { address: string; balance: bigint }[];\n};","import { BigNumber } from \"@ethersproject/bignumber\";\nimport {\n  ContractVotingSettings,\n  SubgraphAction,\n  SubgraphProposalBase,\n  SubgraphVoterListItemBase,\n  VotingMode,\n} from \"../../client-common\";\n\n/* Contract types */\nexport type ContractMintTokenParams = [string, BigNumber];\nexport type ContractTokenVotingInitParams = [\n  ContractVotingSettings,\n  [\n    string, // address\n    string, // name\n    string, // symbol\n  ],\n  [\n    string[], // receivers,\n    BigNumber[], // amounts\n  ],\n];\n\n/* Subgraph types */\nexport type SubgraphTokenVotingVoterListItem = SubgraphVoterListItemBase & {\n  votingPower: string;\n};\n\nexport type SubgraphTokenVotingProposalListItem = SubgraphProposalBase & {\n  plugin: {\n    token: SubgraphErc20Token | SubgraphErc721Token;\n  };\n  voters: SubgraphTokenVotingVoterListItem[];\n  supportThreshold: string;\n  minVotingPower: bigint;\n  totalVotingPower: string;\n  votingMode: VotingMode;\n  earlyExecutable: boolean;\n};\n\ntype SubgraphBaseToken = {\n  symbol: string;\n  name: string;\n  id: string;\n};\nexport enum SubgraphTokenType {\n  ERC20 = \"ERC20Token\",\n  ERC721 = \"ERC721Token\",\n}\nexport enum SubgraphContractType {\n  ERC20 = \"ERC20Contract\",\n  ERC721 = \"ERC721Contract\",\n}\n\nexport type SubgraphErc20Token = SubgraphBaseToken & {\n  __typename: SubgraphContractType.ERC20;\n  decimals: number;\n};\nexport type SubgraphErc721Token = SubgraphBaseToken & {\n  __typename: SubgraphContractType.ERC721;\n};\n\nexport type SubgraphTokenVotingProposal =\n  & SubgraphTokenVotingProposalListItem\n  & {\n    createdAt: string;\n    actions: SubgraphAction[];\n    creationBlockNumber: string;\n    executionDate: string;\n    executionTxHash: string;\n    executionBlockNumber: string;\n  };\n\n  export type SubgraphTokenVotingMember = {\n    address: string;\n    balance: string;\n    votingPower: string;\n    delegatee: {\n      address: string;\n    };\n    delegators: {\n      address: string;\n      balance: string;\n    }[];\n  };","import {\n  hexToBytes,\n  InvalidAddressError,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  ClientCore,\n  DaoAction,\n  encodeUpdateVotingSettingsAction,\n  PluginInstallItem,\n  SupportedNetwork,\n  SupportedNetworksArray,\n  VotingSettings,\n  votingSettingsToContract,\n} from \"../../../client-common\";\nimport { IAddresslistVotingClientEncoding } from \"../../interfaces\";\nimport { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { LIVE_CONTRACTS } from \"../../../client-common/constants\";\nimport { getNetwork, Networkish } from \"@ethersproject/providers\";\nimport { AddresslistVotingPluginInstall } from \"../../types\";\n\n/**\n * Encoding module for the SDK AddressList Client\n */\nexport class AddresslistVotingClientEncoding extends ClientCore\n  implements IAddresslistVotingClientEncoding {\n  /**\n   * Computes the parameters to be given when creating the DAO,\n   * so that the plugin is configured\n   *\n   * @param {AddresslistVotingPluginInstall} params\n   * @param {Networkish} network\n   * @return {*}  {PluginInstallItem}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  static getPluginInstallItem(\n    params: AddresslistVotingPluginInstall,\n    network: Networkish,\n  ): PluginInstallItem {\n    const networkName = getNetwork(network).name as SupportedNetwork;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    const {\n      votingMode,\n      supportThreshold,\n      minParticipation,\n      minDuration,\n      minProposerVotingPower,\n    } = votingSettingsToContract(params.votingSettings);\n\n    const hexBytes = defaultAbiCoder.encode(\n      [\n        \"tuple(uint8 votingMode, uint64 supportThreshold, uint64 minParticipation, uint64 minDuration, uint256 minProposerVotingPower) votingSettings\",\n        \"address[] members\",\n      ],\n      [\n        [\n          votingMode,\n          supportThreshold,\n          minParticipation,\n          minDuration,\n          minProposerVotingPower,\n        ],\n        params.addresses,\n      ],\n    );\n\n    return {\n      id: LIVE_CONTRACTS[networkName].addresslistVotingRepo,\n      data: hexToBytes(hexBytes),\n    };\n  }\n\n  /**\n   * Computes the parameters to be given when creating a proposal that updates the governance configuration\n   *\n   * @param {string} pluginAddress\n   * @param {VotingSettings} params\n   * @return {*}  {DaoAction}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  public updatePluginSettingsAction(\n    pluginAddress: string,\n    params: VotingSettings,\n  ): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO: check if to and value are correct\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: encodeUpdateVotingSettingsAction(params),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that adds addresses to address list\n   *\n   * @param {string} pluginAddress\n   * @param {string[]} members\n   * @return {*}  {DaoAction}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  public addMembersAction(pluginAddress: string, members: string[]): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    for (const member of members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    // get hex bytes\n    const hexBytes = votingInterface.encodeFunctionData(\n      \"addAddresses\",\n      [members],\n    );\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that removes addresses from the address list\n   *\n   * @param {string} pluginAddress\n   * @param {string[]} members\n   * @return {*}  {DaoAction}\n   * @memberof AddresslistVotingClientEncoding\n   */\n  public removeMembersAction(\n    pluginAddress: string,\n    members: string[],\n  ): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    for (const member of members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    // get hex bytes\n    const hexBytes = votingInterface.encodeFunctionData(\n      \"removeAddresses\",\n      [members],\n    );\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n","import {\n  boolArrayToBitmap,\n  decodeProposalId,\n  decodeRatio,\n  encodeProposalId,\n  getExtendedProposalId,\n  InvalidAddressError,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidProposalIdError,\n  IpfsPinError,\n  isProposalId,\n  NoProviderError,\n  PluginInstallationPreparationError,\n  ProposalCreationError,\n  resolveIpfsCid,\n} from \"@aragon/sdk-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { IAddresslistVotingClientMethods } from \"../../interfaces\";\nimport {\n  CanVoteParams,\n  ClientCore,\n  computeProposalStatusFilter,\n  CreateMajorityVotingProposalParams,\n  ExecuteProposalStep,\n  ExecuteProposalStepValue,\n  findLog,\n  PrepareInstallationStep,\n  PrepareInstallationStepValue,\n  ProposalCreationSteps,\n  ProposalCreationStepValue,\n  ProposalMetadata,\n  ProposalQueryParams,\n  ProposalSortBy,\n  SortDirection,\n  SubgraphMembers,\n  SubgraphVotingSettings,\n  VersionTag,\n  VoteProposalParams,\n  VoteProposalStep,\n  VoteProposalStepValue,\n  VotingSettings,\n} from \"../../../client-common\";\nimport {\n  QueryAddresslistVotingMembers,\n  QueryAddresslistVotingProposal,\n  QueryAddresslistVotingProposals,\n  QueryAddresslistVotingSettings,\n} from \"../graphql-queries\";\nimport {\n  toAddresslistVotingProposal,\n  toAddresslistVotingProposalListItem,\n} from \"../utils\";\nimport {\n  AddresslistVoting__factory,\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  EMPTY_PROPOSAL_METADATA_LINK,\n  LIVE_CONTRACTS,\n  UNAVAILABLE_PROPOSAL_METADATA,\n  UNSUPPORTED_PROPOSAL_METADATA_LINK,\n} from \"../../../client-common/constants\";\nimport { AddresslistVotingClientEncoding } from \"./encoding\";\nimport {\n  AddresslistVotingPluginPrepareInstallationParams,\n  AddresslistVotingProposal,\n  AddresslistVotingProposalListItem,\n} from \"../../types\";\nimport {\n  SubgraphAddresslistVotingProposal,\n  SubgraphAddresslistVotingProposalListItem,\n} from \"../types\";\n\n/**\n * Methods module the SDK Address List Client\n */\nexport class AddresslistVotingClientMethods extends ClientCore\n  implements IAddresslistVotingClientMethods {\n  /**\n   * Creates a new proposal on the given AddressList plugin contract\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {*}  {AsyncGenerator<ProposalCreationStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): AsyncGenerator<ProposalCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const tx = await addresslistContract.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n      params.creatorVote || 0,\n      params.executeOnPass || false,\n    );\n\n    yield {\n      key: ProposalCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const addresslistContractInterface = AddresslistVoting__factory\n      .createInterface();\n\n    const log = findLog(\n      receipt,\n      addresslistContractInterface,\n      \"ProposalCreated\",\n    );\n\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = addresslistContractInterface.parseLog(log);\n    const proposalId = parsedLog.args[\"proposalId\"];\n    if (!proposalId) {\n      throw new ProposalCreationError();\n    }\n\n    yield {\n      key: ProposalCreationSteps.DONE,\n      proposalId: encodeProposalId(params.pluginAddress, Number(proposalId)),\n    };\n  }\n\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {ProposalMetadata} params\n   * @return {*}  {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async pinMetadata(params: ProposalMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch (e) {\n      throw new IpfsPinError(e);\n    }\n  }\n  /**\n   * Cast a vote on the given proposal using the client's wallet. Depending on the proposal settings, an affirmative vote may execute the proposal's actions on the DAO.\n   *\n   * @param {VoteProposalParams} params\n   * @return {*}  {AsyncGenerator<VoteProposalStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *voteProposal(\n    params: VoteProposalParams,\n  ): AsyncGenerator<VoteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await addresslistContract.vote(\n      id,\n      params.vote,\n      false,\n    );\n\n    yield {\n      key: VoteProposalStep.VOTING,\n      txHash: tx.hash,\n    };\n\n    await tx.wait();\n\n    yield {\n      key: VoteProposalStep.DONE,\n    };\n  }\n\n  /**\n   * Executes the given proposal, provided that it has already passed\n   *\n   * @param {string} proposalId\n   * @return {*}  {AsyncGenerator<ExecuteProposalStepValue>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async *executeProposal(\n    proposalId: string,\n  ): AsyncGenerator<ExecuteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const tx = await addresslistContract.execute(id);\n\n    yield {\n      key: ExecuteProposalStep.EXECUTING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: ExecuteProposalStep.DONE,\n    };\n  }\n  /**\n   * Prepares the installation of a token voting plugin in a given dao\n   *\n   * @param {AddresslistVotingPluginPrepareInstallationParams} params\n   * @return {*}  {AsyncGenerator<PrepareInstallationStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *prepareInstallation(\n    params: AddresslistVotingPluginPrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const networkName = this.web3.getNetworkName();\n    // connect to psp contract\n    const pspContract = PluginSetupProcessor__factory.connect(\n      LIVE_CONTRACTS[networkName].pluginSetupProcessor,\n      signer,\n    );\n    // connect to plugin repo\n    const addresslistVotingRepoContract = PluginRepo__factory.connect(\n      LIVE_CONTRACTS[networkName].addresslistVotingRepo,\n      signer,\n    );\n    // use specified version or latest\n    let versionTag: VersionTag | undefined = params.versionTag;\n    if (!params.versionTag) {\n      const latestVersion = await addresslistVotingRepoContract\n        [\"getLatestVersion(address)\"](\n          LIVE_CONTRACTS[networkName].addresslistVotingSetup,\n        );\n      versionTag = {\n        build: latestVersion.tag.build,\n        release: latestVersion.tag.release,\n      };\n    }\n    // get install data\n    const addresslistVotingPluginInstallItem = AddresslistVotingClientEncoding\n      .getPluginInstallItem(params.settings, networkName);\n    // execute prepareInstallation\n    const tx = await pspContract.prepareInstallation(\n      params.daoAddressOrEns,\n      {\n        pluginSetupRef: {\n          pluginSetupRepo: LIVE_CONTRACTS[networkName].addresslistVotingRepo,\n          versionTag: versionTag!,\n        },\n        data: addresslistVotingPluginInstallItem.data,\n      },\n    );\n\n    yield {\n      key: PrepareInstallationStep.PREPARING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const pspContractInterface = PluginSetupProcessor__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      pspContractInterface,\n      \"InstallationPrepared\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = pspContractInterface.parseLog(log);\n    const pluginAddress = parsedLog.args[\"plugin\"];\n    const preparedSetupData = parsedLog.args[\"preparedSetupData\"];\n    if (!(pluginAddress || preparedSetupData)) {\n      throw new PluginInstallationPreparationError();\n    }\n    yield {\n      key: PrepareInstallationStep.DONE,\n      pluginAddress,\n      pluginRepo: LIVE_CONTRACTS[networkName].addresslistVotingRepo,\n      versionTag: versionTag!,\n      permissions: preparedSetupData.permissions,\n      helpers: preparedSetupData.helpers,\n    };\n  }\n\n  /**\n   * Checks if an user can vote in a proposal\n   *\n   * @param {CanVoteParams} params\n   * @return {*}  {Promise<boolean>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async canVote(params: CanVoteParams): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    return addresslistContract.callStatic.canVote(\n      id,\n      params.voterAddressOrEns,\n      params.vote,\n    );\n  }\n  /**\n   * Checks whether the current proposal can be executed\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<boolean>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async canExecute(\n    proposalId: string,\n  ): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    return addresslistContract.canExecute(id);\n  }\n  /**\n   * Returns the list of wallet addresses with signing capabilities on the plugin\n   *\n   * @async\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<string[]>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getMembers(pluginAddress: string): Promise<string[]> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryAddresslistVotingMembers;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"AddresslistVotingVoting members\";\n    type T = { addresslistVotingPlugin: SubgraphMembers };\n    const { addresslistVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return addresslistVotingPlugin.members.map((\n      member: { address: string },\n    ) => member.address);\n  }\n  /**\n   * Returns the details of the given proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {(Promise<AddresslistVotingProposal | null>)}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getProposal(\n    proposalId: string,\n  ): Promise<AddresslistVotingProposal | null> {\n    if (!isProposalId(proposalId)) {\n      throw new InvalidProposalIdError();\n    }\n    const extendedProposalId = getExtendedProposalId(proposalId);\n    const query = QueryAddresslistVotingProposal;\n    const params = {\n      proposalId: extendedProposalId,\n    };\n    const name = \"AddresslistVoting proposal\";\n    type T = { addresslistVotingProposal: SubgraphAddresslistVotingProposal };\n    const { addresslistVotingProposal } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!addresslistVotingProposal) {\n      return null;\n    } else if (!addresslistVotingProposal.metadata) {\n      return toAddresslistVotingProposal(\n        addresslistVotingProposal,\n        EMPTY_PROPOSAL_METADATA_LINK,\n      );\n    }\n    try {\n      const metadataCid = resolveIpfsCid(addresslistVotingProposal.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as ProposalMetadata;\n      return toAddresslistVotingProposal(addresslistVotingProposal, metadata);\n      // TODO: Parse and validate schema\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toAddresslistVotingProposal(\n          addresslistVotingProposal,\n          UNSUPPORTED_PROPOSAL_METADATA_LINK,\n        );\n      }\n      return toAddresslistVotingProposal(\n        addresslistVotingProposal,\n        UNAVAILABLE_PROPOSAL_METADATA,\n      );\n    }\n  }\n\n  /**\n   * Returns a list of proposals on the Plugin, filtered by the given criteria\n   *\n   * @param {ProposalQueryParams} {\n   *       daoAddressOrEns,\n   *       limit = 10,\n   *       status,\n   *       skip = 0,\n   *       direction = SortDirection.ASC,\n   *       sortBy = ProposalSortBy.CREATED_AT,\n   *     }\n   * @return {*}  {Promise<AddresslistVotingProposalListItem[]>}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getProposals({\n    daoAddressOrEns,\n    limit = 10,\n    status,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = ProposalSortBy.CREATED_AT,\n  }: ProposalQueryParams): Promise<AddresslistVotingProposalListItem[]> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        try {\n          const resolvedAddress = await provider.resolveName(address);\n          if (!resolvedAddress) {\n            throw new InvalidAddressOrEnsError();\n          }\n          address = resolvedAddress;\n        } catch {\n          throw new InvalidAddressOrEnsError();\n        }\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (status) {\n      where = { ...where, ...computeProposalStatusFilter(status) };\n    }\n\n    const query = QueryAddresslistVotingProposals;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"AddresslistVoting proposals\";\n    type T = {\n      addresslistVotingProposals: SubgraphAddresslistVotingProposalListItem[];\n    };\n    const { addresslistVotingProposals } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      addresslistVotingProposals.map(\n        async (\n          proposal: SubgraphAddresslistVotingProposalListItem,\n        ): Promise<AddresslistVotingProposalListItem> => {\n          // format in the metadata field\n          if (!proposal.metadata) {\n            return toAddresslistVotingProposalListItem(\n              proposal,\n              EMPTY_PROPOSAL_METADATA_LINK,\n            );\n          }\n          try {\n            const metadataCid = resolveIpfsCid(proposal.metadata);\n            const stringMetadata = await this.ipfs.fetchString(metadataCid);\n            const metadata = JSON.parse(stringMetadata) as ProposalMetadata;\n            return toAddresslistVotingProposalListItem(proposal, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toAddresslistVotingProposalListItem(\n                proposal,\n                UNSUPPORTED_PROPOSAL_METADATA_LINK,\n              );\n            }\n            return toAddresslistVotingProposalListItem(\n              proposal,\n              UNAVAILABLE_PROPOSAL_METADATA,\n            );\n          }\n        },\n      ),\n    );\n  }\n\n  /**\n   * Returns the settings of a plugin given the address of the plugin instance\n   *\n   * @param {string} pluginAddress\n   * @return {*}  {(Promise<VotingSettings | null>)}\n   * @memberof AddresslistVotingClientMethods\n   */\n  public async getVotingSettings(\n    pluginAddress: string,\n  ): Promise<VotingSettings | null> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryAddresslistVotingSettings;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"AddresslistVoting settings\";\n    type T = { addresslistVotingPlugin: SubgraphVotingSettings };\n    const { addresslistVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!addresslistVotingPlugin) {\n      return null;\n    }\n    return {\n      minDuration: parseInt(addresslistVotingPlugin.minDuration),\n      supportThreshold: decodeRatio(\n        BigInt(addresslistVotingPlugin.supportThreshold),\n        6,\n      ),\n      minParticipation: decodeRatio(\n        BigInt(addresslistVotingPlugin.minParticipation),\n        6,\n      ),\n      minProposerVotingPower: BigInt(\n        addresslistVotingPlugin.minProposerVotingPower,\n      ),\n      votingMode: addresslistVotingPlugin.votingMode,\n    };\n  }\n}\n","import {\n  AddresslistVoting__factory,\n  MajorityVotingBase__factory,\n} from \"@aragon/osx-ethers\";\n\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  MajorityVotingBase__factory.createInterface().getFunction(\n    \"updateVotingSettings\",\n  )\n    .format(\"minimal\"),\n  AddresslistVoting__factory.createInterface().getFunction(\"addAddresses\")\n    .format(\"minimal\"),\n  AddresslistVoting__factory.createInterface().getFunction(\n    \"removeAddresses\",\n  ).format(\"minimal\"),\n];\n","import { bytesToHex } from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  decodeUpdatePluginSettingsAction,\n  getFunctionFragment,\n  InterfaceParams,\n  VotingSettings,\n} from \"../../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport { IAddresslistVotingClientDecoding } from \"../../interfaces\";\nimport { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\n\n/**\n * Decoding module for the SDK AddressList Client\n */\nexport class AddresslistVotingClientDecoding extends ClientCore\n  implements IAddresslistVotingClientDecoding {\n  /**\n   * Decodes a dao metadata from an encoded update metadata action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {VotingSettings}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public updatePluginSettingsAction(data: Uint8Array): VotingSettings {\n    return decodeUpdatePluginSettingsAction(data);\n  }\n  /**\n   * Decodes a list of addresses from an encoded add members action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string[]}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public addMembersAction(data: Uint8Array): string[] {\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = votingInterface.getFunction(\"addAddresses\");\n    const result = votingInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Decodes a list of addresses from an encoded remove members action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string[]}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public removeMembersAction(data: Uint8Array): string[] {\n    const votingInterface = AddresslistVoting__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = votingInterface.getFunction(\n      \"removeAddresses\",\n    );\n    const result = votingInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {(InterfaceParams | null)}\n   * @memberof AddresslistVotingClientDecoding\n   */\n  public findInterface(data: Uint8Array): InterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n","import { AddresslistVoting__factory } from \"@aragon/osx-ethers\";\nimport {\n  ClientCore,\n  CreateMajorityVotingProposalParams,\n  GasFeeEstimation,\n  VoteProposalParams,\n} from \"../../../client-common\";\nimport { IAddresslistVotingClientEstimation } from \"../../interfaces\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { boolArrayToBitmap, decodeProposalId } from \"@aragon/sdk-common\";\n\n/**\n * Estimation module the SDK Address List Client\n */\nexport class AddresslistVotingClientEstimation extends ClientCore\n  implements IAddresslistVotingClientEstimation {\n  /**\n   * Estimates the gas fee of creating a proposal on the plugin\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const estimatedGasFee = await addresslistContract.estimateGas\n      .createProposal(\n        toUtf8Bytes(params.metadataUri),\n        params.actions || [],\n        allowFailureMap,\n        Math.round(startTimestamp / 1000),\n        Math.round(endTimestamp / 1000),\n        params.creatorVote || 0,\n        params.executeOnPass || false,\n      );\n    return this.web3.getApproximateGasFee(estimatedGasFee.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of casting a vote on a proposal\n   *\n   * @param {VoteProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async voteProposal(\n    params: VoteProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      params.proposalId,\n    );\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const estimation = await addresslistContract.estimateGas.vote(\n      id,\n      params.vote,\n      false,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of executing an AddressList proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof AddresslistVotingClientEstimation\n   */\n  public async executeProposal(\n    proposalId: string,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      proposalId,\n    );\n\n    const addresslistContract = AddresslistVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const estimation = await addresslistContract.estimateGas.execute(\n      id,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n}\n","import {\n  IAddresslistVotingClient,\n  IAddresslistVotingClientDecoding,\n  IAddresslistVotingClientEncoding,\n  IAddresslistVotingClientEstimation,\n  IAddresslistVotingClientMethods,\n} from \"./interfaces\";\nimport { AddresslistVotingClientMethods } from \"./internal/client/methods\";\nimport { AddresslistVotingClientEncoding } from \"./internal/client/encoding\";\nimport { AddresslistVotingClientDecoding } from \"./internal/client/decoding\";\nimport { AddresslistVotingClientEstimation } from \"./internal/client/estimation\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  PluginInstallItem,\n} from \"../client-common\";\nimport { Networkish } from \"@ethersproject/providers\";\nimport { AddresslistVotingPluginInstall } from \"./types\";\n\n/**\n * Provider a generic client with high level methods to manage and interact an Address List Voting plugin installed in a DAO\n */\nexport class AddresslistVotingClient extends ClientCore\n  implements IAddresslistVotingClient {\n  public methods: IAddresslistVotingClientMethods;\n  public encoding: IAddresslistVotingClientEncoding;\n  public decoding: IAddresslistVotingClientDecoding;\n  public estimation: IAddresslistVotingClientEstimation;\n\n  constructor(context: ContextPlugin) {\n    super(context);\n    this.methods = new AddresslistVotingClientMethods(context);\n    this.encoding = new AddresslistVotingClientEncoding(context);\n    this.decoding = new AddresslistVotingClientDecoding(context);\n    this.estimation = new AddresslistVotingClientEstimation(context);\n  }\n\n  static encoding = {\n    /**\n     * Computes the parameters to be given when creating the DAO,\n     * so that the plugin is configured\n     *\n     * @param {AddresslistVotingPluginInstall} params\n     * @param {Networkish} [network=\"mainnet\"]\n     * @return {*}  {PluginInstallItem}\n     * @memberof AddresslistVotingClient\n     */\n    getPluginInstallItem: (\n      params: AddresslistVotingPluginInstall,\n      network: Networkish = \"mainnet\",\n    ): PluginInstallItem =>\n      AddresslistVotingClientEncoding.getPluginInstallItem(params, network),\n  };\n}\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingProposal = gql`\nquery TokenVotingProposal($proposalId: ID!) {\n  tokenVotingProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    creationBlockNumber\n    executionDate\n    executionBlockNumber\n    actions {\n      to\n      value\n      data\n    }\n    yes,\n    no,\n    abstain\n    votingMode\n    supportThreshold\n    startDate\n    endDate\n    executed\n    earlyExecutable\n    potentiallyExecutable\n    executionTxHash\n    voters{\n      voter{\n        address\n      }\n      voteReplaced\n      voteOption\n      votingPower\n    }\n    plugin {\n      token {\n        id\n        name\n        symbol\n        __typename\n        ...on ERC20Contract {\n          decimals\n        }\n      }\n    }\n    totalVotingPower\n    minVotingPower\n  }\n}\n`;\nexport const QueryTokenVotingProposals = gql`\nquery TokenVotingProposals($where: TokenVotingProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: TokenVotingProposal_orderBy!) {\n  tokenVotingProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    yes,\n    no,\n    abstain\n    startDate\n    endDate\n    executed\n    earlyExecutable\n    potentiallyExecutable\n    votingMode\n    supportThreshold\n    minVotingPower\n    totalVotingPower\n    voters{\n      voter{\n        address\n      }\n      voteReplaced\n      voteOption\n      votingPower\n    }\n    plugin{\n      token{\n        id\n        name\n        symbol\n        __typename\n        ...on ERC20Contract {\n          decimals\n        }\n      }\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingSettings = gql`\nquery TokenVotingSettings($address: ID!) {\n  tokenVotingPlugin(id: $address){\n    minDuration\n    minProposerVotingPower\n    minParticipation\n    supportThreshold\n    votingMode\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingPlugin = gql`\nquery TokenVotingPlugin($address: ID!) {\n  tokenVotingPlugin(id: $address){\n    token {\n      id\n      name\n      symbol\n      __typename\n      ...on ERC20Contract {\n        decimals\n      }\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryTokenVotingMembers = gql`\nquery TokenVotingMembers($address: ID!) {\n    tokenVotingPlugin(id: $address){\n        members {\n            address\n            balance\n            votingPower\n            delegatee {\n                address\n            }\n            delegators {\n                address\n                balance\n            }\n        }\n    }\n}\n`;\n","import {\n  computeProposalStatus,\n  ContractVotingSettings,\n  DaoAction,\n  ProposalMetadata,\n  SubgraphAction,\n  SubgraphVoteValuesMap,\n  TokenType,\n  VoteValues,\n  votingSettingsToContract,\n} from \"../../client-common\";\nimport {\n  Erc20TokenDetails,\n  Erc721TokenDetails,\n  MintTokenParams,\n  TokenVotingMember,\n  TokenVotingPluginInstall,\n  TokenVotingProposal,\n  TokenVotingProposalListItem,\n} from \"../types\";\nimport {\n  ContractMintTokenParams,\n  ContractTokenVotingInitParams,\n  SubgraphContractType,\n  SubgraphErc20Token,\n  SubgraphErc721Token,\n  SubgraphTokenVotingMember,\n  SubgraphTokenVotingProposal,\n  SubgraphTokenVotingProposalListItem,\n  SubgraphTokenVotingVoterListItem,\n} from \"./types\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Result } from \"@ethersproject/abi\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport {\n  decodeRatio,\n  getCompactProposalId,\n  hexToBytes,\n} from \"@aragon/sdk-common\";\n\nexport function toTokenVotingProposal(\n  proposal: SubgraphTokenVotingProposal,\n  metadata: ProposalMetadata,\n): TokenVotingProposal {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  const creationDate = new Date(\n    parseInt(proposal.createdAt) * 1000,\n  );\n  const executionDate = proposal.executionDate\n    ? new Date(\n      parseInt(proposal.executionDate) * 1000,\n    )\n    : null;\n  let usedVotingWeight: bigint = BigInt(0);\n  for (const voter of proposal.voters) {\n    usedVotingWeight += BigInt(voter.votingPower);\n  }\n  const token = parseToken(proposal.plugin.token);\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n      description: metadata.description,\n      resources: metadata.resources,\n      media: metadata.media,\n    },\n    startDate,\n    endDate,\n    creationDate,\n    creationBlockNumber: parseInt(proposal.creationBlockNumber),\n    executionDate,\n    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,\n    executionTxHash: proposal.executionTxHash || null,\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? BigInt(proposal.yes) : BigInt(0),\n      no: proposal.no ? BigInt(proposal.no) : BigInt(0),\n      abstain: proposal.abstain ? BigInt(proposal.abstain) : BigInt(0),\n    },\n    settings: {\n      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),\n      duration: parseInt(proposal.endDate) -\n        parseInt(proposal.startDate),\n      minParticipation: decodeRatio(\n        (BigInt(proposal.minVotingPower) * BigInt(1000000)) /\n          BigInt(proposal.totalVotingPower),\n        6,\n      ),\n    },\n    token,\n    usedVotingWeight,\n    totalVotingWeight: BigInt(proposal.totalVotingPower),\n    votes: proposal.voters.map(\n      (voter: SubgraphTokenVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n          weight: BigInt(voter.votingPower),\n        };\n      },\n    ),\n  };\n}\n\nexport function toTokenVotingProposalListItem(\n  proposal: SubgraphTokenVotingProposalListItem,\n  metadata: ProposalMetadata,\n): TokenVotingProposalListItem {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(parseInt(proposal.endDate) * 1000);\n  const token = parseToken(proposal.plugin.token);\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    settings: {\n      supportThreshold: decodeRatio(BigInt(proposal.supportThreshold), 6),\n      duration: parseInt(proposal.endDate) -\n        parseInt(proposal.startDate),\n      minParticipation: decodeRatio(\n        (BigInt(proposal.minVotingPower) * BigInt(1000000)) /\n          BigInt(proposal.totalVotingPower),\n        6,\n      ),\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n    },\n    totalVotingWeight: BigInt(proposal.totalVotingPower),\n    startDate,\n    endDate,\n    status: computeProposalStatus(proposal),\n    result: {\n      yes: proposal.yes ? BigInt(proposal.yes) : BigInt(0),\n      no: proposal.no ? BigInt(proposal.no) : BigInt(0),\n      abstain: proposal.abstain ? BigInt(proposal.abstain) : BigInt(0),\n    },\n    token,\n    votes: proposal.voters.map(\n      (voter: SubgraphTokenVotingVoterListItem) => {\n        return {\n          voteReplaced: voter.voteReplaced,\n          address: voter.voter.address,\n          vote: SubgraphVoteValuesMap.get(voter.voteOption) as VoteValues,\n          weight: BigInt(voter.votingPower),\n        };\n      },\n    ),\n  };\n}\n\nexport function mintTokenParamsToContract(\n  params: MintTokenParams,\n): ContractMintTokenParams {\n  return [params.address, BigNumber.from(params.amount)];\n}\n\nexport function mintTokenParamsFromContract(result: Result): MintTokenParams {\n  return {\n    address: result[0],\n    amount: BigInt(result[1]),\n  };\n}\n\nexport function tokenVotingInitParamsToContract(\n  params: TokenVotingPluginInstall,\n): ContractTokenVotingInitParams {\n  let token: [string, string, string] = [\"\", \"\", \"\"];\n  let balances: [string[], BigNumber[]] = [[], []];\n  if (params.newToken) {\n    token = [AddressZero, params.newToken.name, params.newToken.symbol];\n    balances = [\n      params.newToken.balances.map((balance) => balance.address),\n      params.newToken.balances.map(({ balance }) => BigNumber.from(balance)),\n    ];\n  } else if (params.useToken) {\n    token = [\n      params.useToken?.tokenAddress,\n      params.useToken.wrappedToken.name,\n      params.useToken.wrappedToken.symbol,\n    ];\n  }\n  return [\n    Object.values(\n      votingSettingsToContract(params.votingSettings),\n    ) as ContractVotingSettings,\n    token,\n    balances,\n  ];\n}\n\nfunction parseToken(\n  subgraphToken: SubgraphErc20Token | SubgraphErc721Token,\n): Erc20TokenDetails | Erc721TokenDetails | null {\n  let token: Erc721TokenDetails | Erc20TokenDetails | null = null;\n  if (subgraphToken.__typename === SubgraphContractType.ERC20) {\n    token = {\n      address: subgraphToken.id,\n      symbol: subgraphToken.symbol,\n      name: subgraphToken.name,\n      decimals: subgraphToken.decimals,\n      type: TokenType.ERC20,\n    };\n  } else if (subgraphToken.__typename === SubgraphContractType.ERC721) {\n    token = {\n      address: subgraphToken.id,\n      symbol: subgraphToken.symbol,\n      name: subgraphToken.name,\n      type: TokenType.ERC721,\n    };\n  }\n  return token;\n}\n\nexport function toTokenVotingMember(\n  member: SubgraphTokenVotingMember,\n): TokenVotingMember {\n  return {\n    address: member.address,\n    votingPower: BigInt(member.votingPower),\n    balance: BigInt(member.balance),\n    delegatee: member.delegatee.address === member.address\n      ? null\n      : member.delegatee.address,\n    delegators: member.delegators.filter((delegator) =>\n      delegator.address !== member.address\n    ).map((delegator) => {\n      return {\n        address: delegator.address,\n        balance: BigInt(delegator.balance),\n      };\n    }),\n  };\n}\n","import {\n  CreateProposalBaseParams,\n  ProposalBase,\n  ProposalListItemBase,\n  VersionTag,\n} from \"../client-common\";\n\n/* Installation */\nexport type MultisigPluginInstallParams = MultisigPluginSettings;\n\nexport type MultisigPluginPrepareInstallationParams = {\n  settings: MultisigPluginSettings;\n  daoAddressOrEns: string;\n  versionTag?: VersionTag;\n};\n\nexport type MultisigVotingSettings = {\n  minApprovals: number;\n  onlyListed: boolean;\n};\n\nexport type MultisigPluginSettings = {\n  members: string[];\n  votingSettings: MultisigVotingSettings;\n};\n/* update members */\nexport type UpdateAddressesParams = {\n  pluginAddress: string;\n  members: string[];\n};\nexport type RemoveAddressesParams = UpdateAddressesParams;\nexport type AddAddressesParams = UpdateAddressesParams;\n\n/* update voting settings */\nexport type UpdateMultisigVotingSettingsParams = {\n  pluginAddress: string;\n  votingSettings: MultisigVotingSettings;\n};\n\n/* Create Proposal */\nexport type CreateMultisigProposalParams = CreateProposalBaseParams & {\n  approve?: boolean;\n  tryExecution?: boolean;\n  startDate?: Date;\n  /** Date at which the proposal will expire if not approved */\n  endDate?: Date;\n};\n\n/* Approve Proposal */\nexport type ApproveMultisigProposalParams = {\n  proposalId: string;\n  tryExecution: boolean;\n};\n\nexport type CanApproveParams = {\n  proposalId: string;\n  approverAddressOrEns: string;\n};\n\nexport enum ApproveProposalStep {\n  APPROVING = \"approving\",\n  DONE = \"done\",\n}\n\nexport type ApproveProposalStepValue =\n  | { key: ApproveProposalStep.APPROVING; txHash: string }\n  | { key: ApproveProposalStep.DONE };\n\n/* Proposal */\n\nexport type MultisigProposalListItem = ProposalListItemBase & {\n  approvals: string[];\n  settings: MultisigVotingSettings;\n};\n\nexport type MultisigProposal = ProposalBase & {\n  approvals: string[];\n  settings: MultisigVotingSettings;\n};\n","import {\n  hexToBytes,\n  InvalidAddressError,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  DaoAction,\n  encodeUpdateVotingSettingsAction,\n  PluginInstallItem,\n  SupportedNetwork,\n  SupportedNetworksArray,\n  VotingSettings,\n} from \"../../../client-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport { ITokenVotingClientEncoding } from \"../../interfaces\";\nimport { MintTokenParams, TokenVotingPluginInstall } from \"../../types\";\nimport { IERC20MintableUpgradeable__factory } from \"@aragon/osx-ethers\";\nimport {\n  mintTokenParamsToContract,\n  tokenVotingInitParamsToContract,\n} from \"../utils\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { LIVE_CONTRACTS } from \"../../../client-common/constants\";\nimport { getNetwork, Networkish } from \"@ethersproject/providers\";\n\n/**\n * Encoding module the SDK TokenVoting Client\n */\nexport class TokenVotingClientEncoding extends ClientCore\n  implements ITokenVotingClientEncoding {\n  /**\n   * Computes the parameters to be given when creating the DAO,\n   * so that the plugin is configured\n   *\n   * @param {TokenVotingPluginInstall} params\n   * @param {Networkish} network\n   * @return {*}  {PluginInstallItem}\n   * @memberof TokenVotingClientEncoding\n   */\n  static getPluginInstallItem(\n    params: TokenVotingPluginInstall,\n    network: Networkish,\n  ): PluginInstallItem {\n    const networkName = getNetwork(network).name as SupportedNetwork;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    const args = tokenVotingInitParamsToContract(params);\n    const hexBytes = defaultAbiCoder.encode(\n      // [\"votingMode\",\"supportThreshold\", \"minParticipation\", \"minDuration\"], [\"address\",\"name\",\"symbol\"][ \"receivers\",\"amount\"]\n      [\n        \"tuple(uint8 votingMode, uint64 supportThreshold, uint64 minParticipation, uint64 minDuration, uint256 minProposerVotingPower) votingSettings\",\n        \"tuple(address addr, string name, string symbol) tokenSettings\",\n        \"tuple(address[] receivers, uint256[] amounts) mintSettings\",\n      ],\n      args,\n    );\n    return {\n      id: LIVE_CONTRACTS[networkName].tokenVotingRepo,\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that updates the governance configuration\n   *\n   * @param {string} pluginAddress\n   * @param {VotingSettings} params\n   * @return {*}  {DaoAction}\n   * @memberof TokenVotingClientEncoding\n   */\n  public updatePluginSettingsAction(\n    pluginAddress: string,\n    params: VotingSettings,\n  ): DaoAction {\n    if (!isAddress(pluginAddress)) {\n      throw new Error(\"Invalid plugin address\");\n    }\n    // TODO: check if to and value are correct\n    return {\n      to: pluginAddress,\n      value: BigInt(0),\n      data: encodeUpdateVotingSettingsAction(params),\n    };\n  }\n\n  /**\n   * Computes the parameters to be given when creating a proposal that mints an amount of ERC-20 tokens to an address\n   *\n   * @param {string} minterAddress\n   * @param {MintTokenParams} params\n   * @return {*}  {DaoAction}\n   * @memberof TokenVotingClientEncoding\n   */\n  public mintTokenAction(\n    minterAddress: string,\n    params: MintTokenParams,\n  ): DaoAction {\n    if (!isAddress(minterAddress) || !isAddress(params.address)) {\n      throw new InvalidAddressError();\n    }\n    const votingInterface = IERC20MintableUpgradeable__factory\n      .createInterface();\n    const args = mintTokenParamsToContract(params);\n    // get hex bytes\n    const hexBytes = votingInterface.encodeFunctionData(\"mint\", args);\n    return {\n      to: minterAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n","import { isAddress } from \"@ethersproject/address\";\nimport {\n  boolArrayToBitmap,\n  decodeProposalId,\n  decodeRatio,\n  encodeProposalId,\n  getExtendedProposalId,\n  InvalidAddressError,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidProposalIdError,\n  IpfsPinError,\n  isProposalId,\n  NoProviderError,\n  PluginInstallationPreparationError,\n  ProposalCreationError,\n  resolveIpfsCid,\n} from \"@aragon/sdk-common\";\nimport {\n  CanVoteParams,\n  ClientCore,\n  computeProposalStatusFilter,\n  CreateMajorityVotingProposalParams,\n  ExecuteProposalStep,\n  ExecuteProposalStepValue,\n  findLog,\n  PrepareInstallationStep,\n  PrepareInstallationStepValue,\n  ProposalCreationSteps,\n  ProposalCreationStepValue,\n  ProposalMetadata,\n  ProposalQueryParams,\n  ProposalSortBy,\n  SortDirection,\n  SubgraphVotingSettings,\n  TokenType,\n  VersionTag,\n  VoteProposalParams,\n  VoteProposalStep,\n  VoteProposalStepValue,\n  VotingSettings,\n} from \"../../../client-common\";\nimport {\n  DelegateTokensParams,\n  DelegateTokensStep,\n  DelegateTokensStepValue,\n  Erc20TokenDetails,\n  Erc721TokenDetails,\n  TokenVotingMember,\n  TokenVotingPluginPrepareInstallationParams,\n  TokenVotingProposal,\n  TokenVotingProposalListItem,\n  UndelegateTokensStepValue,\n  UnwrapTokensParams,\n  UnwrapTokensStep,\n  UnwrapTokensStepValue,\n  WrapTokensParams,\n  WrapTokensStep,\n  WrapTokensStepValue,\n} from \"../../types\";\nimport {\n  SubgraphContractType,\n  SubgraphErc20Token,\n  SubgraphErc721Token,\n  SubgraphTokenVotingMember,\n  SubgraphTokenVotingProposal,\n  SubgraphTokenVotingProposalListItem,\n} from \"../types\";\nimport {\n  QueryTokenVotingMembers,\n  QueryTokenVotingPlugin,\n  QueryTokenVotingProposal,\n  QueryTokenVotingProposals,\n  QueryTokenVotingSettings,\n} from \"../graphql-queries\";\nimport {\n  toTokenVotingMember,\n  toTokenVotingProposal,\n  toTokenVotingProposalListItem,\n} from \"../utils\";\nimport {\n  GovernanceERC20__factory,\n  GovernanceWrappedERC20__factory,\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n  TokenVoting__factory,\n} from \"@aragon/osx-ethers\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  EMPTY_PROPOSAL_METADATA_LINK,\n  LIVE_CONTRACTS,\n  UNAVAILABLE_PROPOSAL_METADATA,\n  UNSUPPORTED_PROPOSAL_METADATA_LINK,\n} from \"../../../client-common/constants\";\nimport { TokenVotingClientEncoding } from \"./encoding\";\nimport { ITokenVotingClientMethods } from \"../../interfaces\";\n/**\n * Methods module the SDK TokenVoting Client\n */\nexport class TokenVotingClientMethods extends ClientCore\n  implements ITokenVotingClientMethods {\n  /**\n   * Creates a new proposal on the given TokenVoting plugin contract\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {*}  {AsyncGenerator<ProposalCreationStepValue>}\n   * @memberof TokenVotingClient\n   */\n  public async *createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): AsyncGenerator<ProposalCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const tx = await tokenVotingContract.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n      params.creatorVote || 0,\n      params.executeOnPass || false,\n    );\n\n    yield {\n      key: ProposalCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const tokenVotingContractInterface = TokenVoting__factory.createInterface();\n    const log = findLog(\n      receipt,\n      tokenVotingContractInterface,\n      \"ProposalCreated\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = tokenVotingContractInterface.parseLog(log);\n    const proposalId = parsedLog.args[\"proposalId\"];\n    if (!proposalId) {\n      throw new ProposalCreationError();\n    }\n\n    yield {\n      key: ProposalCreationSteps.DONE,\n      proposalId: encodeProposalId(params.pluginAddress, Number(proposalId)),\n    };\n  }\n\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {ProposalMetadata} params\n   * @return {*}  {Promise<string>}\n   * @memberof ClientMethods\n   */\n  public async pinMetadata(params: ProposalMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch (e) {\n      throw new IpfsPinError(e);\n    }\n  }\n  /**\n   * Cast a vote on the given proposal using the client's wallet. Depending on the proposal settings, an affirmative vote may execute the proposal's actions on the DAO.\n   *\n   * @param {VoteProposalParams} params\n   * @param {VoteValues} vote\n   * @return {*}  {AsyncGenerator<VoteProposalStepValue>}\n   * @memberof TokenVotingClient\n   */\n  public async *voteProposal(\n    params: VoteProposalParams,\n  ): AsyncGenerator<VoteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await tokenVotingContract.vote(\n      id,\n      params.vote,\n      false,\n    );\n\n    yield {\n      key: VoteProposalStep.VOTING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: VoteProposalStep.DONE,\n    };\n  }\n  /**\n   * Executes the given proposal, provided that it has already passed\n   *\n   * @param {string} proposalId\n   * @return {*}  {AsyncGenerator<ExecuteProposalStepValue>}\n   * @memberof TokenVotingClient\n   */\n  public async *executeProposal(\n    proposalId: string,\n  ): AsyncGenerator<ExecuteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const tx = await tokenVotingContract.execute(id);\n\n    yield {\n      key: ExecuteProposalStep.EXECUTING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: ExecuteProposalStep.DONE,\n    };\n  }\n\n  /**\n   * Prepares the installation of a token voting plugin in a given dao\n   *\n   * @param {TokenVotingPluginPrepareInstallationParams} params\n   * @return {*}  {AsyncGenerator<PrepareInstallationStepValue>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async *prepareInstallation(\n    params: TokenVotingPluginPrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const networkName = this.web3.getNetworkName();\n\n    // connect to psp contract\n    const pspContract = PluginSetupProcessor__factory.connect(\n      LIVE_CONTRACTS[networkName].pluginSetupProcessor,\n      signer,\n    );\n    // connect to plugin repo\n    const tokenVotingRepoContract = PluginRepo__factory.connect(\n      LIVE_CONTRACTS[networkName].tokenVotingRepo,\n      signer,\n    );\n    // use specified version or latest\n    let versionTag: VersionTag | undefined = params.versionTag;\n    if (!params.versionTag) {\n      const latestVersion = await tokenVotingRepoContract\n        [\"getLatestVersion(address)\"](\n          LIVE_CONTRACTS[networkName].tokenVotingSetup,\n        );\n      versionTag = {\n        build: latestVersion.tag.build,\n        release: latestVersion.tag.release,\n      };\n    }\n    // get install data\n    const tokenVotingPluginInstallItem = TokenVotingClientEncoding\n      .getPluginInstallItem(params.settings, networkName);\n    // execute prepareInstallationon\n    const tx = await pspContract.prepareInstallation(\n      params.daoAddressOrEns,\n      {\n        pluginSetupRef: {\n          pluginSetupRepo: LIVE_CONTRACTS[networkName].tokenVotingRepo,\n          versionTag: versionTag!,\n        },\n        data: tokenVotingPluginInstallItem.data,\n      },\n    );\n\n    yield {\n      key: PrepareInstallationStep.PREPARING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const pspContractInterface = PluginSetupProcessor__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      pspContractInterface,\n      \"InstallationPrepared\",\n    );\n    if (!log) {\n      throw new PluginInstallationPreparationError();\n    }\n\n    const parsedLog = pspContractInterface.parseLog(log);\n    const pluginAddress = parsedLog.args[\"plugin\"];\n    const preparedSetupData = parsedLog.args[\"preparedSetupData\"];\n    if (!(pluginAddress || preparedSetupData)) {\n      throw new PluginInstallationPreparationError();\n    }\n    yield {\n      key: PrepareInstallationStep.DONE,\n      pluginAddress,\n      pluginRepo: LIVE_CONTRACTS[networkName].tokenVotingRepo,\n      versionTag: versionTag!,\n      permissions: preparedSetupData.permissions,\n      helpers: preparedSetupData.helpers,\n    };\n  }\n\n  public async *wrapTokens(\n    params: WrapTokensParams,\n  ): AsyncGenerator<WrapTokensStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!isAddress(params.wrappedTokenAddress)) {\n      throw new InvalidAddressError();\n    }\n    const wrappedErc20Contract = GovernanceWrappedERC20__factory.connect(\n      params.wrappedTokenAddress,\n      signer,\n    );\n\n    const account = await signer.getAddress();\n\n    const tx = await wrappedErc20Contract.depositFor(\n      account,\n      params.amount,\n    );\n\n    yield {\n      key: WrapTokensStep.WRAPPING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: WrapTokensStep.DONE,\n    };\n  }\n  public async *unwrapTokens(\n    params: UnwrapTokensParams,\n  ): AsyncGenerator<UnwrapTokensStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    if (!isAddress(params.wrappedTokenAddress)) {\n      throw new InvalidAddressError();\n    }\n    const wrappedErc20Contract = GovernanceWrappedERC20__factory.connect(\n      params.wrappedTokenAddress,\n      signer,\n    );\n\n    const account = await signer.getAddress();\n\n    const tx = await wrappedErc20Contract.withdrawTo(\n      account,\n      params.amount,\n    );\n\n    yield {\n      key: UnwrapTokensStep.UNWRAPPING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: UnwrapTokensStep.DONE,\n    };\n  }\n  /**\n   * Delegates all the signer's voting power to a delegatee\n   *\n   * @param {DelegateTokensParams} params\n   * @return {*}  {AsyncGenerator<DelegateTokensStepValue>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async *delegateTokens(\n    params: DelegateTokensParams,\n  ): AsyncGenerator<DelegateTokensStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const governanceErc20Contract = GovernanceERC20__factory.connect(\n      params.tokenAddress,\n      signer,\n    );\n    const tx = await governanceErc20Contract.delegate(params.delegatee);\n    yield {\n      key: DelegateTokensStep.DELEGATING,\n      txHash: tx.hash,\n    };\n    await tx.wait();\n    yield {\n      key: DelegateTokensStep.DONE,\n    };\n  }\n  /**\n   * Delegates all the signer's tokens back to itself\n   *\n   * @param {string} tokenAddress\n   * @return {*}  {AsyncGenerator<UndelegateTokensStepValue>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async *undelegateTokens(\n    tokenAddress: string,\n  ): AsyncGenerator<UndelegateTokensStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    yield* this.delegateTokens({\n      tokenAddress,\n      delegatee: await signer.getAddress(),\n    });\n  }\n  /**\n   * Retrieves the current signer's delegatee for the given token\n   *\n   * @param {string} tokenAddress\n   * @return {*}  {Promise<string | null>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async getDelegatee(tokenAddress: string): Promise<string | null> {\n    const signer = this.web3.getConnectedSigner();\n    const governanceErc20Contract = GovernanceERC20__factory.connect(\n      tokenAddress,\n      signer,\n    );\n    const address = await signer.getAddress();\n    const delegatee = await governanceErc20Contract.delegates(address);\n    return address === delegatee ? null : delegatee;\n  }\n\n  /**\n   * Checks if an user can vote in a proposal\n   *\n   * @param {CanVoteParams} params\n   * @returns {*}  {Promise<boolean>}\n   */\n  public async canVote(params: CanVoteParams): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n\n    if (!isAddress(params.voterAddressOrEns)) {\n      throw new InvalidAddressError();\n    }\n\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    return tokenVotingContract.callStatic.canVote(\n      id,\n      params.voterAddressOrEns,\n      params.vote,\n    );\n  }\n\n  /**\n   * Checks whether the current proposal can be executed\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<boolean>}\n   * @memberof TokenVotingClientMethods\n   */\n  public async canExecute(\n    proposalId: string,\n  ): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    return tokenVotingContract.canExecute(id);\n  }\n  /**\n   * Returns the list of wallet addresses holding tokens from the underlying Token contract used by the plugin\n   *\n   * @async\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<string[]>}\n   * @memberof TokenVotingClient\n   */\n  public async getMembers(pluginAddress: string): Promise<TokenVotingMember[]> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryTokenVotingMembers;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"TokenVoting members\";\n    type T = { tokenVotingPlugin: { members: SubgraphTokenVotingMember[] } };\n    const { tokenVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return tokenVotingPlugin.members.map((\n      member: SubgraphTokenVotingMember,\n    ) => toTokenVotingMember(member));\n  }\n\n  /**\n   * Returns the details of the given proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<TokenVotingProposal>}\n   * @memberof TokenVotingClient\n   */\n  public async getProposal(\n    proposalId: string,\n  ): Promise<TokenVotingProposal | null> {\n    if (!isProposalId(proposalId)) {\n      throw new InvalidProposalIdError();\n    }\n    const extendedProposalId = getExtendedProposalId(proposalId);\n    const query = QueryTokenVotingProposal;\n    const params = {\n      proposalId: extendedProposalId,\n    };\n    const name = \"TokenVoting proposal\";\n    type T = { tokenVotingProposal: SubgraphTokenVotingProposal };\n    const { tokenVotingProposal } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenVotingProposal) {\n      return null;\n    } else if (!tokenVotingProposal.metadata) {\n      return toTokenVotingProposal(\n        tokenVotingProposal,\n        EMPTY_PROPOSAL_METADATA_LINK,\n      );\n    }\n    // format in the metadata field\n    try {\n      const metadataCid = resolveIpfsCid(tokenVotingProposal.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as ProposalMetadata;\n      return toTokenVotingProposal(tokenVotingProposal, metadata);\n      // TODO: Parse and validate schema\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toTokenVotingProposal(\n          tokenVotingProposal,\n          UNSUPPORTED_PROPOSAL_METADATA_LINK,\n        );\n      }\n      return toTokenVotingProposal(\n        tokenVotingProposal,\n        UNAVAILABLE_PROPOSAL_METADATA,\n      );\n    }\n  }\n  /**\n   * Returns a list of proposals on the Plugin, filtered by the given criteria\n   *\n   * @param {ProposalQueryParams} params\n   * @return {*}  {Promise<TokenVotingProposalListItem[]>}\n   * @memberof TokenVotingClient\n   */\n  public async getProposals({\n    daoAddressOrEns,\n    limit = 10,\n    status,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = ProposalSortBy.CREATED_AT,\n  }: ProposalQueryParams): Promise<TokenVotingProposalListItem[]> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        try {\n          const resolvedAddress = await provider.resolveName(address);\n          if (!resolvedAddress) {\n            throw new InvalidAddressOrEnsError();\n          }\n          address = resolvedAddress;\n        } catch (e) {\n          throw new InvalidAddressOrEnsError(e);\n        }\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (status) {\n      where = { ...where, ...computeProposalStatusFilter(status) };\n    }\n    const query = QueryTokenVotingProposals;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"TokenVoting proposals\";\n    type T = { tokenVotingProposals: SubgraphTokenVotingProposalListItem[] };\n    const { tokenVotingProposals } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      tokenVotingProposals.map(\n        async (\n          proposal: SubgraphTokenVotingProposalListItem,\n        ): Promise<TokenVotingProposalListItem> => {\n          // format in the metadata field\n          if (!proposal.metadata) {\n            return toTokenVotingProposalListItem(\n              proposal,\n              EMPTY_PROPOSAL_METADATA_LINK,\n            );\n          }\n          try {\n            const metadataCid = resolveIpfsCid(proposal.metadata);\n            const stringMetadata = await this.ipfs.fetchString(metadataCid);\n            const metadata = JSON.parse(stringMetadata) as ProposalMetadata;\n            return toTokenVotingProposalListItem(proposal, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toTokenVotingProposalListItem(\n                proposal,\n                UNSUPPORTED_PROPOSAL_METADATA_LINK,\n              );\n            }\n            return toTokenVotingProposalListItem(\n              proposal,\n              UNAVAILABLE_PROPOSAL_METADATA,\n            );\n          }\n        },\n      ),\n    );\n  }\n\n  /**\n   * Returns the settings of a plugin given the address of the plugin instance\n   *\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<VotingSettings>}\n   * @memberof TokenVotingClient\n   */\n  public async getVotingSettings(\n    pluginAddress: string,\n  ): Promise<VotingSettings | null> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryTokenVotingSettings;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"TokenVoting settings\";\n    type T = { tokenVotingPlugin: SubgraphVotingSettings };\n    const { tokenVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenVotingPlugin) {\n      return null;\n    }\n    return {\n      minDuration: parseInt(tokenVotingPlugin.minDuration),\n      supportThreshold: decodeRatio(\n        BigInt(tokenVotingPlugin.supportThreshold),\n        6,\n      ),\n      minParticipation: decodeRatio(\n        BigInt(tokenVotingPlugin.minParticipation),\n        6,\n      ),\n      minProposerVotingPower: BigInt(\n        tokenVotingPlugin.minProposerVotingPower,\n      ),\n      votingMode: tokenVotingPlugin.votingMode,\n    };\n  }\n\n  /**\n   * Returns the details of the token used in a specific plugin instance\n   *\n   * @param {string} pluginAddress\n   * @return {*}  {Promise<Erc20TokenDetails | null>}\n   * @memberof TokenVotingClient\n   */\n  public async getToken(\n    pluginAddress: string,\n  ): Promise<Erc20TokenDetails | Erc721TokenDetails | null> {\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const query = QueryTokenVotingPlugin;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"TokenVoting token\";\n    type T = {\n      tokenVotingPlugin: { token: SubgraphErc20Token | SubgraphErc721Token };\n    };\n    const { tokenVotingPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!tokenVotingPlugin) {\n      return null;\n    }\n    let token: SubgraphErc20Token | SubgraphErc721Token =\n      tokenVotingPlugin.token;\n    // type erc20\n    if (token.__typename === SubgraphContractType.ERC20) {\n      return {\n        address: token.id,\n        name: token.name,\n        symbol: token.symbol,\n        decimals: token.decimals,\n        type: TokenType.ERC20,\n      };\n      // type erc721\n    } else if (token.__typename === SubgraphContractType.ERC721) {\n      return {\n        address: token.id,\n        name: token.name,\n        symbol: token.symbol,\n        type: TokenType.ERC721,\n      };\n    }\n    return null;\n  }\n}\n","import {\n  IERC20MintableUpgradeable__factory,\n  MajorityVotingBase__factory,\n} from \"@aragon/osx-ethers\";\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  MajorityVotingBase__factory.createInterface().getFunction(\n    \"updateVotingSettings\",\n  )\n    .format(\"minimal\"),\n  IERC20MintableUpgradeable__factory.createInterface().getFunction(\"mint\")\n    .format(\"minimal\"),\n];\n","import { bytesToHex } from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  decodeUpdatePluginSettingsAction,\n  getFunctionFragment,\n  InterfaceParams,\n  VotingSettings,\n} from \"../../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport { MintTokenParams } from \"../../types\";\nimport { ITokenVotingClientDecoding } from \"../../interfaces\";\nimport { IERC20MintableUpgradeable__factory } from \"@aragon/osx-ethers\";\nimport { mintTokenParamsFromContract } from \"../utils\";\n\n/**\n * Decoding module the SDK TokenVoting Client\n */\nexport class TokenVotingClientDecoding extends ClientCore\n  implements ITokenVotingClientDecoding {\n  /**\n   * Decodes a dao metadata from an encoded update metadata action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {VotingSettings}\n   * @memberof TokenVotingClientDecoding\n   */\n  public updatePluginSettingsAction(data: Uint8Array): VotingSettings {\n    return decodeUpdatePluginSettingsAction(data);\n  }\n  /**\n   * Decodes the mint token params from an encoded mint token action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {MintTokenParams}\n   * @memberof TokenVotingClientDecoding\n   */\n  public mintTokenAction(data: Uint8Array): MintTokenParams {\n    const votingInterface = IERC20MintableUpgradeable__factory\n      .createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = votingInterface.getFunction(\"mint\");\n    const result = votingInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return mintTokenParamsFromContract(result);\n  }\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {(InterfaceParams | null)}\n   * @memberof TokenVotingClientDecoding\n   */\n  public findInterface(data: Uint8Array): InterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n","import {\n  GovernanceERC20__factory,\n  TokenVoting__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  ClientCore,\n  CreateMajorityVotingProposalParams,\n  GasFeeEstimation,\n  VoteProposalParams,\n} from \"../../../client-common\";\nimport { ITokenVotingClientEstimation } from \"../../interfaces\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { boolArrayToBitmap, decodeProposalId } from \"@aragon/sdk-common\";\nimport { DelegateTokensParams } from \"../../types\";\n/**\n * Estimation module the SDK TokenVoting Client\n */\nexport class TokenVotingClientEstimation extends ClientCore\n  implements ITokenVotingClientEstimation {\n  /**\n   * Estimates the gas fee of creating a proposal on the plugin\n   *\n   * @param {CreateMajorityVotingProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async createProposal(\n    params: CreateMajorityVotingProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const estimatedGasFee = await tokenVotingContract.estimateGas\n      .createProposal(\n        toUtf8Bytes(params.metadataUri),\n        params.actions || [],\n        allowFailureMap,\n        Math.round(startTimestamp / 1000),\n        Math.round(endTimestamp / 1000),\n        params.creatorVote || 0,\n        params.executeOnPass || false,\n      );\n    return this.web3.getApproximateGasFee(estimatedGasFee.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of casting a vote on a proposal\n   *\n   * @param {VoteProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async voteProposal(\n    params: VoteProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      params.proposalId,\n    );\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const estimation = await tokenVotingContract.estimateGas.vote(\n      id,\n      params.vote,\n      false,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of executing a TokenVoting proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async executeProposal(\n    proposalId: string,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      proposalId,\n    );\n\n    const tokenVotingContract = TokenVoting__factory.connect(\n      pluginAddress,\n      signer,\n    );\n    const estimation = await tokenVotingContract.estimateGas.execute(\n      id,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of delegating voting power to a delegatee\n   *\n   * @param {DelegateTokensParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async delegateTokens(\n    params: DelegateTokensParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    const governanceErc20Contract = GovernanceERC20__factory.connect(\n      params.tokenAddress,\n      signer,\n    );\n    const estimation = await governanceErc20Contract.estimateGas.delegate(\n      params.delegatee,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of undelegating voting power\n   *\n   * @param {string} tokenAddress\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof TokenVotingClientEstimation\n   */\n  public async undelegateTokens(\n    tokenAddress: string,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    return this.delegateTokens({\n      tokenAddress,\n      delegatee: await signer.getAddress(),\n    });\n  }\n}\n","import {\n  ITokenVotingClient,\n  ITokenVotingClientDecoding,\n  ITokenVotingClientEncoding,\n  ITokenVotingClientEstimation,\n  ITokenVotingClientMethods,\n} from \"./interfaces\";\nimport { TokenVotingClientMethods } from \"./internal/client/methods\";\nimport { TokenVotingClientEncoding } from \"./internal/client/encoding\";\nimport { TokenVotingClientDecoding } from \"./internal/client/decoding\";\nimport { TokenVotingClientEstimation } from \"./internal/client/estimation\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  PluginInstallItem,\n} from \"../client-common\";\nimport { Networkish } from \"@ethersproject/providers\";\nimport { TokenVotingPluginInstall } from \"./types\";\n\n/**\n * Provider a generic client with high level methods to manage and interact a Token Voting plugin installed in a DAO\n */\nexport class TokenVotingClient extends ClientCore\n  implements ITokenVotingClient {\n  public methods: ITokenVotingClientMethods;\n  public encoding: ITokenVotingClientEncoding;\n  public decoding: ITokenVotingClientDecoding;\n  public estimation: ITokenVotingClientEstimation;\n\n  constructor(context: ContextPlugin) {\n    super(context);\n    this.methods = new TokenVotingClientMethods(context);\n    this.encoding = new TokenVotingClientEncoding(context);\n    this.decoding = new TokenVotingClientDecoding(context);\n    this.estimation = new TokenVotingClientEstimation(context);\n  }\n  static encoding = {\n    /**\n     * Computes the parameters to be given when creating the DAO,\n     * so that the plugin is configured\n     *\n     * @param {TokenVotingPluginInstall} params\n     * @param {Networkish} [network=\"mainnet\"]\n     * @return {*}  {PluginInstallItem}\n     * @memberof TokenVotingClient\n     */\n    getPluginInstallItem: (\n      params: TokenVotingPluginInstall,\n      network: Networkish = \"mainnet\",\n    ): PluginInstallItem =>\n      TokenVotingClientEncoding.getPluginInstallItem(params, network),\n  };\n}\n","import { gql } from \"graphql-request\";\n\nexport const QueryMultisigProposal = gql`\nquery MultisigProposal($proposalId: ID!) {\n  multisigProposal(id: $proposalId){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    createdAt\n    startDate\n    endDate\n    actions {\n      to\n      value\n      data\n    }\n    executionDate\n    executionBlockNumber\n    creationBlockNumber\n    plugin {\n      onlyListed\n    }\n    minApprovals\n    executionTxHash\n    executed\n    potentiallyExecutable\n    approvers{\n      id\n    }\n  }\n}\n`;\nexport const QueryMultisigProposals = gql`\nquery MultisigProposals($where: MultisigProposal_filter!, $limit:Int!, $skip: Int!, $direction: OrderDirection!, $sortBy: MultisigProposal_orderBy!) {\n  multisigProposals(where: $where, first: $limit, skip: $skip, orderDirection: $direction, orderBy: $sortBy){\n    id\n    dao {\n      id\n      subdomain\n    }\n    creator\n    metadata\n    executed\n    potentiallyExecutable\n    approvals\n    startDate\n    endDate\n    executionDate\n    executionBlockNumber\n    creationBlockNumber\n    approvers {\n      id\n    }\n    minApprovals\n    plugin{\n      onlyListed\n    }\n  }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryMultisigVotingSettings = gql`\nquery MultisigVotingSettings($address: ID!) {\n    multisigPlugin(id: $address){\n        minApprovals\n        onlyListed\n    }\n}\n`;\n","import { gql } from \"graphql-request\";\n\nexport const QueryMultisigMembers = gql`\nquery MultisigMembers($address: ID!) {\n    multisigPlugin(id: $address){\n        members {\n            address\n        }\n    }\n}\n`;\n","import { getCompactProposalId, hexToBytes } from \"@aragon/sdk-common\";\nimport {\n  computeProposalStatus,\n  DaoAction,\n  ProposalMetadata,\n  SubgraphAction,\n} from \"../../client-common\";\nimport { MultisigProposal, MultisigProposalListItem } from \"../types\";\nimport {\n  SubgraphMultisigProposal,\n  SubgraphMultisigProposalListItem,\n} from \"./types\";\n\nexport function toMultisigProposal(\n  proposal: SubgraphMultisigProposal,\n  metadata: ProposalMetadata,\n): MultisigProposal {\n  const creationDate = new Date(\n    parseInt(proposal.createdAt) * 1000,\n  );\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(\n    parseInt(proposal.endDate) * 1000,\n  );\n  const executionDate = proposal.executionDate\n    ? new Date(\n      parseInt(proposal.executionDate) * 1000,\n    )\n    : null;\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n      description: metadata.description,\n      resources: metadata.resources,\n      media: metadata.media,\n    },\n    settings: {\n      onlyListed: proposal.plugin.onlyListed,\n      minApprovals: proposal.minApprovals,\n    },\n    creationBlockNumber: parseInt(proposal.creationBlockNumber) || 0,\n    creationDate,\n    startDate,\n    endDate,\n    executionDate,\n    executionBlockNumber: parseInt(proposal.executionBlockNumber) || null,\n    executionTxHash: proposal.executionTxHash || null,\n    actions: proposal.actions.map(\n      (action: SubgraphAction): DaoAction => {\n        return {\n          data: hexToBytes(action.data),\n          to: action.to,\n          value: BigInt(action.value),\n        };\n      },\n    ),\n    status: computeProposalStatus(proposal),\n    approvals: proposal.approvers.map(\n      (approver) => approver.id.slice(0, 42),\n    ),\n  };\n}\nexport function toMultisigProposalListItem(\n  proposal: SubgraphMultisigProposalListItem,\n  metadata: ProposalMetadata,\n): MultisigProposalListItem {\n  const startDate = new Date(\n    parseInt(proposal.startDate) * 1000,\n  );\n  const endDate = new Date(\n    parseInt(proposal.endDate) * 1000,\n  );\n  return {\n    id: getCompactProposalId(proposal.id),\n    dao: {\n      address: proposal.dao.id,\n      name: proposal.dao.subdomain,\n    },\n    creatorAddress: proposal.creator,\n    metadata: {\n      title: metadata.title,\n      summary: metadata.summary,\n    },\n    approvals: proposal.approvers.map(\n      (approver) => approver.id.slice(0, 42),\n    ),\n    settings: {\n      onlyListed: proposal.plugin.onlyListed,\n      minApprovals: proposal.minApprovals,\n    },\n    startDate,\n    endDate,\n    status: computeProposalStatus(proposal),\n  };\n}\n","import {\n  hexToBytes,\n  InvalidAddressError,\n  UnsupportedNetworkError,\n} from \"@aragon/sdk-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  ClientCore,\n  DaoAction,\n  PluginInstallItem,\n  SupportedNetwork,\n  SupportedNetworksArray,\n} from \"../../../client-common\";\nimport {\n  AddAddressesParams,\n  MultisigPluginInstallParams,\n  RemoveAddressesParams,\n  UpdateMultisigVotingSettingsParams,\n} from \"../../types\";\n// @ts-ignore\n// todo fix new contracts-ethers\nimport { Multisig__factory } from \"@aragon/osx-ethers\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { LIVE_CONTRACTS } from \"../../../client-common/constants\";\nimport { getNetwork, Networkish } from \"@ethersproject/providers\";\nimport { IMultisigClientEncoding } from \"../../interfaces\";\n\n/**\n * Encoding module for the SDK Multisig Client\n */\nexport class MultisigClientEncoding extends ClientCore\n  implements IMultisigClientEncoding {\n  /**\n   * Computes the parameters to be given when creating the DAO,\n   * so that the plugin is configured\n   *\n   * @param {MultisigPluginInstallParams} params\n   * @param {Networkish} network\n   *\n   * @return {*}  {PluginInstallItem}\n   * @memberof MultisigClientEncoding\n   */\n  static getPluginInstallItem(\n    params: MultisigPluginInstallParams,\n    network: Networkish,\n  ): PluginInstallItem {\n    const networkName = getNetwork(network).name as SupportedNetwork;\n    if (!SupportedNetworksArray.includes(networkName)) {\n      throw new UnsupportedNetworkError(networkName);\n    }\n    const hexBytes = defaultAbiCoder.encode(\n      // members, [onlyListed, minApprovals]\n      [\n        \"address[]\",\n        \"tuple(bool, uint16)\",\n      ],\n      [\n        params.members,\n        [\n          params.votingSettings.onlyListed,\n          params.votingSettings.minApprovals,\n        ],\n      ],\n    );\n    return {\n      id: LIVE_CONTRACTS[networkName].multisigRepo,\n      data: hexToBytes(hexBytes),\n    };\n  }\n\n  /**\n   * Computes the parameters to be given when creating a proposal that updates the governance configuration\n   *\n   * @param {AddAddressesParams} params\n   * @return {*}  {DaoAction[]}\n   * @memberof MultisigClientEncoding\n   */\n  public addAddressesAction(\n    params: AddAddressesParams,\n  ): DaoAction {\n    if (!isAddress(params.pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO yup validation\n    for (const member of params.members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const multisigInterface = Multisig__factory.createInterface();\n    // get hex bytes\n    const hexBytes = multisigInterface.encodeFunctionData(\n      \"addAddresses\",\n      [params.members],\n    );\n    return {\n      to: params.pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal that adds addresses to address list\n   *\n   * @param {RemoveAddressesParams} params\n   * @return {*}  {DaoAction[]}\n   * @memberof MultisigClientEncoding\n   */\n  public removeAddressesAction(\n    params: RemoveAddressesParams,\n  ): DaoAction {\n    if (!isAddress(params.pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    // TODO yup validation\n    for (const member of params.members) {\n      if (!isAddress(member)) {\n        throw new InvalidAddressError();\n      }\n    }\n    const multisigInterface = Multisig__factory.createInterface();\n    // get hex bytes\n    const hexBytes = multisigInterface.encodeFunctionData(\n      \"removeAddresses\",\n      [params.members],\n    );\n    return {\n      to: params.pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n  /**\n   * Computes the parameters to be given when creating a proposal updates multisig settings\n   *\n   * @param {UpdateMultisigVotingSettingsParams} params\n   * @return {*}  {DaoAction}\n   * @memberof MultisigClientEncoding\n   */\n  public updateMultisigVotingSettings(\n    params: UpdateMultisigVotingSettingsParams,\n  ): DaoAction {\n    if (!isAddress(params.pluginAddress)) {\n      throw new InvalidAddressError();\n    }\n    const multisigInterface = Multisig__factory.createInterface();\n    // get hex bytes\n    const hexBytes = multisigInterface.encodeFunctionData(\n      \"updateMultisigSettings\",\n      [params.votingSettings],\n    );\n    return {\n      to: params.pluginAddress,\n      value: BigInt(0),\n      data: hexToBytes(hexBytes),\n    };\n  }\n}\n","import {\n  boolArrayToBitmap,\n  decodeProposalId,\n  encodeProposalId,\n  getExtendedProposalId,\n  InvalidAddressOrEnsError,\n  InvalidCidError,\n  InvalidProposalIdError,\n  IpfsPinError,\n  isProposalId,\n  NoProviderError,\n  PluginInstallationPreparationError,\n  ProposalCreationError,\n  resolveIpfsCid,\n} from \"@aragon/sdk-common\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  ApproveMultisigProposalParams,\n  ApproveProposalStep,\n  ApproveProposalStepValue,\n  CanApproveParams,\n  CreateMultisigProposalParams,\n  MultisigPluginPrepareInstallationParams,\n  MultisigProposal,\n  MultisigProposalListItem,\n  MultisigVotingSettings,\n} from \"../../types\";\nimport {\n  SubgraphMultisigProposal,\n  SubgraphMultisigProposalListItem,\n  SubgraphMultisigVotingSettings,\n} from \"../types\";\nimport {\n  ClientCore,\n  computeProposalStatusFilter,\n  ExecuteProposalStep,\n  ExecuteProposalStepValue,\n  findLog,\n  PrepareInstallationStep,\n  PrepareInstallationStepValue,\n  ProposalCreationSteps,\n  ProposalCreationStepValue,\n  ProposalMetadata,\n  ProposalQueryParams,\n  ProposalSortBy,\n  SortDirection,\n  SubgraphMembers,\n  VersionTag,\n} from \"../../../client-common\";\nimport {\n  EMPTY_PROPOSAL_METADATA_LINK,\n  LIVE_CONTRACTS,\n  UNAVAILABLE_PROPOSAL_METADATA,\n  UNSUPPORTED_PROPOSAL_METADATA_LINK,\n} from \"../../../client-common/constants\";\nimport {\n  Multisig__factory,\n  PluginRepo__factory,\n  PluginSetupProcessor__factory,\n} from \"@aragon/osx-ethers\";\nimport {\n  QueryMultisigMembers,\n  QueryMultisigProposal,\n  QueryMultisigProposals,\n  QueryMultisigVotingSettings,\n} from \"../graphql-queries\";\nimport { toMultisigProposal, toMultisigProposalListItem } from \"../utils\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { MultisigClientEncoding } from \"./encoding\";\nimport { IMultisigClientMethods } from \"../../interfaces\";\n\n/**\n * Methods module the SDK Address List Client\n */\nexport class MultisigClientMethods extends ClientCore\n  implements IMultisigClientMethods {\n  /**\n   * Creates a new proposal on the given multisig plugin contract\n   *\n   * @param {CreateMultisigProposalParams} params\n   * @return {*}  {AsyncGenerator<ProposalCreationStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *createProposal(\n    params: CreateMultisigProposalParams,\n  ): AsyncGenerator<ProposalCreationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const multisigContract = Multisig__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const tx = await multisigContract.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      params.approve || false,\n      params.tryExecution || false,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n    );\n\n    yield {\n      key: ProposalCreationSteps.CREATING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const multisigContractInterface = Multisig__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      multisigContractInterface,\n      \"ProposalCreated\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = multisigContractInterface.parseLog(log);\n    const proposalId = parsedLog.args[\"proposalId\"];\n    if (!proposalId) {\n      throw new ProposalCreationError();\n    }\n\n    yield {\n      key: ProposalCreationSteps.DONE,\n      proposalId: encodeProposalId(params.pluginAddress, Number(proposalId)),\n    };\n  }\n\n  /**\n   * Pins a metadata object into IPFS and retruns the generated hash\n   *\n   * @param {ProposalMetadata} params\n   * @return {*}  {Promise<string>}\n   * @memberof MultisigClientMethods\n   */\n  public async pinMetadata(params: ProposalMetadata): Promise<string> {\n    try {\n      const cid = await this.ipfs.add(JSON.stringify(params));\n      await this.ipfs.pin(cid);\n      return `ipfs://${cid}`;\n    } catch (e) {\n      throw new IpfsPinError(e);\n    }\n  }\n  /**\n   * Allow a wallet in the multisig give approval to a proposal\n   *\n   * @param {ApproveMultisigProposalParams} params\n   * @return {*}  {AsyncGenerator<ApproveProposalStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *approveProposal(\n    params: ApproveMultisigProposalParams,\n  ): AsyncGenerator<ApproveProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await multisigContract.approve(\n      id,\n      params.tryExecution,\n    );\n\n    yield {\n      key: ApproveProposalStep.APPROVING,\n      txHash: tx.hash,\n    };\n\n    await tx.wait();\n\n    yield {\n      key: ApproveProposalStep.DONE,\n    };\n  }\n  /**\n   * Allow a wallet in the multisig give approval to a proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {AsyncGenerator<ExecuteMultisigProposalStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *executeProposal(\n    proposalId: string,\n  ): AsyncGenerator<ExecuteProposalStepValue> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const tx = await multisigContract.execute(\n      id,\n    );\n\n    yield {\n      key: ExecuteProposalStep.EXECUTING,\n      txHash: tx.hash,\n    };\n\n    await tx.wait();\n\n    yield {\n      key: ExecuteProposalStep.DONE,\n    };\n  }\n  /**\n   * Prepares the installation of a multisig plugin in a given dao\n   *\n   * @param {MultisigPluginPrepareInstallationParams} params\n   * @return {*}  {AsyncGenerator<PrepareInstallationStepValue>}\n   * @memberof MultisigClientMethods\n   */\n  public async *prepareInstallation(\n    params: MultisigPluginPrepareInstallationParams,\n  ): AsyncGenerator<PrepareInstallationStepValue> {\n    const signer = this.web3.getConnectedSigner();\n    const networkName = this.web3.getNetworkName();\n    // connect to psp contract\n    const pspContract = PluginSetupProcessor__factory.connect(\n      LIVE_CONTRACTS[networkName].pluginSetupProcessor,\n      signer,\n    );\n    // connect to plugin repo\n    const multisigRepoContract = PluginRepo__factory.connect(\n      LIVE_CONTRACTS[networkName].multisigRepo,\n      signer,\n    );\n    // use specified version or latest\n    let versionTag: VersionTag | undefined = params.versionTag;\n    if (!params.versionTag) {\n      const latestVersion = await multisigRepoContract\n        [\"getLatestVersion(address)\"](\n          LIVE_CONTRACTS[networkName].multisigSetup,\n        );\n      versionTag = {\n        build: latestVersion.tag.build,\n        release: latestVersion.tag.release,\n      };\n    }\n    // get install data\n    const multisigPluginInstallItem = MultisigClientEncoding\n      .getPluginInstallItem(params.settings, networkName);\n    // execute prepareInstallation\n    const tx = await pspContract.prepareInstallation(\n      params.daoAddressOrEns,\n      {\n        pluginSetupRef: {\n          pluginSetupRepo: LIVE_CONTRACTS[networkName].multisigRepo,\n          versionTag: versionTag!,\n        },\n        data: multisigPluginInstallItem.data,\n      },\n    );\n\n    yield {\n      key: PrepareInstallationStep.PREPARING,\n      txHash: tx.hash,\n    };\n\n    const receipt = await tx.wait();\n    const pspContractInterface = PluginSetupProcessor__factory\n      .createInterface();\n    const log = findLog(\n      receipt,\n      pspContractInterface,\n      \"InstallationPrepared\",\n    );\n    if (!log) {\n      throw new ProposalCreationError();\n    }\n\n    const parsedLog = pspContractInterface.parseLog(log);\n    const pluginAddress = parsedLog.args[\"plugin\"];\n    const preparedSetupData = parsedLog.args[\"preparedSetupData\"];\n    if (!(pluginAddress || preparedSetupData)) {\n      throw new PluginInstallationPreparationError();\n    }\n    yield {\n      key: PrepareInstallationStep.DONE,\n      pluginAddress,\n      pluginRepo: LIVE_CONTRACTS[networkName].multisigRepo,\n      versionTag: versionTag!,\n      permissions: preparedSetupData.permissions,\n      helpers: preparedSetupData.helpers,\n    };\n  }\n  /**\n   * Checks whether the current proposal can be approved by the given address\n   *\n   * @param {string} addressOrEns\n   * @return {*}  {Promise<boolean>}\n   * @memberof MultisigClientMethods\n   */\n  public async canApprove(\n    params: CanApproveParams,\n  ): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n    if (!isAddress(params.approverAddressOrEns)) {\n      throw new InvalidAddressOrEnsError();\n    }\n    const { pluginAddress, id } = decodeProposalId(params.proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    return multisigContract.canApprove(id, params.approverAddressOrEns);\n  }\n  /**\n   * Checks whether the current proposal can be executed\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<boolean>}\n   * @memberof MultisigClientMethods\n   */\n  public async canExecute(\n    proposalId: string,\n  ): Promise<boolean> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(proposalId);\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    return multisigContract.canExecute(id);\n  }\n  /**\n   * Returns the voting settings\n   *\n   * @param {string} addressOrEns\n   * @return {*}  {Promise<MultisigVotingSettings>}\n   * @memberof MultisigClientMethods\n   */\n  public async getVotingSettings(\n    pluginAddress: string,\n  ): Promise<MultisigVotingSettings> {\n    // TODO\n    // update this with yup validation\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressOrEnsError();\n    }\n    const query = QueryMultisigVotingSettings;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"Multisig settings\";\n    type T = { multisigPlugin: SubgraphMultisigVotingSettings };\n    const { multisigPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return {\n      onlyListed: multisigPlugin.onlyListed,\n      minApprovals: multisigPlugin.minApprovals,\n    };\n  }\n  /**\n   * returns the members of the multisig\n   *\n   * @param {string} addressOrEns\n   * @return {*}  {Promise<string[]>}\n   * @memberof MultisigClientMethods\n   */\n  public async getMembers(\n    pluginAddress: string,\n  ): Promise<string[]> {\n    // TODO\n    // update this with yup validation\n    if (!isAddress(pluginAddress)) {\n      throw new InvalidAddressOrEnsError();\n    }\n    const query = QueryMultisigMembers;\n    const params = {\n      address: pluginAddress.toLowerCase(),\n    };\n    const name = \"Multisig members\";\n    type T = { multisigPlugin: SubgraphMembers };\n    const { multisigPlugin } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return multisigPlugin.members.map((member) => member.address);\n  }\n\n  /**\n   * Returns the details of the given proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {(Promise<MultisigProposal | null>)}\n   * @memberof MultisigClientMethods\n   */\n  public async getProposal(\n    proposalId: string,\n  ): Promise<MultisigProposal | null> {\n    if (!isProposalId(proposalId)) {\n      throw new InvalidProposalIdError();\n    }\n    const extendedProposalId = getExtendedProposalId(proposalId);\n    const query = QueryMultisigProposal;\n    const params = {\n      proposalId: extendedProposalId,\n    };\n    const name = \"Multisig proposal\";\n    type T = { multisigProposal: SubgraphMultisigProposal };\n    const { multisigProposal } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    if (!multisigProposal) {\n      return null;\n    } else if (!multisigProposal.metadata) {\n      return toMultisigProposal(\n        multisigProposal,\n        EMPTY_PROPOSAL_METADATA_LINK,\n      );\n    }\n    try {\n      const metadataCid = resolveIpfsCid(multisigProposal.metadata);\n      const metadataString = await this.ipfs.fetchString(metadataCid);\n      const metadata = JSON.parse(metadataString) as ProposalMetadata;\n      return toMultisigProposal(multisigProposal, metadata);\n      // TODO: Parse and validate schema\n    } catch (err) {\n      if (err instanceof InvalidCidError) {\n        return toMultisigProposal(\n          multisigProposal,\n          UNSUPPORTED_PROPOSAL_METADATA_LINK,\n        );\n      }\n      return toMultisigProposal(\n        multisigProposal,\n        UNAVAILABLE_PROPOSAL_METADATA,\n      );\n    }\n  }\n\n  /**\n   * Returns a list of proposals on the Plugin, filtered by the given criteria\n   *\n   * @param {ProposalQueryParams} {\n   *       daoAddressOrEns,\n   *       limit = 10,\n   *       status,\n   *       skip = 0,\n   *       direction = SortDirection.ASC,\n   *       sortBy = ProposalSortBy.CREATED_AT,\n   *     }\n   * @return {*}  {Promise<MultisigProposalListItem[]>}\n   * @memberof MultisigClientMethods\n   */\n  public async getProposals({\n    daoAddressOrEns,\n    limit = 10,\n    status,\n    skip = 0,\n    direction = SortDirection.ASC,\n    sortBy = ProposalSortBy.CREATED_AT,\n  }: ProposalQueryParams): Promise<MultisigProposalListItem[]> {\n    let where = {};\n    let address = daoAddressOrEns;\n    if (address) {\n      if (!isAddress(address)) {\n        await this.web3.ensureOnline();\n        const provider = this.web3.getProvider();\n        if (!provider) {\n          throw new NoProviderError();\n        }\n        try {\n          const resolvedAddress = await provider.resolveName(address);\n          if (!resolvedAddress) {\n            throw new InvalidAddressOrEnsError();\n          }\n          address = resolvedAddress;\n        } catch (e) {\n          throw new InvalidAddressOrEnsError(e);\n        }\n      }\n      where = { dao: address.toLowerCase() };\n    }\n    if (status) {\n      where = { ...where, ...computeProposalStatusFilter(status) };\n    }\n    const query = QueryMultisigProposals;\n    const params = {\n      where,\n      limit,\n      skip,\n      direction,\n      sortBy,\n    };\n    const name = \"Multisig proposals\";\n    type T = { multisigProposals: SubgraphMultisigProposalListItem[] };\n    const { multisigProposals } = await this.graphql.request<T>({\n      query,\n      params,\n      name,\n    });\n    return Promise.all(\n      multisigProposals.map(\n        async (\n          proposal: SubgraphMultisigProposalListItem,\n        ): Promise<MultisigProposalListItem> => {\n          if (!proposal.metadata) {\n            return toMultisigProposalListItem(\n              proposal,\n              EMPTY_PROPOSAL_METADATA_LINK,\n            );\n          }\n          // format in the metadata field\n          try {\n            const metadataCid = resolveIpfsCid(proposal.metadata);\n            const stringMetadata = await this.ipfs.fetchString(metadataCid);\n            const metadata = JSON.parse(stringMetadata) as ProposalMetadata;\n            return toMultisigProposalListItem(proposal, metadata);\n          } catch (err) {\n            if (err instanceof InvalidCidError) {\n              return toMultisigProposalListItem(\n                proposal,\n                UNSUPPORTED_PROPOSAL_METADATA_LINK,\n              );\n            }\n            return toMultisigProposalListItem(\n              proposal,\n              UNAVAILABLE_PROPOSAL_METADATA,\n            );\n          }\n        },\n      ),\n    );\n  }\n}\n","// @ts-ignore\n// todo fix new contracts-ethers\nimport { Multisig__factory } from \"@aragon/osx-ethers\";\n\n// TODO update with function names\nexport const AVAILABLE_FUNCTION_SIGNATURES: string[] = [\n  Multisig__factory.createInterface().getFunction(\"addAddresses\")\n    .format(\"minimal\"),\n  Multisig__factory.createInterface().getFunction(\n    \"removeAddresses\",\n  ).format(\"minimal\"),\n  Multisig__factory.createInterface().getFunction(\n    \"updateMultisigSettings\",\n  ).format(\"minimal\"),\n];\n","import { bytesToHex } from \"@aragon/sdk-common\";\nimport {\n  ClientCore,\n  getFunctionFragment,\n  InterfaceParams,\n} from \"../../../client-common\";\nimport { AVAILABLE_FUNCTION_SIGNATURES } from \"../constants\";\nimport { MultisigVotingSettings } from \"../../types\";\n// @ts-ignore\n// todo fix new contracts-ethers\nimport { Multisig__factory } from \"@aragon/osx-ethers\";\nimport { IMultisigClientDecoding } from \"../../interfaces\";\n\n/**\n * Decoding module for the SDK AddressList Client\n */\nexport class MultisigClientDecoding extends ClientCore\n  implements IMultisigClientDecoding {\n  /**\n   * Decodes a list of addresses from an encoded add members action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string[]}\n   * @memberof MultisigClientDecoding\n   */\n  public addAddressesAction(data: Uint8Array): string[] {\n    const multisigInterface = Multisig__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n\n    const expectedfunction = multisigInterface.getFunction(\"addAddresses\");\n    const result = multisigInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Decodes a list of addresses from an encoded remove members action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {string[]}\n   * @memberof MultisigClientDecoding\n   */\n  public removeAddressesAction(data: Uint8Array): string[] {\n    const multisigInterface = Multisig__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = multisigInterface.getFunction(\n      \"removeAddresses\",\n    );\n    const result = multisigInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return result[0];\n  }\n  /**\n   * Decodes a list of min approvals from an encoded update min approval action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {MultisigVotingSettings}\n   * @memberof MultisigClientDecoding\n   */\n  public updateMultisigVotingSettings(\n    data: Uint8Array,\n  ): MultisigVotingSettings {\n    const multisigInterface = Multisig__factory.createInterface();\n    const hexBytes = bytesToHex(data);\n    const expectedfunction = multisigInterface.getFunction(\n      \"updateMultisigSettings\",\n    );\n    const result = multisigInterface.decodeFunctionData(\n      expectedfunction,\n      hexBytes,\n    );\n    return {\n      minApprovals: result[0].minApprovals,\n      onlyListed: result[0].onlyListed,\n    };\n  }\n  /**\n   * Returns the decoded function info given the encoded data of an action\n   *\n   * @param {Uint8Array} data\n   * @return {*}  {(InterfaceParams | null)}\n   * @memberof MultisigClientDecoding\n   */\n  public findInterface(data: Uint8Array): InterfaceParams | null {\n    try {\n      const func = getFunctionFragment(data, AVAILABLE_FUNCTION_SIGNATURES);\n      return {\n        id: func.format(\"minimal\"),\n        functionName: func.name,\n        hash: bytesToHex(data).substring(0, 10),\n      };\n    } catch {\n      return null;\n    }\n  }\n}\n","import { Multisig__factory } from \"@aragon/osx-ethers\";\nimport { boolArrayToBitmap, decodeProposalId } from \"@aragon/sdk-common\";\nimport { ClientCore, GasFeeEstimation } from \"../../../client-common\";\nimport { IMultisigClientEstimation } from \"../../interfaces\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport {\n  ApproveMultisigProposalParams,\n  CreateMultisigProposalParams,\n} from \"../../types\";\n/**\n * Estimation module the SDK Address List Client\n */\nexport class MultisigClientEstimation extends ClientCore\n  implements IMultisigClientEstimation {\n  /**\n   * Estimates the gas fee of creating a proposal on the plugin\n   *\n   * @param {CreateMultisigProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async createProposal(\n    params: CreateMultisigProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const multisigContract = Multisig__factory.connect(\n      params.pluginAddress,\n      signer,\n    );\n\n    if (\n      params.failSafeActions?.length &&\n      params.failSafeActions.length !== params.actions?.length\n    ) {\n      throw new Error(\n        \"Size mismatch: actions and failSafeActions should match\",\n      );\n    }\n    const allowFailureMap = boolArrayToBitmap(params.failSafeActions);\n\n    const startTimestamp = params.startDate?.getTime() || 0;\n    const endTimestamp = params.endDate?.getTime() || 0;\n\n    const estimation = await multisigContract.estimateGas.createProposal(\n      toUtf8Bytes(params.metadataUri),\n      params.actions || [],\n      allowFailureMap,\n      params.approve || false,\n      params.tryExecution || true,\n      Math.round(startTimestamp / 1000),\n      Math.round(endTimestamp / 1000),\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n\n  /**\n   * Estimates the gas fee of approving a proposal\n   *\n   * @param {ApproveMultisigProposalParams} params\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async approveProposal(\n    params: ApproveMultisigProposalParams,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n    const { pluginAddress, id } = decodeProposalId(\n      params.proposalId,\n    );\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const estimation = await multisigContract.estimateGas.approve(\n      id,\n      params.tryExecution,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n  /**\n   * Estimates the gas fee of executing a proposal\n   *\n   * @param {string} proposalId\n   * @return {*}  {Promise<GasFeeEstimation>}\n   * @memberof MultisigClientEstimation\n   */\n  public async executeProposal(\n    proposalId: string,\n  ): Promise<GasFeeEstimation> {\n    const signer = this.web3.getConnectedSigner();\n\n    const { pluginAddress, id } = decodeProposalId(\n      proposalId,\n    );\n\n    const multisigContract = Multisig__factory.connect(\n      pluginAddress,\n      signer,\n    );\n\n    const estimation = await multisigContract.estimateGas.execute(\n      id,\n    );\n    return this.web3.getApproximateGasFee(estimation.toBigInt());\n  }\n}\n","import {\n  IMultisigClient,\n  IMultisigClientDecoding,\n  IMultisigClientEncoding,\n  IMultisigClientEstimation,\n  IMultisigClientMethods,\n} from \"./interfaces\";\nimport { MultisigClientMethods } from \"./internal/client/methods\";\nimport { MultisigClientEncoding } from \"./internal/client/encoding\";\nimport { MultisigClientDecoding } from \"./internal/client/decoding\";\nimport { MultisigClientEstimation } from \"./internal/client/estimation\";\nimport {\n  ClientCore,\n  ContextPlugin,\n  PluginInstallItem,\n} from \"../client-common\";\nimport { Networkish } from \"@ethersproject/providers\";\nimport { MultisigPluginInstallParams } from \"./types\";\n\n/**\n * Provider a generic client with high level methods to manage and interact an Address List Voting plugin installed in a DAO\n */\nexport class MultisigClient extends ClientCore implements IMultisigClient {\n  public methods: IMultisigClientMethods;\n  public encoding: IMultisigClientEncoding;\n  public decoding: IMultisigClientDecoding;\n  public estimation: IMultisigClientEstimation;\n  constructor(context: ContextPlugin) {\n    super(context);\n    this.methods = new MultisigClientMethods(context);\n    this.encoding = new MultisigClientEncoding(context);\n    this.decoding = new MultisigClientDecoding(context);\n    this.estimation = new MultisigClientEstimation(context);\n  }\n\n  static encoding = {\n    /**\n     * Computes the parameters to be given when creating the DAO,\n     * so that the plugin is configured\n     *\n     * @param {MultisigPluginInstallParams} params\n     * @param {Networkish} [network=\"mainnet\"]\n     * @return {*}  {PluginInstallItem}\n     * @memberof MultisigClient\n     */\n\n    getPluginInstallItem: (\n      params: MultisigPluginInstallParams,\n      network: Networkish = \"mainnet\",\n    ): PluginInstallItem =>\n      MultisigClientEncoding.getPluginInstallItem(params, network),\n  };\n}\n"],"names":["DaoCreationSteps","DaoSortBy","DaoDepositSteps","TransferType","SetAllowanceSteps","PrepareUninstallationSteps","SubgraphTransferType","erc20ContractAbi","name","inputs","type","indexed","anonymous","outputs","stateMutability","QueryDao","gql","_templateObject","_taggedTemplateLiteralLoose","QueryDaos","_templateObject2","QueryTokenBalances","QueryTokenTransfers","QueryPlugins","QueryPlugin","QueryIPlugin","_templateObject3","PluginSortBy","AssetBalanceSortBy","TransferSortBy","ProposalStatus","VoteValues","VotingMode","SubgraphVoteValues","SubgraphTransferTypeMap","Map","DEPOSIT","WITHDRAW","ProposalCreationSteps","VoteProposalStep","ExecuteProposalStep","PrepareInstallationStep","PermissionOperationType","SupportedNetwork","SubgraphVoteValuesMap","YES","NO","ABSTAIN","ProposalSortBy","DaoRole","SortDirection","TokenType","SupportedNetworksArray","Object","values","Web3Module","context","this","providerIdx","Math","floor","random","web3Providers","length","_proto","prototype","shiftProvider","NoProviderError","NoNodesAvailableError","getSigner","signer","NoSignerError","getProvider","getNetworkName","networkName","network","includes","UnsupportedNetworkError","getConnectedSigner","provider","connect","isUp","getNetwork","then","ensureOnline","_ensureOnline","_asyncToGenerator","_regeneratorRuntime","mark","_callee","i","wrap","_context","prev","next","sent","abrupt","stop","apply","arguments","attachContract","address","abi","isAddress","InvalidAddressError","InvalidContractAbiError","Contract","getMaxFeePerGas","getFeeData","feeData","maxFeePerGas","CannotEstimateGasError","toBigInt","getApproximateGasFee","estimatedFee","max","average","BigInt","trunc","_this","gasFeeEstimationFactor","PRECISION_FACTOR_BASE","getDaoFactoryAddress","daoFactoryAddress","NoDaoFactory","IPFSModule","_context$ipfs","ipfs","clients","clientIdx","getClient","ClientNotInitializedError","shiftClient","_this$clients","_this$clients2","nodeInfo","Promise","resolve","_this$clients3","getOnlineClient","add","_add","_callee2","input","_this2","_context2","runAndRetryHelper","res","hash","_x","pin","_this3","fetchBytes","cid","_this4","cat","f","retries","runAndRetry","func","onFail","e","ClientError","response","status","IpfsError","_this5","shouldRetry","fetchString","bytes","TextDecoder","decode","DataDecodingError","message","QueryStatus","GraphqlModule","_context$graphql","graphql","request","_res$_meta","_meta","deployment","_ref","query","params","GraphQLError","ClientCore","web3","UNSUPPORTED_PROPOSAL_METADATA_LINK","title","summary","description","resources","EMPTY_PROPOSAL_METADATA_LINK","UNAVAILABLE_PROPOSAL_METADATA","getGraphqlNode","netowrk","SupportedNetworksToGraphqlNetworks","_SupportedNetworksToG","MAINNET","GOERLI","POLYGON","MUMBAI","GRAPHQL_NODES","_GRAPHQL_NODES","url","IPFS_ENDPOINTS","headers","X-API-KEY","IPFS_NODES","_IPFS_NODES","LIVE_CONTRACTS","_LIVE_CONTRACTS","daoFactory","activeContractsList","mainnet","DAOFactory","pluginSetupProcessor","PluginRepoFactory","multisigRepo","adminRepo","addresslistVotingRepo","tokenVotingRepo","multisigSetup","MultisigSetup","adminSetup","AdminSetup","addresslistVotingSetup","AddresslistVotingSetup","tokenVotingSetup","TokenVotingSetup","goerli","PluginSetupProcessor","mumbai","ensRegistry","ENSRegistry","polygon","supportedProtocols","process","_process","_process$env","env","TESTING","push","Context","ensRegistryAddress","ipfsNodes","graphqlNodes","mergedParams","assign","set","contextParams","state","resolveNetwork","setNetworkDefaults","Array","isArray","resolveWeb3Providers","_contextParams$graphq","resolveGraphql","overriden","_contextParams$ipfsNo","resolveIpfs","resolveGasFeeEstimationFactor","_GRAPHQL_NODES$networ","_IPFS_NODES$networkNa","ensAddress","networkish","endpoints","map","item","URL","protocol","UnsupportedProtocolError","JsonRpcProvider","href","configs","forEach","config","IpfsClient","endpoint","GraphQLClient","Error","key","get","ContextPlugin","_Context","call","_inheritsLoose","fromContext","ctx","ctxPlugin","computeProposalStatus","proposal","now","Date","startDate","parseInt","endDate","executed","EXECUTED","PENDING","potentiallyExecutable","earlyExecutable","SUCCEEDED","ACTIVE","DEFEATED","computeProposalStatusFilter","where","round","getTime","toString","startDate_gte","startDate_lt","endDate_gte","endDate_lt","findLog","receipt","iface","eventName","logs","find","log","topics","id","getEvent","format","votingModeToContracts","votingMode","STANDARD","EARLY_EXECUTION","VOTE_REPLACEMENT","InvalidVotingModeError","votingModeFromContracts","decodeUpdatePluginSettingsAction","data","result","votingInterface","MajorityVotingBase__factory","createInterface","hexBytes","bytesToHex","expectedfunction","getFunction","decodeFunctionData","supportThreshold","decodeRatio","minParticipation","minDuration","toNumber","minProposerVotingPower","encodeUpdateVotingSettingsAction","args","votingSettingsToContract","encodeFunctionData","hexToBytes","BigNumber","from","encodeRatio","getFunctionFragment","availableFunctions","Interface","substring","Permissions","UPGRADE_PERMISSION","SET_METADATA_PERMISSION","EXECUTE_PERMISSION","WITHDRAW_PERMISSION","SET_SIGNATURE_VALIDATOR_PERMISSION","SET_TRUSTED_FORWARDER_PERMISSION","ROOT_PERMISSION","CREATE_VERSION_PERMISSION","REGISTER_PERMISSION","REGISTER_DAO_PERMISSION","REGISTER_ENS_SUBDOMAIN_PERMISSION","MINT_PERMISSION","MERKLE_MINT_PERMISSION","MODIFY_ALLOWLIST_PERMISSION","SET_CONFIGURATION_PERMISSION","PermissionIds","entries","reduce","acc","_extends2","_extends","keccak256","toUtf8Bytes","unwrapDepositParams","daoAddressOrEns","amount","_params$tokenAddress","tokenAddress","AddressZero","toDaoDetails","dao","metadata","ensDomain","subdomain","avatar","undefined","links","creationDate","createdAt","plugins","plugin","appliedPluginRepo","release","appliedVersion","build","instanceAddress","appliedPreparation","pluginAddress","toDaoListItem","toAssetBalance","balance","updateDate","lastUpdated","__typename","NATIVE","ERC721","token","symbol","ERC20","decimals","toTokenTransfer","transfer","_transfer$proposal","_transfer$proposal2","_transfer$proposal3","tokenType","transactionId","txHash","to","proposalId","toPluginRepoRelease","currentBuild","builds","toPluginRepoListItem","pluginRepo","releases","toPluginRepo","releaseMetadata","buildMetadata","current","number","_pluginRepo$releases","_pluginRepo$releases$","_pluginRepo$releases$2","_pluginRepo$releases$3","_pluginRepo$releases2","_pluginRepo$releases3","applyInstallatonParamsFromContract","helpersHash","permissions","versionTag","pluginSetupRef","pluginSetupRepo","permissionParamsToContract","who","permission","permissionParamsFromContract","permissionId","_Object$keys$find","keys","k","replace","withdrawParamsFromContract","_value","tokenStandard","recipientAddressOrEns","freeze","AVAILABLE_FUNCTION_SIGNATURES","DAO__factory","UNSUPPORTED_DAO_METADATA_LINK","EMPTY_DAO_METADATA_LINK","UNAVAILABLE_DAO_METADATA","UNSUPPORTED_RELEASE_METADATA_LINK","images","EMPTY_RELEASE_METADATA_LINK","UNAVAILABLE_RELEASE_METADATA","UNSUPPORTED_BUILD_METADATA_LINK","ui","change","pluginSetupABI","prepareInstallation","prepareUninstallation","prepareUpdate","EMPTY_BUILD_METADATA_LINK","UNAVAILABLE_BUILD_METADATA","ClientMethods","_ClientCore","createDao","ensSubdomain","match","InvalidEnsError","daoFactoryInstance","DAOFactory__factory","pluginInstallationData","_iterator","_createForOfIteratorHelperLoose","_step","done","repo","PluginRepo__factory","value","_awaitAsyncGenerator","latestRelease","currentRelease","tag","PluginSetupProcessor__factory","execPermissionFound","daoBase","daoBaseAddr","_i","_pluginInstallationDa","installData","callStatic","EXECUTE_PERMISSION_ID","MissingExecPermissionError","metadataUri","daoURI","daoUri","trustedForwarder","tx","CREATING","wait","daoFactoryInterface","DAORegistry__factory","_receipt$logs","pspInterface","installedLogs","_receipt$logs2","filter","parsedLog","parseLog","DONE","pluginAddresses","pinMetadata","_pinMetadata","JSON","stringify","t0","IpfsPinError","deposit","_context3","_unwrapDepositParams","daoAddress","reference","tokenInstance","t1","getAddress","t2","t3","t4","allowance","currentAllowance","CHECKED_ALLOWANCE","lt","delegateYield","_asyncGeneratorDelegate","_asyncIterator","setAllowance","spender","daoInstance","override","DEPOSITING","FailedDepositError","daoInterface","AmountMismatchError","_callee3","_context4","approve","SETTING_ALLOWANCE","UpdateAllowanceError","gt","ALLOWANCE_SET","_callee4","_context5","toLowerCase","selectedInstallation","iplugin","installations","_params$pluginInstall","pluginInstallationIndex","InstallationNotFoundError","defaultAbiCoder","encode","_params$uninstallatio2","uninstallationAbi","_params$uninstallatio","uninstallationParams","pspContract","setupPayload","currentHelpers","helpers","PREPARING","PluginUninstallationPreparationError","operation","_callee5","hasPermission","_hasPermission","_callee6","_context6","Uint8Array","_x2","getDao","_getDao","_callee7","resolvedAddress","metadataCid","_context7","resolveName","InvalidAddressOrEnsError","resolveIpfsCid","parse","InvalidCidError","_x3","getDaos","_getDaos","_callee9","_ref$limit","_ref$skip","_ref$direction","direction","_ref$sortBy","sortBy","_context9","limit","skip","ASC","CREATED_AT","all","daos","_ref2","_callee8","_context8","_x5","_x4","getDaoBalances","_getDaoBalances","_callee10","_ref3","_ref3$limit","_ref3$skip","_ref3$direction","_ref3$sortBy","tokenBalances","_context10","LAST_UPDATED","_x6","getDaoTransfers","_getDaoTransfers","_callee11","_ref4","_ref4$limit","_ref4$skip","_ref4$direction","_ref4$sortBy","tokenTransfers","_context11","_x7","getPlugins","_getPlugins","_callee13","_temp","_ref5","_ref5$limit","_ref5$skip","_ref5$direction","_ref5$sortBy","_this6","_context13","SUBDOMAIN","subdomain_contains_nocase","pluginRepos","_ref6","_callee12","pluginRepoReleases","_iterator2","_step2","resolvedMetadata","_context12","concat","_x9","_x8","getPlugin","_getPlugin","_callee14","_metadataCid","_resolvedMetadata","_context14","_x10","ClientEncoding","applyInstallationAction","condition","applyInstallatonParamsToContract","grantAction","revokeAction","applyUninstallationAction","applyUninstallationParamsToContract","grantWithConditionAction","permissionWithConditionParamsToContract","withdrawAction","_withdrawAction","_this$web3$getSigner","updateDaoMetadataAction","_updateDaoMetadataAction","_this$web3$getSigner2","setDaoUriAction","registerStandardCallbackAction","interfaceId","callbackSelector","magicNumber","setSignatureValidatorAction","signatureValidator","upgradeToAction","implementationAddress","upgradeToAndCallAction","ClientEstimation","_createDao","estimateGas","DepositNativeTokenError","gasLimit","_setAllowance","contract","ClientDecoding","expectedFunction","_abiObjects","abiObject","updateDaoMetadataRawAction","toUtf8String","ipfsCid","findInterface","functionName","_unused2","Client","methods","encoding","decoding","estimation","QueryAddresslistVotingMembers","QueryAddresslistVotingProposal","QueryAddresslistVotingProposals","QueryAddresslistVotingSettings","toAddresslistVotingProposal","executionDate","getCompactProposalId","creatorAddress","creator","media","executionTxHash","creationBlockNumber","executionBlockNumber","actions","action","yes","no","abstain","settings","minVotingPower","totalVotingPower","duration","totalVotingWeight","votes","voters","voter","voteReplaced","vote","voteOption","toAddresslistVotingProposalListItem","WrapTokensStep","UnwrapTokensStep","SubgraphTokenType","SubgraphContractType","AddresslistVotingClientEncoding","getPluginInstallItem","_votingSettingsToCont","votingSettings","addresses","updatePluginSettingsAction","addMembersAction","members","AddresslistVoting__factory","removeMembersAction","AddresslistVotingClientMethods","createProposal","addresslistContract","_params$failSafeActio","failSafeActions","_params$actions","allowFailureMap","boolArrayToBitmap","startTimestamp","_params$startDate","endTimestamp","_params$endDate","creatorVote","executeOnPass","addresslistContractInterface","ProposalCreationError","encodeProposalId","Number","voteProposal","_decodeProposalId","decodeProposalId","VOTING","executeProposal","_decodeProposalId2","execute","EXECUTING","addresslistVotingRepoContract","latestVersion","addresslistVotingPluginInstallItem","pspContractInterface","preparedSetupData","PluginInstallationPreparationError","canVote","_canVote","_decodeProposalId3","voterAddressOrEns","canExecute","_canExecute","_decodeProposalId4","getMembers","_getMembers","addresslistVotingPlugin","member","getProposal","_getProposal","extendedProposalId","addresslistVotingProposal","isProposalId","InvalidProposalIdError","getExtendedProposalId","getProposals","_getProposals","addresslistVotingProposals","getVotingSettings","_getVotingSettings","AddresslistVotingClientDecoding","_unused","AddresslistVotingClientEstimation","_createProposal","_voteProposal","_executeProposal","AddresslistVotingClient","QueryTokenVotingProposal","QueryTokenVotingProposals","QueryTokenVotingSettings","QueryTokenVotingPlugin","QueryTokenVotingMembers","toTokenVotingProposal","usedVotingWeight","votingPower","parseToken","weight","toTokenVotingProposalListItem","subgraphToken","toTokenVotingMember","delegatee","delegators","delegator","ApproveProposalStep","TokenVotingClientEncoding","balances","newToken","useToken","_params$useToken","wrappedToken","tokenVotingInitParamsToContract","mintTokenAction","minterAddress","IERC20MintableUpgradeable__factory","mintTokenParamsToContract","TokenVotingClientMethods","tokenVotingContract","TokenVoting__factory","tokenVotingContractInterface","tokenVotingRepoContract","tokenVotingPluginInstallItem","wrapTokens","wrappedTokenAddress","wrappedErc20Contract","GovernanceWrappedERC20__factory","account","depositFor","WRAPPING","unwrapTokens","withdrawTo","UNWRAPPING","delegateTokens","_this7","governanceErc20Contract","GovernanceERC20__factory","delegate","undelegateTokens","_this8","t5","t6","t7","t8","getDelegatee","_getDelegatee","delegates","tokenVotingPlugin","tokenVotingProposal","_callee16","_this9","_context16","tokenVotingProposals","_callee15","_context15","_callee17","_context17","getToken","_getToken","_callee18","_context18","TokenVotingClientDecoding","TokenVotingClientEstimation","_delegateTokens","_undelegateTokens","TokenVotingClient","QueryMultisigProposal","QueryMultisigProposals","QueryMultisigVotingSettings","QueryMultisigMembers","toMultisigProposal","onlyListed","minApprovals","approvals","approvers","approver","slice","toMultisigProposalListItem","MultisigClientEncoding","addAddressesAction","Multisig__factory","removeAddressesAction","updateMultisigVotingSettings","MultisigClientMethods","multisigContract","tryExecution","multisigContractInterface","approveProposal","APPROVING","multisigRepoContract","multisigPluginInstallItem","canApprove","_canApprove","approverAddressOrEns","multisigPlugin","multisigProposal","multisigProposals","MultisigClientDecoding","multisigInterface","MultisigClientEstimation","_approveProposal","MultisigClient","_params$executeOnPass","_params$creatorVote"],"mappings":"q2VAEO,kBCcKA,EAwCAC,EA0FAC,EAkGAC,EAoCAC,EAiBAC,EC9PAC,EFzCCC,EAAsC,CACjD,CACEC,KAAM,WACNC,OAAQ,CACN,CAAEC,KAAM,UAAWF,KAAM,SAAUG,SAAS,GAC5C,CAAED,KAAM,UAAWF,KAAM,WAAYG,SAAS,GAC9C,CAAED,KAAM,UAAWF,KAAM,QAASG,SAAS,IAE7CC,WAAW,EACXF,KAAM,SAER,CACEF,KAAM,WACNC,OAAQ,CACN,CAAEC,KAAM,UAAWF,KAAM,QAASG,SAAS,GAC3C,CAAED,KAAM,UAAWF,KAAM,UAAWG,SAAS,GAC7C,CAAED,KAAM,UAAWF,KAAM,QAASG,SAAS,IAE7CC,WAAW,EACXF,KAAM,SAER,CACEF,KAAM,WACNK,QAAS,CAAC,CAAEH,KAAM,OAAQF,KAAM,KAChCC,OAAQ,CACN,CAAEC,KAAM,UAAWF,KAAM,OACzB,CAAEE,KAAM,UAAWF,KAAM,WAE3BM,gBAAiB,aACjBJ,KAAM,YAER,CACEF,KAAM,UACNK,QAAS,CAAC,CAAEH,KAAM,OAAQF,KAAM,KAChCC,OAAQ,CACN,CAAEC,KAAM,UAAWF,KAAM,YACzB,CAAEE,KAAM,UAAWF,KAAM,WAE3BM,gBAAiB,aACjBJ,KAAM,YAER,CACEF,KAAM,SACNK,QAAS,CAAC,CAAEH,KAAM,SAAUF,KAAM,KAClCC,OAAQ,GACRK,gBAAiB,OACjBJ,KAAM,YAER,CACEF,KAAM,WACNK,QAAS,CAAC,CAAEH,KAAM,UAAWF,KAAM,KACnCC,OAAQ,GACRK,gBAAiB,OACjBJ,KAAM,YAER,CACEF,KAAM,YACNK,QAAS,CAAC,CAAEH,KAAM,UAAWF,KAAM,KACnCC,OAAQ,CAAC,CAAEC,KAAM,UAAWF,KAAM,SAClCM,gBAAiB,OACjBJ,KAAM,YAER,CACEF,KAAM,YACNK,QAAS,CAAC,CAAEH,KAAM,UAAWF,KAAM,KACnCC,OAAQ,CACN,CAAEC,KAAM,UAAWF,KAAM,QACzB,CAAEE,KAAM,UAAWF,KAAM,SAE3BM,gBAAiB,OACjBJ,KAAM,YAER,CACEF,KAAM,cACNK,QAAS,CAAC,CAAEH,KAAM,UAAWF,KAAM,KACnCC,OAAQ,GACRK,gBAAiB,OACjBJ,KAAM,aG7EGK,EAAWC,MAAGC,IAAAA,EAAAC,8YAwBdC,EAAYH,MAAGI,IAAAA,EAAAF,2fCxBfG,EAAqBL,MAAGC,IAAAA,EAAAC,0kBCAxBI,EAAsBN,MAAGC,IAAAA,EAAAC,4pBCAzBK,EAAeP,MAAGC,IAAAA,EAAAC,kXAgBlBM,EAAcR,MAAGI,IAAAA,EAAAF,oSAgBjBO,EAAeT,MAAGU,IAAAA,EAAAR,qYLlBnBlB,EAAAA,2BAAAA,kDAEVA,eAsCUC,EAAAA,oBAAAA,8CAEVA,yBAaU0B,uBAAAA,iDA2EAzB,EAAAA,0BAAAA,kEAEVA,0BACAA,eAqDU0B,6BAAAA,4DA0CAzB,EAAAA,uBAAAA,4CAEVA,uBAqBU0B,yBAAAA,oDAaAzB,EAAAA,4BAAAA,oEAEVA,gCAeUC,EAAAA,qCAAAA,8DAEVA,cChQF,SAAYC,GACVA,oBACAA,sBAFF,CAAYA,IAAAA,OAyBZ,IK7DYwB,EAQAC,EA8BAC,EAuGAC,ELhFCC,GAGT,IAAIC,IAAI,CACV,CAAChC,qBAAaiC,QAAS9B,EAAqB8B,SAC5C,CAACjC,qBAAakC,SAAU/B,EAAqB+B,aKlEnCP,EAAAA,yBAAAA,4CAEVA,oBACAA,wBACAA,sBACAA,uBAGUC,EAAAA,qBAAAA,+CAGVA,iBACAA,gBA0BUC,EAAAA,qBAAAA,4CAEVA,mCACAA,sCAoGUC,EAAAA,6BAAAA,0CAEVA,UACAA,wBAiEUK,GAUAC,GAUAC,GAwBAC,GA8BAC,GClSAC,GDyJCC,GAGT,IAAIT,IAAI,CACV,CAACF,2BAAmBY,IAAKd,mBAAWc,KACpC,CAACZ,2BAAmBa,GAAIf,mBAAWe,IACnC,CAACb,2BAAmBc,QAAShB,mBAAWgB,YAgD9BC,yBAAAA,oDASAV,GAAAA,gCAAAA,uDAEVA,gBAQUC,GAAAA,2BAAAA,8CAEVA,gBAQUC,GAAAA,8BAAAA,uDAEVA,gBAsBUC,GAAAA,kCAAAA,2DAEVA,gBA4BUC,GAAAA,kCAAAA,yDAEVA,yBACAA,sDCrSUC,GAAAA,2BAAAA,kDAEVA,mBACAA,mBACAA,qBAGF,IAmBYM,GAmDAC,GAWAC,GAjFCC,GAAyBC,OAAOC,OAAOX,2BAmBxCM,GAAAA,kBAAAA,iDAEVA,qCACAA,yBACAA,iCACAA,gEA8CUC,GAAAA,wBAAAA,qCAEVA,gBASUC,GAAAA,oBAAAA,uCAEVA,iBACAA,uBCtEWI,cAKX,SAAAA,EAAYC,GAHJC,kBAAuB,EAI7BA,KAAKD,QAAUA,EACfC,KAAKC,YAAcC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQM,cAAcC,QAGtE,IAAAC,EAAAT,EAAAU,UAmHC,OAnHDD,EACOE,cAAA,WACL,IAAKT,KAAKD,QAAQM,cAAcC,OAC9B,MAAM,IAAII,kBACL,GAAIV,KAAKD,QAAQM,cAAcC,QAAU,EAC9C,MAAM,IAAIK,wBAAsB,QAElCX,KAAKC,aAAeD,KAAKC,YAAc,GACrCD,KAAKD,QAAQM,cAAcC,QAG/BC,EACOK,UAAA,WACL,IAAKZ,KAAKD,QAAQc,OAChB,MAAM,IAAIC,gBAEZ,OAAOd,KAAKD,QAAQc,QAEtBN,EACOQ,YAAA,WACL,IAAKf,KAAKD,QAAQM,cAAcL,KAAKC,aACnC,MAAM,IAAIS,kBAEZ,OAAOV,KAAKD,QAAQM,cAAcL,KAAKC,cAGzCM,EACOS,eAAA,WACL,IAAMC,EAAcjB,KAAKD,QAAQmB,QAAQnE,KACzC,IAAK4C,GAAuBwB,SAASF,GACnC,MAAM,IAAIG,0BAAwBH,GAEpC,OAAOA,GAGTV,EACOc,mBAAA,WACL,IAAIR,EAASb,KAAKY,YAClB,IAAKC,EAAOS,SAAU,CACpB,IAAMA,EAAWtB,KAAKe,cACtBF,EAASA,EAAOU,QAAQD,GAE1B,OAAOT,GAGTN,EACOiB,KAAA,WAEL,OADiBxB,KAAKe,cAEnBU,aACAC,MAAK,WAAA,OAAM,YACL,WAAA,OAAM,MAChBnB,EAEYoB,wBAAY,IAAAC,EAAAC,EAAAC,IAAAC,MAAlB,SAAAC,IAAA,IAAAC,EAAA,OAAAH,IAAAI,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAA,GACArC,KAAKD,QAAQM,cAAcC,QAAM6B,EAAAE,OAAA,MAAA,MAC9B,IAAI3B,kBAAiB,OAGpBuB,EAAI,EAAC,OAAA,KAAEA,EAAIjC,KAAKD,QAAQM,cAAcC,SAAM6B,EAAAE,QAAA,MAAA,OAAAF,EAAAE,OACzCrC,KAAKwB,OAAM,OAAA,IAAAW,EAAAG,MAAAH,EAAAE,OAAA,MAAA,OAAAF,EAAAI,iBAAA,OACrBvC,KAAKS,gBAAgB,OAFgCwB,IAAGE,EAAAE,OAAA,MAAA,QAAA,MAIpD,IAAI1B,wBAAsB,QAAO,QAAA,UAAA,OAAAwB,EAAAK,UAAAR,YACxC,OAAA,WAAA,OAAAJ,EAAAa,WAAAC,eAEDnC,EAOOoC,eAAA,SACLC,EACAC,GAEA,IAAKD,IAAYE,YAAUF,GAAU,MAAM,IAAIG,sBAC1C,IAAKF,EAAK,MAAM,IAAIG,0BACzB,IAAMnC,EAASb,KAAKqB,qBACpB,OAAO,IAAI4B,WAASL,EAASC,EAAKhC,IAGpCN,EACO2C,gBAAA,WACL,OAAOlD,KAAKqB,qBACT8B,aACAzB,MAAK,SAAC0B,GACL,IAAKA,EAAQC,aACX,MAAM,IAAIC,yBAEZ,OAAOF,EAAQC,aAAaE,eAEjChD,EAEMiD,qBAAA,SAAqBC,cAC1B,OAAOzD,KAAKkD,kBAAkBxB,MAAK,SAAC2B,GAClC,IAAMK,EAAMD,EAAeJ,EAQ3B,MAAO,CAAEM,QAHQD,EAAME,OAAO1D,KAAK2D,MAHpBC,EAAK/D,QAAQgE,uBAC1BjE,EAAWkE,wBAGXJ,OAAO9D,EAAWkE,uBAEFN,IAAAA,OAItBnD,EACO0D,qBAAA,WACL,IAAKjE,KAAKD,QAAQmE,kBAChB,MAAM,IAAIC,eAEZ,OAAOnE,KAAKD,QAAQmE,mBACrBpE,KA5HuBA,yBAAwB,6BCPrCsE,cAGX,SAAAA,EAAYrE,SAFJC,gBAAqB,EACrBA,aAAwB,UAG9BqE,EAAItE,EAAQuE,OAARD,EAAc/D,SAChBN,KAAKuE,QAAUxE,EAAQuE,KACvBtE,KAAKwE,UAAYtE,KAAKC,MAAMD,KAAKE,SAAWL,EAAQuE,KAAKhE,SAE5D,IAAAC,EAAA6D,EAAA5D,UAsFA,OAtFAD,EAEMkE,UAAA,WACL,IAAKzE,KAAKuE,QAAQjE,SAAWN,KAAKuE,QAAQvE,KAAKwE,WAC7C,MAAM,IAAIE,4BAA0B,QAEtC,OAAO1E,KAAKuE,QAAQvE,KAAKwE,YAG3BjE,EAGOoE,YAAA,iBACL,IAAK3E,KAAKuE,QAAQjE,OAChB,MAAM,IAAIoE,4BAA0B,QAC/B,WAAIE,OAAKL,gBAALK,EAActE,QAAS,EAChC,MAAM,IAAIK,wBAAsB,QAElCX,KAAKwE,WAAaxE,KAAKwE,UAAY,GAAKxE,KAAKuE,QAAQjE,QAGvDC,EACOiB,KAAA,iBACL,cAAIqD,EAAC7E,KAAKuE,UAALM,EAAcvE,OACZN,KAAKyE,YAAYK,WAAWpD,MAAK,WAAA,OAAM,YAAY,WAAA,OAAM,KAD9BqD,QAAQC,SAAQ,IAEnDzE,EAEYoB,wBAAY,IAAAC,EAAAC,EAAAC,IAAAC,MAAlB,SAAAC,IAAA,IAAAC,EAAAgD,EAAA,OAAAnD,IAAAI,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAA,GACArC,KAAKuE,QAAQjE,QAAM6B,EAAAE,OAAA,MAAA,MAChB,IAAIqC,4BAA0B,QAAO,OAEpCzC,EAAI,EAAC,OAAA,KAAEA,UAACgD,EAAGjF,KAAKuE,gBAALU,EAAc3E,UAAM6B,EAAAE,QAAA,MAAA,OAAAF,EAAAE,OAC5BrC,KAAKwB,OAAM,OAAA,IAAAW,EAAAG,MAAAH,EAAAE,OAAA,MAAA,OAAAF,EAAAI,iBAAA,OACrBvC,KAAK2E,cAAc,OAFqB1C,IAAGE,EAAAE,OAAA,MAAA,QAAA,MAIvC,IAAI1B,wBAAsB,QAAO,QAAA,UAAA,OAAAwB,EAAAK,UAAAR,YACxC,OAAA,WAAA,OAAAJ,EAAAa,WAAAC,eAAAnC,EAEM2E,gBAAA,sBACL,OAAOlF,KAAK2B,eAAeD,MAAK,WAAA,OAAMoC,EAAKW,gBAG7ClE,EAEa4E,IAAG,WAAA,IAAAC,EAAAvD,EAAAC,IAAAC,MAAT,SAAAsD,EAAUC,GAA0B,IAAAC,OAAA,OAAAzD,IAAAI,eAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,OAAA,OAAAmD,EAAAjD,gBAClCvC,KAAKyF,mBAAkB,WAAA,OAAMF,EAAKd,YAAYU,IAAIG,MAAQ5D,MAAK,SACpEgE,GAAG,OACAA,EAAIC,SAAK,OAAA,UAAA,OAAAH,EAAAhD,UAAA6C,YACf,OAAA,SAAAO,GAAA,OAAAR,EAAA3C,WAAAC,YAJe,GAIfnC,EAEMsF,IAAA,SAAIP,cACT,OAAOtF,KAAKyF,mBAAkB,WAAA,OAAMK,EAAKrB,YAAYoB,IAAIP,OAC1D/E,EAEMwF,WAAA,SAAWC,cAChB,OAAOhG,KAAKyF,mBAAkB,WAAA,OAAMQ,EAAKxB,YAAYyB,IAAIF,OAC1DzF,EAEOkF,kBAAA,SAAqBU,cAC3B,IAAKnG,KAAKuE,QAAQjE,OAChB,MAAM,IAAIoE,4BAA0B,QAEtC,IAAI0B,EAAUpG,KAAKuE,QAAQjE,OAC3B,OAAO+F,cAAY,CACjBC,KAAMH,EACNI,OAAQ,SAACC,GACP,GAAIA,aAAaC,eACXD,EAAEE,SAASC,OAAS,IAGtB,MAAM,IAAIC,YAAUJ,GAGxBJ,IACAS,EAAKlC,eAEPmC,YAAa,WAAA,OAAMV,EAAU,MAEhC7F,EAEMwG,YAAA,SAAYf,GACjB,OAAOhG,KAAK+F,WAAWC,GACpBtE,MAAK,SAACsF,GAAK,OAAK,IAAIC,aAAcC,OAAOF,aACnC,SAACR,GACN,MAAM,IAAIW,oBAAkBX,EAAEY,aAEnChD,KC5GUiD,GAAc9J,MAAGC,KAAAA,GAAAC,iDCSjB6J,cAGX,SAAAA,EAAYvH,SAFJC,gBAAqB,EACrBA,aAA2B,UAEjCuH,EAAIxH,EAAQyH,UAARD,EAAiBjH,SACnBN,KAAKuE,QAAUxE,EAAQyH,QACvBxH,KAAKwE,UAAYtE,KAAKC,MAAMD,KAAKE,SAAWL,EAAQyH,QAAQlH,SAGhE,IAAAC,EAAA+G,EAAA9G,UAiFC,OAjFDD,EAIOkE,UAAA,WACL,IAAKzE,KAAKuE,QAAQjE,SAAWN,KAAKuE,QAAQvE,KAAKwE,WAC7C,MAAM,IAAIE,4BAA0B,WAEtC,OAAO1E,KAAKuE,QAAQvE,KAAKwE,YAG3BjE,EAIOoE,YAAA,WACL,IAAK3E,KAAKuE,QAAQjE,OAChB,MAAM,IAAIoE,4BAA0B,WAC/B,GAAI1E,KAAKuE,QAAQjE,OAAS,EAC/B,MAAM,IAAIK,wBAAsB,WAElCX,KAAKwE,WAAaxE,KAAKwE,UAAY,GAAKxE,KAAKuE,QAAQjE,QAGvDC,EAIOiB,KAAA,WACL,OAAOxB,KAAKyE,YAAYgD,QAAQJ,IAAa3F,MAAK,SAACgE,SACjD,eAAQgC,EAAChC,EAAIiC,SAAJD,EAAWE,sBACb,WACP,OAAO,MAIXrH,EAUaoB,aAAY,WAAA,IAAAC,EAAAC,EAAAC,IAAAC,MAAlB,SAAAC,IAAA,IAAAC,EAAA,OAAAH,IAAAI,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAA,GACArC,KAAKuE,QAAQjE,QAAM6B,EAAAE,OAAA,MAAA,MAChB,IAAIqC,4BAA0B,WAAU,OAEvCzC,EAAI,EAAC,OAAA,KAAEA,EAAIjC,KAAKuE,QAAQjE,SAAM6B,EAAAE,QAAA,MAAA,OAAAF,EAAAE,OAC3BrC,KAAKwB,OAAM,OAAA,IAAAW,EAAAG,MAAAH,EAAAE,OAAA,MAAA,OAAAF,EAAAI,iBAAA,OACrBvC,KAAK2E,cAAc,OAFoB1C,IAAGE,EAAAE,OAAA,MAAA,QAAA,MAItC,IAAI1B,wBAAsB,WAAU,QAAA,UAAA,OAAAwB,EAAAK,UAAAR,YAC3C,OAAA,WAAA,OAAAJ,EAAAa,WAAAC,YATwB,GASxBnC,EAEMkH,QAAA,SAAAI,cAAUC,EAAKD,EAALC,MAAOC,EAAMF,EAANE,OAAQhL,EAAI8K,EAAJ9K,KAK9B,IAAKiD,KAAKuE,QAAQjE,OAChB,MAAM,IAAIoE,4BAA0B,WAEtC,IAAI0B,EAAUpG,KAAKuE,QAAQjE,OAC3B,OAAO+F,cAAY,CACjBC,KAAM,WAAA,OAAMxC,EAAKW,YAAYgD,QAAQK,EAAOC,IAC5CxB,OAAQ,SAACC,GACP,GAAIA,aAAaC,eAGXD,EAAEE,SAASC,OAAS,IACtB,MAAM,IAAIqB,eAAajL,GAAQ,GAAIyJ,GAGvCJ,IACAtC,EAAKa,eAEPmC,YAAa,WAAA,OAAMV,EAAU,MAEhCkB,KCvFmBW,GAIpB,SAAYlI,GACVC,KAAKkI,KAAO,IAAIpI,GAAWC,GAC3BC,KAAKsE,KAAO,IAAIF,GAAWrE,GAC3BC,KAAKwH,QAAU,IAAIF,GAAcvH,ICjBxBoI,GAAuD,CAClEC,MAAO,8BACPC,QAAS,8CACTC,YAAa,8CACbC,UAAW,IAEAC,GAAiD,CAC5DJ,MAAO,iCACPC,QAAS,2DACTC,YAAa,2DACbC,UAAW,IAEAE,GAAkD,CAC7DL,MAAO,yBACPC,QAAS,2CACTC,YAAa,2CACbC,UAAW,IAGPG,GAAiB,SAACC,GACtB,oEACEC,GAAmCD,WAMjCC,KAAkCC,OAGrC3J,yBAAiB4J,SAAU,UAASD,GACpC3J,yBAAiB6J,QAAS,SAAQF,GAClC3J,yBAAiB8J,SAAU,UAASH,GACpC3J,yBAAiB+J,QAAS,SAAQJ,IAGxBK,KAAaC,OACvBjK,yBAAiB4J,SAAU,CAAC,CAC3BM,IAAKV,GAAexJ,yBAAiB4J,WACrCK,GACDjK,yBAAiB6J,QAAS,CAAC,CAAEK,IAAKV,GAAexJ,yBAAiB6J,UAAUI,GAC5EjK,yBAAiB8J,SAAU,CAAC,CAC3BI,IAAKV,GAAexJ,yBAAiB8J,WACrCG,GACDjK,yBAAiB+J,QAAS,CAAC,CAAEG,IAAKV,GAAexJ,yBAAiB+J,UAAUE,IAGzEE,GACE,CACJ,CACED,IAAK,gCACLE,QAAS,CACPC,YAAa,6CAGjB,CACEH,IAAK,gCACLE,QAAS,CACPC,YAAa,8CAXfF,GAeE,CACJ,CACED,IAAK,wCACLE,QAAS,CACPC,YAAa,8CAMRC,KAAUC,OAMpBvK,yBAAiB4J,SAAUO,GAAmBI,GAC9CvK,yBAAiB6J,QAASM,GAAmBI,GAC7CvK,yBAAiB8J,SAAUK,GAAmBI,GAC9CvK,yBAAiB+J,QAASI,GAAmBI,IAGnCC,KAAcC,OACxBzK,yBAAiB4J,SAAU,CAC1Bc,WAAYC,sBAAoBC,QAAQC,WACxCC,qBAAsBH,sBAAoBC,QAAQG,kBAClDC,aAAcL,sBAAoBC,QAAQ,iBAC1CK,UAAWN,sBAAoBC,QAAQ,cACvCM,sBACEP,sBAAoBC,QAAQ,4BAC9BO,gBAAiBR,sBAAoBC,QAAQ,qBAC7CQ,cAAeT,sBAAoBC,QAAQS,cAC3CC,WAAYX,sBAAoBC,QAAQW,WACxCC,uBAAwBb,sBAAoBC,QAAQa,uBACpDC,iBAAkBf,sBAAoBC,QAAQe,kBAC/ClB,GACAzK,yBAAiB6J,QAAS,CACzBa,WAAYC,sBAAoBiB,OAAOf,WACvCC,qBAAsBH,sBAAoBiB,OAAOC,qBACjDb,aAAcL,sBAAoBiB,OAAO,iBACzCX,UAAWN,sBAAoBiB,OAAO,cACtCV,sBACEP,sBAAoBiB,OAAO,4BAC7BT,gBAAiBR,sBAAoBiB,OAAO,qBAC5CR,cAAeT,sBAAoBiB,OAAOP,cAC1CC,WAAYX,sBAAoBiB,OAAOL,WACvCC,uBAAwBb,sBAAoBiB,OAAOH,uBACnDC,iBAAkBf,sBAAoBiB,OAAOD,kBAC9ClB,GACAzK,yBAAiB+J,QAAS,CACzBW,WAAYC,sBAAoBmB,OAAOjB,WACvCC,qBAAsBH,sBAAoBmB,OAAOD,qBACjDb,aAAcL,sBAAoBmB,OAAO,iBACzCb,UAAWN,sBAAoBmB,OAAO,cACtCZ,sBACEP,sBAAoBmB,OAAO,4BAC7BX,gBAAiBR,sBAAoBmB,OAAO,qBAC5CV,cAAeT,sBAAoBmB,OAAOT,cAC1CC,WAAYX,sBAAoBmB,OAAOP,WACvCC,uBAAwBb,sBAAoBmB,OAAOL,uBACnDC,iBAAkBf,sBAAoBmB,OAAOH,iBAC7CI,YAAapB,sBAAoBmB,OAAOE,aACzCvB,GACAzK,yBAAiB8J,SAAU,CAC1BY,WAAYC,sBAAoBsB,QAAQpB,WACxCC,qBAAsBH,sBAAoBsB,QAAQJ,qBAClDb,aAAcL,sBAAoBsB,QAAQ,iBAC1ChB,UAAWN,sBAAoBsB,QAAQ,cACvCf,sBACEP,sBAAoBsB,QAAQ,4BAC9Bd,gBAAiBR,sBAAoBsB,QAAQ,qBAC7Cb,cAAeT,sBAAoBsB,QAAQZ,cAC3CC,WAAYX,sBAAoBsB,QAAQV,WACxCC,uBAAwBb,sBAAoBsB,QAAQR,uBACpDC,iBAAkBf,sBAAoBsB,QAAQN,iBAC9CI,YAAapB,sBAAoBsB,QAAQD,aAC1CvB,IC9GGyB,GAAqB,CAAC,UACL,oBAAZC,gBAAuBC,GAAID,iBAAOE,GAAPD,GAASE,MAATD,GAAcE,SAClDL,GAAmBM,KAAK,SAG1B,IAAaC,cAeX,SAAAA,EAAY5D,GAdF/H,WAAsB,GACtBA,eAA6B,CACrCkE,mBAAmB,EACnB0H,oBAAoB,EACpB7H,wBAAwB,EACxB8H,WAAW,EACXC,cAAc,GAUd,IAAMC,EAAenM,OAAOoM,OAAO,CAAE9K,QAAS,WAAa6G,GAC3D/H,KAAKiM,IAAIF,GACV,QAAAxL,EAAAoL,EAAAnL,UA2LA,OA3LAD,EAED0L,IAAA,SAAIC,WACEA,EAAchL,UAChBlB,KAAKmM,MAAMjL,QAAUyK,EAAQS,eAC3BF,EAAchL,QACdgL,EAAcN,oBAGhB5L,KAAKqM,sBAEHH,EAAcrL,SAChBb,KAAKmM,MAAMtL,OAASqL,EAAcrL,SAGlCqL,EAAc7L,eACbiM,MAAMC,QAAQL,EAAc7L,gBAC3B6L,EAAc7L,cAAcC,UAE9BN,KAAKmM,MAAM9L,cAAgBsL,EAAQa,qBACjCN,EAAc7L,cACdL,KAAKmM,MAAMjL,iBAGfuL,EAAIP,EAAcJ,eAAdW,EAA4BnM,SAC9BN,KAAKmM,MAAM3E,QAAUmE,EAAQe,eAAeR,EAAcJ,cAC1D9L,KAAK2M,UAAUb,cAAe,UAEhCc,EAAIV,EAAcL,YAAde,EAAyBtM,SAC3BN,KAAKmM,MAAM7H,KAAOqH,EAAQkB,YAAYX,EAAcL,WACpD7L,KAAK2M,UAAUd,WAAY,GAEzBK,EAAchI,oBAChBlE,KAAKmM,MAAMjI,kBAAoBgI,EAAchI,kBAC7ClE,KAAK2M,UAAUzI,mBAAoB,GAEjCgI,EAAcN,qBAChB5L,KAAKmM,MAAMP,mBAAqBM,EAAcN,mBAC9C5L,KAAK2M,UAAUf,oBAAqB,GAElCM,EAAcnI,yBAChB/D,KAAKmM,MAAMpI,uBAAyB4H,EAAQmB,8BAC1CZ,EAAcnI,wBAEhB/D,KAAK2M,UAAU5I,wBAAyB,IAE3CxD,EAEO8L,mBAAA,mBACApL,EAAcjB,KAAKkB,QAAQnE,KACjC,UACEgQ,EAAC7D,GAAcjI,MAAd8L,EAA4BzM,eAC7B0M,EAACxD,GAAWvI,MAAX+L,EAAyB1M,SACzBoJ,GAAezI,GAEhB,MAAM,IAAIG,0BAAwBH,GAepC,GAZKjB,KAAK2M,UAAUb,eAClB9L,KAAKmM,MAAM3E,QAAUmE,EAAQe,eAAexD,GAAcjI,KAGvDjB,KAAK2M,UAAUd,YAClB7L,KAAKmM,MAAM7H,KAAOqH,EAAQkB,YAAYrD,GAAWvI,KAG9CjB,KAAK2M,UAAUzI,oBAClBlE,KAAKmM,MAAMjI,kBAAoBwF,GAAezI,GAAa2I,aAGxD5J,KAAK2M,UAAUf,mBAAoB,CACtC,IAAIX,EAAcvB,GAAezI,GAAagK,YACzCA,IACHA,EAAcjL,KAAKkB,QAAQ+L,YAE7BjN,KAAKmM,MAAMP,mBAAqBX,EAE7BjL,KAAK2M,UAAU5I,yBAClB/D,KAAKmM,MAAMpI,uBA9GyB,OA6NxC4H,EACeS,eAAP,SACNc,EACAtB,GAEA,IAAM1K,EAAUO,aAAWyL,GACrBjM,EAAcC,EAAQnE,KAC5B,IAAK4C,GAAuBwB,SAASF,GACnC,MAAM,IAAIG,0BAAwBH,GAGpC,GAAI2K,EAAoB,CACtB,IAAK9I,YAAU8I,GACb,MAAM,IAAI7I,sBAEV7B,EAAQ+L,WAAarB,EAIzB,IAAK1K,EAAQ+L,WAAY,CACvB,IAAMA,EAAavD,GAAezI,GAAagK,YAC/C,IAAKgC,EACH,MAAM,IAAI7L,0BAAwBH,GAEpCC,EAAQ+L,WAAaA,EAEvB,OAAO/L,GACRyK,EAEca,qBAAP,SACNW,EACAjM,GAEA,GAAIoL,MAAMC,QAAQY,GAChB,OAAOA,EAAUC,KAAI,SAACC,GACpB,GAAoB,iBAATA,EAAmB,CAC5B,IAAMjE,EAAM,IAAIkE,IAAID,GACpB,IAAKjC,GAAmBjK,SAASiI,EAAImE,UACnC,MAAM,IAAIC,2BAAyBpE,EAAImE,UAEzC,OAAO,IAAIE,kBAAgBrE,EAAIsE,KAAMxM,GAEvC,OAAOmM,KAEJ,GAAyB,iBAAdF,EAAwB,CACxC,IAAM/D,EAAM,IAAIkE,IAAIH,GACpB,IAAK/B,GAAmBjK,SAASiI,EAAImE,UACnC,MAAM,IAAIC,2BAAyBpE,EAAImE,UAEzC,MAAO,CAAC,IAAIE,kBAAgBrE,EAAIsE,KAAMxM,IAEtC,MAAO,CAACiM,IAEXxB,EAEckB,YAAP,SACNc,GAKA,IAAIpJ,EAAwB,GAQ5B,OAPAoJ,EAAQC,SAAQ,SAACC,GACf,IAAMzE,EAAM,IAAIkE,IAAIO,EAAOzE,KAC3B,IAAKgC,GAAmBjK,SAASiI,EAAImE,UACnC,MAAM,IAAIC,2BAAyBpE,EAAImE,UAEzChJ,EAAQmH,KAAK,IAAIoC,SAAW1E,EAAKyE,EAAOvE,aAEnC/E,GACRoH,EAEce,eAAP,SAAsBS,GAC5B,IAAI5I,EAA2B,GAQ/B,OAPA4I,EAAUS,SAAQ,SAACG,GACjB,IAAM3E,EAAM,IAAIkE,IAAIS,EAAS3E,KAC7B,IAAKgC,GAAmBjK,SAASiI,EAAImE,UACnC,MAAM,IAAIC,2BAAyBpE,EAAImE,UAEzChJ,EAAQmH,KAAK,IAAIsC,gBAAc5E,EAAIsE,UAE9BnJ,GACRoH,EAEcmB,8BAAP,SACN/I,GAEA,GAAIA,EAAyB,GAAKA,EAAyB,EACzD,MAAM,IAAIkK,MACR,kEAGJ,OAAOlK,KACR4H,OAAAuC,cAAAC,IA7LD,WACE,OAAOnO,KAAKmM,MAAMjL,WAEpBgN,yBAAAC,IASA,WACE,OAAOnO,KAAKmM,MAAMP,sBAGpBsC,aAAAC,IASA,WACE,OAAOnO,KAAKmM,MAAMtL,UAGpBqN,oBAAAC,IASA,WACE,OAAOnO,KAAKmM,MAAM9L,eAAiB,MAGrC6N,wBAAAC,IASA,WACE,OAAOnO,KAAKmM,MAAMjI,qBAGpBgK,6BAAAC,IASA,WACE,OACEnO,KAAKmM,MAAMpI,0BAIfmK,WAAAC,IASA,WACE,OAAOnO,KAAKmM,MAAM7H,QAGpB4J,cAAAC,IASA,WACE,OAAOnO,KAAKmM,MAAM3E,0gBACnBmE,KC9OUyC,YAAcC,GAQzB,SAAAD,EAAYrG,UACVsG,EAAAC,UAAMvG,SAmBP,OA5BwBwG,EAAAH,EAAAC,GAYzBD,EAQOI,YAAP,SAAmBC,GACjB,IAAMC,EAAY,IAAIN,EAAc,IAEpC,OADAxO,OAAOoM,OAAO0C,EAAWD,GAClBC,GACRN,EAAA5N,UAEDyL,IAAA,SAAIC,GACFmC,EAAA7N,UAAMyL,IAAGqC,UAACpC,IACXkC,GA5BgCzC,aCwBnBgD,GACdC,GAEA,IAAMC,EAAM,IAAIC,KACVC,EAAY,IAAID,KACW,IAA/BE,SAASJ,EAASG,YAEdE,EAAU,IAAIH,KAAkC,IAA7BE,SAASJ,EAASK,UAC3C,OAAIL,EAASM,SACJ7Q,uBAAe8Q,SAEpBJ,GAAaF,EACRxQ,uBAAe+Q,QAEpBR,EAASS,uBAAyBT,EAASU,gBACtCjR,uBAAekR,UAEpBN,GAAWJ,EACNxQ,uBAAemR,OAEjBnR,uBAAeoR,kBAGRC,GACd/I,GAEA,IAAIgJ,EAAQ,GACNd,EAAM3O,KAAK0P,OAAM,IAAId,MAAOe,UAAY,KAAMC,WACpD,OAAQnJ,GACN,KAAKtI,uBAAe+Q,QAClBO,EAAQ,CAAEI,cAAelB,GACzB,MACF,KAAKxQ,uBAAemR,OAClBG,EAAQ,CAAEK,aAAcnB,EAAKoB,YAAapB,EAAKK,UAAU,GACzD,MACF,KAAK7Q,uBAAe8Q,SAClBQ,EAAQ,CAAET,UAAU,GACpB,MACF,KAAK7Q,uBAAekR,UAClBI,EAAQ,CAAEN,uBAAuB,EAAMa,WAAYrB,GACnD,MACF,KAAKxQ,uBAAeoR,SAClBE,EAAQ,CACNN,uBAAuB,EACvBa,WAAYrB,EACZK,UAAU,GAEZ,MACF,QACE,MAAM,IAAIjB,MAAM,2BAEpB,OAAO0B,EAGT,SAAgBQ,GACdC,EACAC,EACAC,GAEA,OAAOF,EAAQG,KAAKC,MAClB,SAACC,GAAG,OACFA,EAAIC,OAAO,KACTC,KACEN,EAAMO,SAASN,GAAWO,OACxB,wBAMIC,GAAsBC,GACpC,OAAQA,GACN,KAAKxS,mBAAWyS,SACd,OAAO,EACT,KAAKzS,mBAAW0S,gBACd,OAAO,EACT,KAAK1S,mBAAW2S,iBACd,OAAO,EACT,QACE,MAAM,IAAIC,mCAGAC,GAAwBL,GACtC,OAAQA,GACN,KAAK,EACH,OAAOxS,mBAAWyS,SACpB,KAAK,EACH,OAAOzS,mBAAW0S,gBACpB,KAAK,EACH,OAAO1S,mBAAW2S,iBACpB,QACE,MAAM,IAAIC,mCC7GAE,GACdC,GAEA,IAwBkCC,EAxB5BC,EAAkBC,8BAA4BC,kBAC9CC,EAAWC,aAAWN,GACtBO,EAAmBL,EAAgBM,YAAY,wBAKrD,MAkBO,CACLf,WAAYK,IAFoBG,EArBnBC,EAAgBO,mBAC7BF,EACAF,IAqB2C,GAAG,IAC9CK,iBAAkBC,cAAYV,EAAO,GAAG,GAAI,GAC5CW,iBAAkBD,cAAYV,EAAO,GAAG,GAAI,GAC5CY,YAAaZ,EAAO,GAAG,GAAGa,WAC1BC,uBAAwBzO,OAAO2N,EAAO,GAAG,cApB7Be,GACdvK,GAEA,IAAMyJ,EAAkBC,8BAA4BC,kBAC9Ca,EAAOC,GAAyBzK,GAEhC4J,EAAWH,EAAgBiB,mBAC/B,uBACA,CAACF,IAGH,OAAOG,aAAWf,YAaJa,GACdzK,GAEA,MAAO,CACLgJ,WAAY4B,YAAUC,KACpB9B,GAAsB/I,EAAOgJ,YAAcxS,mBAAWyS,WAExDgB,iBAAkBa,cAAY9K,EAAOiK,iBAAkB,GACvDE,iBAAkBW,cAAY9K,EAAOmK,iBAAkB,GACvDC,YAAaQ,YAAUC,KAAK7K,EAAOoK,aACnCE,uBAAwBM,YAAUC,KAAK7K,EAAOsK,wBAA0B,aAI5DS,GACdxB,EACAyB,GAEA,IAAMpB,EAAWC,aAAWN,GAE5B,OADc,IAAI0B,YAAUD,GACfjB,YAAYH,EAASsB,UAAU,EAAG,SCjE3CC,GAAc,CAClBC,mBAAoB,qBACpBC,wBAAyB,0BACzBC,mBAAoB,qBACpBC,oBAAqB,sBACrBC,mCAAoC,qCACpCC,iCAAkC,mCAClCC,gBAAiB,kBACjBC,0BAA2B,4BAC3BC,oBAAqB,sBACrBC,wBAAyB,0BACzBC,kCAAmC,oCACnCC,gBAAiB,kBACjBC,uBAAwB,yBACxBC,4BAA6B,8BAC7BC,6BAA8B,gCAG1BC,GAAgBtU,OAAOuU,QAAQjB,IAAakB,QAChD,SAACC,EAAGxM,GAAA,IAAAyM,EAAO,OAAAC,KAAYF,IAAGC,MAAlBzM,KAAyB,OAAQ2M,YAAUC,cAAxC5M,OAAuDyM,MAClE,aC0BcI,GACd3M,SAEA,MAAO,CACLA,EAAO4M,gBACP5M,EAAO6M,cAAMC,QACZ9M,SAAAA,EAAgB+M,cAAYD,EAAIE,cACjC,aAIYC,GACdC,EACAC,GAEA,MAAO,CACLtS,QAASqS,EAAItE,GACbwE,UAAWF,EAAIG,UAAY,WAC3BF,SAAU,CACRnY,KAAMmY,EAASnY,KACfuL,YAAa4M,EAAS5M,YACtB+M,OAAQH,EAASG,aAAUC,EAC3BC,MAAOL,EAASK,OAElBC,aAAc,IAAI1G,KAA+B,IAA1BE,SAASiG,EAAIQ,YAEpCC,QAAST,EAAIS,QAAQtI,KACnB,SACEuI,GAA8B,MAE9B,CACEhF,GAAOgF,EAAOC,kBAAkBR,4BAChCS,QAASF,EAAOG,eAAeD,QAAQA,QACvCE,MAAOJ,EAAOG,eAAeC,MAC7BC,gBAAiBL,EAAOM,mBAAmBC,4BAOrCC,GACdlB,EACAC,GAEA,MAAO,CACLtS,QAASqS,EAAItE,GACbwE,UAAWF,EAAIG,UAAY,WAC3BF,SAAU,CACRnY,KAAMmY,EAASnY,KACfuL,YAAa4M,EAAS5M,YACtB+M,OAAQH,EAASG,aAAUC,GAE7BI,QAAST,EAAIS,QAAQtI,KACnB,SACEuI,GAA8B,MAE9B,CACEhF,GAAOgF,EAAOC,kBAAkBR,4BAChCS,QAASF,EAAOG,eAAeD,QAAQA,QACvCE,MAAOJ,EAAOG,eAAeC,MAC7BC,gBAAiBL,EAAOM,mBAAmBC,4BAOrCE,GAAeC,GAC7B,IAAMC,EAAa,IAAIxH,KAAqC,IAAhCE,SAASqH,EAAQE,cAC7C,MAA2B,kBAAvBF,EAAQG,WACH,CACLvZ,KAAMyC,kBAAU+W,OAChBJ,QAASzS,OAAOyS,EAAQA,SACxBC,WAAAA,GAE8B,kBAAvBD,EAAQG,WACV,CACLvZ,KAAMyC,kBAAUgX,OAChB3Z,KAAMsZ,EAAQM,MAAM5Z,KACpB6Z,OAAQP,EAAQM,MAAMC,OACtBN,WAAAA,EACA1T,QAASyT,EAAQM,MAAMhG,IAGlB,CACL1T,KAAMyC,kBAAUmX,MAChBjU,QAASyT,EAAQM,MAAMhG,GACvB5T,KAAMsZ,EAAQM,MAAM5Z,KACpB6Z,OAAQP,EAAQM,MAAMC,OACtBE,SAAUT,EAAQM,MAAMG,SACxBT,QAASzS,OAAOyS,EAAQA,SACxBC,WAAAA,YAKUS,GAAgBC,GAC9B,IAC8CC,EAsBOC,EA8B9CC,EArDD3B,EAAe,IAAI1G,KAAoC,IAA/BE,SAASgI,EAASvB,YAChD,MAA4B,mBAAxBuB,EAASR,WACPQ,EAAS/Z,OAASJ,EAAqB8B,QAClC,CACL1B,KAAMP,qBAAaiC,QACnByY,UAAW1X,kBAAU+W,OACrB7B,OAAQhR,OAAOoT,EAASpC,QACxBY,aAAAA,EACA6B,cAAeL,EAASM,OACxB1E,KAAMoE,EAASpE,KACf2E,GAAIP,EAASO,IAGV,CACLta,KAAMP,qBAAakC,SACnBwY,UAAW1X,kBAAU+W,OACrB7B,OAAQhR,OAAOoT,EAASpC,QACxBY,aAAAA,EACA6B,cAAeL,EAASM,OACxBE,mBAAYP,EAAAD,EAASpI,iBAATqI,EAAmBtG,KAAM,GACrC4G,GAAIP,EAASO,GACb3E,KAAMoE,EAASpE,MAEgB,mBAAxBoE,EAASR,WACdQ,EAAS/Z,OAASJ,EAAqB8B,QAClC,CACL1B,KAAMP,qBAAaiC,QACnByY,UAAW1X,kBAAUgX,OACrBC,MAAO,CACL/T,QAASoU,EAASL,MAAMhG,GACxB5T,KAAMia,EAASL,MAAM5Z,KACrB6Z,OAAQI,EAASL,MAAMC,QAEzBpB,aAAAA,EACA6B,cAAeL,EAASM,OACxB1E,KAAMoE,EAASpE,KACf2E,GAAIP,EAASO,IAGV,CACLta,KAAMP,qBAAakC,SACnBwY,UAAW1X,kBAAUgX,OACrBC,MAAO,CACL/T,QAASoU,EAASL,MAAMhG,GACxB5T,KAAMia,EAASL,MAAM5Z,KACrB6Z,OAAQI,EAASL,MAAMC,QAEzBpB,aAAAA,EACA6B,cAAeL,EAASM,OACxBC,GAAIP,EAASO,GACb3E,KAAMoE,EAASpE,KACf4E,mBAAYN,EAAAF,EAASpI,iBAATsI,EAAmBvG,KAAM,IAGnCqG,EAAS/Z,OAASJ,EAAqB8B,QAClC,CACL1B,KAAMP,qBAAaiC,QACnByY,UAAW1X,kBAAUmX,MACrBF,MAAO,CACL/T,QAASoU,EAASL,MAAMhG,GACxB5T,KAAMia,EAASL,MAAM5Z,KACrB6Z,OAAQI,EAASL,MAAMC,OACvBE,SAAUE,EAASL,MAAMG,UAE3BlC,OAAQhR,OAAOoT,EAASpC,QACxBY,aAAAA,EACA6B,cAAeL,EAASM,OACxB1E,KAAMoE,EAASpE,KACf2E,GAAIP,EAASO,IAGV,CACLta,KAAMP,qBAAakC,SACnBwY,UAAW1X,kBAAUmX,MACrBF,MAAO,CACL/T,QAASoU,EAASL,MAAMhG,GACxB5T,KAAMia,EAASL,MAAM5Z,KACrB6Z,OAAQI,EAASL,MAAMC,OACvBE,SAAUE,EAASL,MAAMG,UAE3BlC,OAAQhR,OAAOoT,EAASpC,QACxBY,aAAAA,EACA6B,cAAeL,EAASM,OACxBC,GAAIP,EAASO,GACb3E,KAAMoE,EAASpE,KACf4E,mBAAYL,EAAAH,EAASpI,iBAATuI,EAAmBxG,KAAM,aAK3B8G,GACd5B,EACAX,GAEA,MAAO,CACLW,QAASA,EAAQA,QACjB6B,aAAcxX,KAAKwD,IAAGjB,MAARvC,KAAY2V,EAAQ8B,OAAOvK,KAAI,SAAC2I,GAAK,OAAKA,EAAMA,UAC9Db,SAAAA,YAIY0C,GACdC,EACAC,GAEA,MAAO,CACLlV,QAASiV,EAAWlH,GACpByE,UAAWyC,EAAWzC,UACtB0C,SAAAA,GAGJ,SAAgBC,GACdF,EACAG,EACAC,mBAEA,MAAO,CACLrV,QAASiV,EAAWlH,GACpByE,UAAWyC,EAAWzC,UACtB8C,QAAS,CACPnC,MAAO,CACLb,SAAU+C,EAGVE,cAAMC,EAAEP,EAAWC,kBAAQO,EAAnBD,EAAsB,YAAEE,EAAxBD,EAA0BV,gBAAMY,EAAhCD,EAAmC,WAAnCC,EAAuCxC,OAEjDF,QAAS,CACPX,SAAU8C,EAGVG,cAAMK,EAAEX,EAAWC,kBAAQW,EAAnBD,EAAsB,WAAtBC,EAA0B5C,oBAqC1B6C,GACdnH,GAEA,IAAMxJ,EAASwJ,EAAO,GACtB,MAAO,CACLoH,YAAa5Q,EAAO4Q,YACpBC,YAAa7Q,EAAO6Q,YACpBC,WAAY9Q,EAAO+Q,eAAeD,WAClC3C,cAAenO,EAAO4N,OACtBkC,WAAY9P,EAAO+Q,eAAeC,0BAItBC,GACdjR,GAEA,MAAO,CAACA,EAAO4H,MAAO5H,EAAOkR,IAAKzE,YAAUC,cAAY1M,EAAOmR,uBAejDC,GACd5H,SAEA,MAAO,CACL5B,MAAO4B,EAAO,GACd0H,IAAK1H,EAAO,GACZ6H,aAAc7H,EAAO,GACrB2H,mBAAYG,EAAAzZ,OAAO0Z,KAAKpF,IACrB1D,MAAK,SAAC+I,GAAC,OAAKrF,GAAcqF,KAAOhI,EAAO,cAD/B8H,EAERG,QAAQ,OAAQ,MAAO,IAY/B,SAAgBC,GACdlC,EACAmC,EACAnI,EACAoI,GAEA,GAAIA,IAAkBja,kBAAUmX,MAC9B,MAAO,CACL5Z,KAAMyC,kBAAUmX,MAChB/B,aAAcyC,EACdqC,sBAAuBrI,EAAO,GAC9BqD,OAAQhR,OAAO2N,EAAO,KAI1B,MAAM,IAAItD,MAAM,mBDpWlBrO,OAAOia,OAAO3G,IAEdtT,OAAOia,OAAO3F,IEjBP,gBAAM4F,GAA0C,CACrD,IAAI7W,WAAS8R,cAAajY,aAA4BgV,YAAY,YAC/DjB,OAAO,WACVkJ,eAAarI,kBAAkBI,YAAY,SAASjB,OAAO,WAC3DkJ,eAAarI,kBAAkBI,YAAY,sBAAsBjB,OAC/D,WAEFkJ,eAAarI,kBAAkBI,YAAY,UAAUjB,OAAO,WAC5DkJ,eAAarI,kBAAkBI,YAAY,eAAejB,OAAO,WACjEkJ,eAAarI,kBAAkBI,YAAY,aAAajB,OAAO,WAC/DkJ,eAAarI,kBAAkBI,YAAY,4BAA4BjB,OACrE,WAEFkJ,eAAarI,kBAAkBI,YAAY,yBAAyBjB,OAClE,WAEFkJ,eAAarI,kBAAkBI,YAAY,aAAajB,OAAO,WAC/DkJ,eAAarI,kBAAkBI,YAAY,oBAAoBjB,OAC7D,YAISmJ,GAA6C,CACxDjd,KAAM,8BACNuL,YAAa,uCACbiN,MAAO,IAEI0E,GAAuC,CAClDld,KAAM,4BACNuL,YAAa,uCACbiN,MAAO,IAGI2E,GAAwC,CACnDnd,KAAM,yBACNuL,YAAa,sCACbiN,MAAO,IAEI4E,GAA+D,CAC1Epd,KAAM,8BACNuL,YAAa,uCACb8R,OAAQ,IAEGC,GAAyD,CACpEtd,KAAM,gCACNuL,YAAa,2CACb8R,OAAQ,IAGGE,GAA0D,CACrEvd,KAAM,yBACNuL,YAAa,0CACb8R,OAAQ,IAGGG,GAA2D,CACtEC,GAAI,GACJC,OAAQ,8BACRC,eAAgB,CACdC,oBAAqB,GACrBC,sBAAuB,GACvBC,cAAe,KAGNC,GAAqD,CAChEN,GAAI,GACJC,OAAQ,8BACRC,eAAgB,CACdC,oBAAqB,GACrBC,sBAAuB,GACvBC,cAAe,KAINE,GAAsD,CACjEP,GAAI,GACJC,OAAQ,yBACRC,eAAgB,CACdC,oBAAqB,GACrBC,sBAAuB,GACvBC,cAAe,KC4BNG,YAAcC,GAAA,SAAAD,IAAA,OAAAC,EAAAxY,WAAAC,iBAAA6L,EAAAyM,EAAAC,GAAA,IAAA1a,EAAAya,EAAAxa,UA6tBxB,OA5tBDD,EAOc2a,UAAP,SACLnT,iKAE6C,GAAvClH,EAASiD,EAAKoE,KAAK7G,sBAEvB0G,EAAOoT,cAAiBpT,EAAOoT,aAAaC,MAAM,kBAAgBjZ,EAAAE,OAAA,MAAA,MAE5D,IAAIgZ,kBAAiB,OAGvBC,EAAqBC,sBAAoBha,QAC7CuC,EAAKoE,KAAKjE,uBACVpD,GAGI2a,EAA4D,GAAEC,EAAAC,EAC/C3T,EAAO2N,SAAO,OAAA,IAAAiG,EAAAF,KAAAG,MAAAzZ,EAAAE,QAAA,MAC0B,OAArDwZ,EAAOC,sBAAoBva,SADxBoU,EAAMgG,EAAAI,OACiCpL,GAAI9P,GAAOsB,EAAAE,QAAA2Z,EAE9BH,EAAKI,iBAAe,QAA7B,OAAdC,EAAc/Z,EAAAG,KAAAH,EAAAE,QAAA2Z,EACQH,EAAK,2BAC/BK,IACD,QACDV,EAAuB9P,KAAK,CAC1BoN,eAAgB,CACdC,gBAAiB8C,EAAKjZ,QACtBiW,WANe1W,EAAAG,KAMW6Z,KAE5B7K,KAAMqE,EAAOrE,OACZ,QAAAnP,EAAAE,OAAA,MAAA,QAAA,OAAAF,EAAAE,QAAA2Z,EAMkCV,EACpCtR,wBAAsB,QAOzB,OANMA,EAAuBoS,gCAA8B7a,QAF7BY,EAAAG,KAI5BzB,GAEEwb,GAAsB,EAE1Bla,EAAAE,QAAA2Z,EAC0BV,EAAmBgB,WAAS,QAAhDC,EAAWpa,EAAAG,KAAAka,IAAAC,EAESjB,EAAsB,QAAA,KAAAgB,EAAAC,EAAAnc,SAAA6B,EAAAE,QAAA,MAA1B,OAAXqa,EAAWD,EAAAD,GAAAra,EAAAE,QAAA2Z,EACuBhS,EAAqB2S,WAC7DhC,oBAAoB4B,EAAaG,IAAY,QAI/C,IALiCva,EAAAG,KAES,GAAGsW,YAAYpI,MACxD,SAAC0I,GAAU,OACTA,EAAWE,eAAiBlF,GAAc0I,0BAErCza,EAAAE,QAAA,MACoB,OAA3Bga,GAAsB,EAAKla,EAAAI,mBAAA,QAAAia,IAAAra,EAAAE,QAAA,MAAA,QAAA,GAK1Bga,GAAmBla,EAAAE,QAAA,MAAA,MAChB,IAAIwa,6BAA4B,QAAA,OAAA1a,EAAAE,QAAA2Z,EAGvBV,EAAmB/Z,QAAQV,GAAQqa,UAClD,CACE9F,UAAWrN,EAAOoT,aAClBjG,SAAUT,cAAY1M,EAAO+U,aAC7BC,OAAQhV,EAAOiV,QAAU,GACzBC,iBAAkBlV,EAAOkV,kBAAoBlI,eAE/CyG,IACD,QAED,OAVM0B,EAAE/a,EAAAG,KAAAH,EAAAE,QAUF,CACJ6L,IAAK3R,yBAAiB4gB,SACtB7F,OAAQ4F,EAAGvX,MACZ,QAAA,OAAAxD,EAAAE,QAAA2Z,EAEqBkB,EAAGE,QAAM,QAO9B,GAPKhN,EAAOjO,EAAAG,KACP+a,EAAsBC,uBAAqB5L,kBAE3CjB,SAAG8M,EAAGnN,EAAQG,aAARgN,EAAc/M,MACxB,SAAChK,GAAC,OACAA,EAAEkK,OAAO,KACPC,KAAG0M,EAAoBzM,SAAS,iBAAiBC,OAAO,gBAGtD1O,EAAAE,QAAA,MAAA,MACA,IAAI4L,MAAM,wBAAuB,QAYU,GAR7CuP,EAAepB,gCAA8B1K,kBAC7C+L,SAAaC,EAAGtN,EAAQG,aAARmN,EAAcC,QAClC,SAACnX,GAAC,OACAA,EAAEkK,OAAO,KACPC,KAAG6M,EAAa5M,SAAS,uBAAuBC,OAAO,gBAIvD+M,EAAYP,EAAoBQ,SAASpN,IAChC8B,KAAU,KAACpQ,EAAAE,QAAA,MAAA,MAClB,IAAI4L,MAAM,wBAAuB,QAGzC,OAHyC9L,EAAAE,QAGnC,CACJ6L,IAAK3R,yBAAiBuhB,KACtBlb,QAASgb,EAAUrL,KAAU,IAC7BwL,gBAAiBN,EAAcrQ,KAC7B,SAACqD,GAAG,OAAK+M,EAAaK,SAASpN,GAAK8B,KAAK,OAE5C,QAAA,UAAA,OAAApQ,EAAAK,UAAAR,UAEHzB,EAOayd,YAAW,WAAA,IAAAC,EAAApc,EAAAC,IAAAC,MAAjB,SAAAsD,EAAkB0C,GAAmB,IAAA/B,EAAA,OAAAlE,IAAAI,eAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,OAAA,OAAAmD,EAAApD,OAAAoD,EAAAnD,OAEtBrC,KAAKsE,KAAKa,IAAI+Y,KAAKC,UAAUpW,IAAQ,OAA9C,OAAH/B,EAAGR,EAAAlD,KAAAkD,EAAAnD,OACHrC,KAAKsE,KAAKuB,IAAIG,GAAI,OAAA,OAAAR,EAAAjD,0BACPyD,GAAG,OAAA,MAAAR,EAAApD,OAAAoD,EAAA4Y,GAAA5Y,WAEd,IAAI6Y,eAAY7Y,EAAA4Y,IAAG,QAAA,UAAA,OAAA5Y,EAAAhD,UAAA6C,oBAE5B,OAAA,SAAAO,GAAA,OAAAqY,EAAAxb,WAAAC,YARuB,GASxBnC,EAOc+d,QAAP,SACLvW,+IAE6C,GAAvClH,EAAS0E,EAAK2C,KAAK7G,qBAErB0G,EAAO9K,OAASyC,kBAAU+W,QAAU1O,EAAO9K,OAASyC,kBAAUmX,OAAK0H,EAAAlc,OAAA,MAAA,MAC/D,IAAI4L,MAAM,sDAAqD,OAGrB,GAHqBuQ,EAGjB9J,GACpD3M,GADK0W,EAAUD,KAAE5J,EAAM4J,KAAgBE,EAASF,OAAvB1J,EAAY0J,OAInB1J,IAAiBC,eAAWwJ,EAAAlc,QAAA,MAOF,OALtCsc,EAAgB,IAAI1b,WACxB6R,EACAhY,EACA+D,GACD0d,EAAAH,GAAApC,EAAAuC,EAAAK,GAC8BD,EAAaJ,EAAAlc,QAAA2Z,EACpCnb,EAAOge,cAAY,QAD2B,OAC3BN,EAAAO,GAAAP,EAAAjc,KAAAic,EAAAQ,GACzBN,EAAUF,EAAAS,GAAAT,EAAAK,GAFiCK,UAAS3Q,KAAAiQ,EAAAK,GAAAL,EAAAO,GAAAP,EAAAQ,IAAAR,EAAAlc,WAAAkc,EAAAH,IAAAG,EAAAS,IAAA,QAItD,OAJME,EAAgBX,EAAAjc,KAAAic,EAAAlc,QAIhB,CACJ6L,IAAKzR,wBAAgB0iB,kBACrBF,UAAWC,EAAiB3b,YAC7B,QAAA,IAEG2b,EAAiBE,GAAGrX,EAAO6M,SAAO2J,EAAAlc,QAAA,MAGpC,OAAAkc,EAAAc,cAAAC,EAAAC,EAAOha,EAAKia,aACV,CACE5K,OAAQ7M,EAAO6M,OACf6K,QAAShB,EACT3J,aAAAA,eAEH,QAWJ,OANK4K,EAAc3F,eAAaxY,QAAQkd,EAAY5d,GAC/C8e,EAA+B,GAEjC7K,IAAiBC,gBAEnB4K,EAAS5D,MAAQnH,GAClB2J,EAAAlc,QAAA2Z,EAEgB0D,EAAYpB,QAC3BxJ,EACAF,EACA8J,EACAiB,IACD,QACD,OANMzC,EAAEqB,EAAAjc,KAAAic,EAAAlc,QAMF,CAAE6L,IAAKzR,wBAAgBmjB,WAAYtI,OAAQ4F,EAAGvX,MAAM,QAAA,OAAA4Y,EAAAlc,QAAA2Z,EAEzCkB,EAAGE,QAAM,QACiC,GAArD3M,EAAMN,GADJoO,EAAAjc,KACgBod,YAAuB,cACvCnB,EAAAlc,QAAA,MAAA,MACA,IAAIwd,qBAAoB,QAIY,GADtCC,EAAe/F,eAAarI,kBAC5BkM,EAAYkC,EAAajC,SAASpN,IAEnCmE,EAAO9E,aAAe8N,EAAUrL,KAAa,QAACgM,EAAAlc,QAAA,MAAA,MAC3C,IAAI0d,sBACRnL,EACAgJ,EAAUrL,KAAa,OAAEhP,YAC1B,QAEH,OAFGgb,EAAAlc,QAEG,CAAE6L,IAAKzR,wBAAgBqhB,KAAMlJ,OAAQA,GAAQ,QAAA,UAAA,OAAA2J,EAAA/b,UAAAwd,UAGrDzf,EAOcif,aAAP,SACLzX,6HASC,OAPKlH,EAASiF,EAAKoC,KAAK7G,qBAGnBsd,EAAgB,IAAI1b,WACxB8E,EAAO+M,aACPhY,EACA+D,GACDof,EAAA5d,OAAA2Z,EACqC2C,EAAcuB,QAClDnY,EAAO0X,QACP1X,EAAO6M,SACR,OAED,OALMsI,EAAE+C,EAAA3d,KAAA2d,EAAA5d,OAKF,CACJ6L,IAAKvR,0BAAkBwjB,kBACvB7I,OAAQ4F,EAAGvX,MACZ,OAAA,OAAAsa,EAAA5d,OAAA2Z,EAEgBkB,EAAGE,QAAM,OACkC,GAAtD3M,EAAMN,GADJ8P,EAAA3d,KACgBqc,YAAyB,aAEzCsB,EAAA5d,QAAA,MAAA,MACA,IAAI+d,uBAAsB,QAEZ,IAAhBrE,EAAQtL,EAAIa,QACJqB,YAAUC,KAAK7K,EAAO6M,QAAQyL,GAAG1N,YAAUC,KAAKmJ,KAAOkE,EAAA5d,QAAA,MAAA,MAC7D,IAAI+d,uBAAsB,QAGlC,OAHkCH,EAAA5d,QAG5B,CACJ6L,IAAKvR,0BAAkB2jB,cACvBrB,UAAWlX,EAAO6M,QACnB,QAAA,UAAA,OAAAqL,EAAAzd,UAAA+d,UAEHhgB,EAOcqa,sBAAP,SACL7S,2IAG8C,OADxClH,EAASoF,EAAKiC,KAAK7G,qBACnBJ,EAAcgF,EAAKiC,KAAKlH,iBAAgBwf,EAAAne,OAAA2Z,EAIpB/V,EAAKuB,QAAQC,QAAW,CAChDK,MAAO9J,EACP+J,OAAQ,CACNnF,QAASmF,EAAOmO,cAAcuK,cAC9B9Q,MAAO,CAAEsF,IAAKlN,EAAO4M,kBAEvB5X,KAAM,YACN,OAIyE,GAArE2jB,EAJJF,EAAAle,KAPMqe,QAW6BC,wBAFrCC,EACwC9Y,EAAhC+Y,yBAA0B,EAACD,IAEVL,EAAAne,QAAA,MAAA,MACjB,IAAI0e,4BAA2B,QAYtC,OARKzP,EAAO0P,kBAAgBC,iBADIC,EAA6BnZ,EAA3BoZ,mBAAoB,GAAED,YADzDE,EAC8DrZ,EAAtDsZ,sBAAuB,GAAED,GAM3BE,EAAclF,gCAA8B7a,QAChDmI,GAAezI,GAAa+I,qBAC5BnJ,GACD2f,EAAAne,QAAA2Z,EACgBsF,EAAY1G,sBAC3B7S,EAAO4M,gBACP,CACEmE,eAAgB,CACdC,gBACE2H,EAAqBzK,mBAAmB4B,WAAWlH,GACrDkI,WAAY,CACV9C,MAAO2K,EAAqB5K,eAAeC,MAC3CF,QAAS6K,EAAqB5K,eAAeD,QAAQA,UAGzD0L,aAAc,CACZ5L,OAAQ5N,EAAOmO,cACfsL,eAAgBd,EAAqBzK,mBAAmBwL,QACxDnQ,KAAAA,MAGL,QACD,OAlBM4L,EAAEsD,EAAAle,KAAAke,EAAAne,QAkBF,CACJ6L,IAAKtR,mCAA2B8kB,UAChCpK,OAAQ4F,EAAGvX,MACZ,QAAA,OAAA6a,EAAAne,QAAA2Z,EACgBkB,EAAGE,QAAM,QAE8C,GAAlE3M,EAAMN,GAFJqQ,EAAAle,KAEgBgf,YAAuB,2BACvCd,EAAAne,QAAA,MAAA,MACA,IAAIsf,uCAAsC,QAGD,GAD3C/D,EAAY0D,YAAsBzD,SAASpN,GAC3CmI,EAAcgF,EAAUrL,KAAkB,aAChCiO,EAAAne,QAAA,MAAA,MACR,IAAIsf,uCAAsC,QAElD,OAFkDnB,EAAAne,QAE5C,CACJ6L,IAAKtR,mCAA2BkhB,KAChClF,YAAaA,EAAYxL,KAAI,SAAC8L,GAAiC,MAAM,CACnE0I,UAAW1I,EAAW0I,UACtBjS,MAAOuJ,EAAWvJ,MAClBsJ,IAAKC,EAAWD,IAChBG,aAAcF,EAAWE,iBAE3BvB,WAAY6I,EAAqBzK,mBAAmB4B,WAAWlH,GAC/DuF,cAAenO,EAAOmO,cACtB2C,WAAY,CACV9C,MAAO2K,EAAqB5K,eAAeC,MAC3CF,QAAS6K,EAAqB5K,eAAeD,QAAQA,UAExD,QAAA,UAAA,OAAA2K,EAAAhe,UAAAqf,UAEHthB,EAOauhB,cAAa,WAAA,IAAAC,EAAAlgB,EAAAC,IAAAC,MAAnB,SAAAigB,EAAoBja,GAA2B,IAAAlH,EAAA6e,EAAA,OAAA5d,IAAAI,eAAA+f,GAAA,cAAAA,EAAA7f,KAAA6f,EAAA5f,MAAA,OAGoB,OAFlExB,EAASb,KAAKkI,KAAK7G,qBAEnBqe,EAAc3F,eAAaxY,QAAQwG,EAAO4M,gBAAiB9T,GAAOohB,EAAA1f,gBACjEmd,EAAYoC,cACjB/Z,EAAO4H,MACP5H,EAAOkR,IACPtI,KAAG5I,EAAOmR,YACVnR,EAAOuJ,MAAQ,IAAI4Q,WAAW,MAC/B,OAAA,UAAA,OAAAD,EAAAzf,UAAAwf,YACF,OAAA,SAAAG,GAAA,OAAAJ,EAAAtf,WAAAC,YAVyB,GAW1BnC,EAOa6hB,OAAM,WAAA,IAAAC,EAAAxgB,EAAAC,IAAAC,MAAZ,SAAAugB,EAAa3N,GAAuB,IAAA/R,EAAAtB,EAAAihB,EAAAza,EAAAC,EAAAkN,EAAAuN,EAAAtN,EAAA,OAAApT,IAAAI,eAAAugB,GAAA,cAAAA,EAAArgB,KAAAqgB,EAAApgB,MAAA,OACZ,GACxBS,YADDF,EAAU+R,IACS8N,EAAApgB,QAAA,MAAA,OAAAogB,EAAApgB,OACfrC,KAAKkI,KAAKvG,eAAc,OACU,GAAlCL,EAAWtB,KAAKkI,KAAKnH,eACd0hB,EAAApgB,OAAA,MAAA,MACL,IAAI3B,kBAAiB,OAAA,OAAA+hB,EAAArgB,OAAAqgB,EAAApgB,QAGGf,EAASohB,YAAY9f,GAAQ,QAAtC,GAAf2f,EAAeE,EAAAngB,MACDmgB,EAAApgB,QAAA,MAAA,MACZ,IAAIsgB,2BAA0B,QAEtC/f,EAAU2f,EAAgB9B,cAAcgC,EAAApgB,QAAA,MAAA,QAAA,MAAAogB,EAAArgB,QAAAqgB,EAAArE,GAAAqE,WAElC,IAAIE,2BAAwBF,EAAArE,IAAG,QAKvB,OAFZtW,EAAQxK,EACRyK,EAAS,CAAEnF,QAAAA,GACC6f,EAAApgB,QAEIrC,KAAKwH,QAAQC,QAAW,CAAEK,MAAAA,EAAOC,OAAAA,EAAQhL,KAFlD,QAEyD,QAA3D,GAAHkY,EAA8DwN,EAAAngB,KAA9D2S,KACAwN,EAAApgB,QAAA,MAAA,OAAAogB,EAAAlgB,gBACC,MAAI,QAAA,GACD0S,EAAIC,UAAQuN,EAAApgB,QAAA,MAAA,OAAAogB,EAAAlgB,gBACfyS,GACLC,EACAgF,KACD,QAG+C,OAH/CwI,EAAArgB,QAGKogB,EAAcI,iBAAe3N,EAAIC,UAASuN,EAAApgB,QACnBrC,KAAKsE,KAAKyC,YAAYyb,GAAY,QACL,OAApDtN,EAAWgJ,KAAK2E,MADFJ,EAAAngB,MACsCmgB,EAAAlgB,gBACnDyS,GAAaC,EAAKC,IAAS,QAAA,GAAAuN,EAAArgB,QAAAqgB,EAAA7D,GAAA6D,cAE9BA,EAAA7D,cAAekE,oBAAeL,EAAApgB,QAAA,MAAA,OAAAogB,EAAAlgB,gBACzByS,GAAaC,EAAK+E,KAA8B,QAAA,OAAAyI,EAAAlgB,gBAElDyS,GAAaC,EAAKiF,KAAyB,QAAA,UAAA,OAAAuI,EAAAjgB,UAAA8f,6BAErD,OAAA,SAAAS,GAAA,OAAAV,EAAA5f,WAAAC,YA1CkB,GA2CnBnC,EAYayiB,QAAO,WAAA,IAAAC,EAAAphB,EAAAC,IAAAC,MAAb,SAAAmhB,EAAArb,GAAA,IAAAsb,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1b,EAAAC,EAAAlB,OAAA,OAAA/E,IAAAI,eAAAuhB,GAAA,cAAAA,EAAArhB,KAAAqhB,EAAAphB,MAAA,OAac,OAbd8gB,EAAAtb,EACL6b,MAAUN,EAAAvb,EACV8b,KACAL,YADQD,EAAAxb,EACRyb,WAAY7jB,sBAAcmkB,IAAGP,EAC7BG,YAD6BD,EAAA1b,EAC7B2b,QAAShnB,kBAAUqnB,WAAUN,EAEvBzb,EAAQpK,EACRqK,EAAS,CACb2b,eAPGP,EAAG,GAAEA,EAQRQ,cAPEP,EAAG,EAACA,EAQNE,UAAAA,EACAE,OAAAA,GAEiBC,EAAAphB,OAEIrC,KAAKwH,QAAQC,QAAW,CAAEK,MAAAA,EAAOC,OAAAA,EAAQhL,KAFnD,SAE0D,OAA3D,OAAA0mB,EAAAlhB,gBACLwC,QAAQ+e,IADwDL,EAAAnhB,KAA/DyhB,KAED3W,eAAG,IAAA4W,EAAAniB,EAAAC,IAAAC,MACN,SAAAkiB,EAAOhP,GAAwB,IAAAuN,EAAAtN,EAAA,OAAApT,IAAAI,eAAAgiB,GAAA,cAAAA,EAAA9hB,KAAA8hB,EAAA7hB,MAAA,OAAA,GACxB4S,EAAIC,UAAQgP,EAAA7hB,OAAA,MAAA,OAAA6hB,EAAA3hB,gBACR4T,GACLlB,EACAgF,KACD,OAG+C,OAH/CiK,EAAA9hB,OAGKogB,EAAcI,iBAAe3N,EAAIC,UAASgP,EAAA7hB,OACnBwE,EAAKvC,KAAKyC,YAAYyb,GAAY,OACpB,OAArCtN,EAAWgJ,KAAK2E,MADFqB,EAAA5hB,MACuB4hB,EAAA3hB,gBACpC4T,GAAclB,EAAKC,IAAS,QAAA,GAAAgP,EAAA9hB,QAAA8hB,EAAA9F,GAAA8F,aAE/BA,EAAA9F,cAAe0E,oBAAeoB,EAAA7hB,QAAA,MAAA,OAAA6hB,EAAA3hB,gBACzB4T,GAAclB,EAAK+E,KAA8B,QAAA,OAAAkK,EAAA3hB,gBAEnD4T,GAAclB,EAAKiF,KAAyB,QAAA,UAAA,OAAAgK,EAAA1hB,UAAAyhB,qBAEtD,gBAAAE,GAAA,OAAAH,EAAAvhB,WAAAC,kBAEJ,OAAA,UAAA,OAAA+gB,EAAAjhB,UAAA0gB,YACF,OAAA,SAAAkB,GAAA,OAAAnB,EAAAxgB,WAAAC,YAvCmB,GAwCpBnC,EAaa8jB,eAAc,WAAA,IAAAC,EAAAziB,EAAAC,IAAAC,MAApB,SAAAwiB,EAAAC,GAAA,IAAAC,EAAAf,EAAAgB,EAAAf,EAAAgB,EAAArB,EAAAsB,EAAApB,EAAA7T,EAAA/M,EAAAtB,EAAAihB,EAAAza,EAAAC,EAAA8c,EAAA,OAAA/iB,IAAAI,eAAA4iB,GAAA,cAAAA,EAAA1iB,KAAA0iB,EAAAziB,MAAA,OAQwB,GAN7BqhB,YADee,EAAAD,EACfd,OAAQ,GAAEe,EACVd,YADUe,EAAAF,EACVb,MAAO,EAACe,EACRpB,YADQqB,EAAAH,EACRlB,WAAY7jB,sBAAcmkB,IAAGe,EAC7BnB,YAD6BoB,EAAAJ,EAC7BhB,QAASrlB,2BAAmB4mB,aAAYH,EAEpCjV,EAAQ,KACR/M,EAPW4hB,EAAf7P,kBAQWmQ,EAAAziB,QAAA,MAAA,GACJS,YAAUF,IAAQkiB,EAAAziB,QAAA,MAAA,OAAAyiB,EAAAziB,OACfrC,KAAKkI,KAAKvG,eAAc,OACU,GAAlCL,EAAWtB,KAAKkI,KAAKnH,eACd+jB,EAAAziB,QAAA,MAAA,MACL,IAAI3B,kBAAiB,QAAA,OAAAokB,EAAAziB,QAECf,EAASohB,YAAY9f,GAAQ,QAAtC,GAAf2f,EAAeuC,EAAAxiB,MACDwiB,EAAAziB,QAAA,MAAA,MACZ,IAAIsgB,2BAA0B,QAEtC/f,EAAU2f,EAAgB,QAE5B5S,EAAQ,CAAEsF,IAAKrS,EAAQ6d,eAAgB,QAUd,OARrB3Y,EAAQlK,EACRmK,EAAS,CACb4H,MAAAA,EACA+T,MAAAA,EACAC,KAAAA,EACAL,UAAAA,EACAE,OAAAA,GAEyBsB,EAAAziB,QAEKrC,KAAKwH,QAAQC,QAAW,CACtDK,MAAAA,EACAC,OAAAA,EACAhL,KALW,iBAMX,QAJmB,GAKQ,KALrB8nB,EAINC,EAAAxiB,KAJMuiB,eAKUvkB,QAAYwkB,EAAAziB,QAAA,MAAA,OAAAyiB,EAAAviB,gBACrB,IAAE,QAAA,OAAAuiB,EAAAviB,gBAEJwC,QAAQ+e,IACbe,EAAczX,KACZ,SAACiJ,GAAwB,OAAmBD,GAAeC,QAE9D,QAAA,UAAA,OAAAyO,EAAAtiB,UAAA+hB,YACF,OAAA,SAAAS,GAAA,OAAAV,EAAA7hB,WAAAC,YA/C0B,GAgD3BnC,EAca0kB,gBAAe,WAAA,IAAAC,EAAArjB,EAAAC,IAAAC,MAArB,SAAAojB,EAAAC,GAAA,IAAAnoB,EAAAooB,EAAA3B,EAAA4B,EAAA3B,EAAA4B,EAAAjC,EAAAkC,EAAAhC,EAAA7T,EAAA/M,EAAAtB,EAAAihB,EAAAza,EAAAC,EAAA0d,EAAA,OAAA3jB,IAAAI,eAAAwjB,GAAA,cAAAA,EAAAtjB,KAAAsjB,EAAArjB,MAAA,OASwB,GAP7BpF,EAAImoB,EAAJnoB,KACAymB,YADI2B,EAAAD,EACJ1B,OAAQ,GAAE2B,EACV1B,YADU2B,EAAAF,EACVzB,MAAO,EAAC2B,EACRhC,YADQiC,EAAAH,EACR9B,WAAY7jB,sBAAcmkB,IAAG2B,EAC7B/B,YAD6BgC,EAAAJ,EAC7B5B,QAASplB,uBAAeylB,WAAU2B,EAE9B7V,EAAQ,KACR/M,EARWwiB,EAAfzQ,kBASW+Q,EAAArjB,QAAA,MAAA,GACJS,YAAUF,IAAQ8iB,EAAArjB,QAAA,MAAA,OAAAqjB,EAAArjB,OACfrC,KAAKkI,KAAKvG,eAAc,OACU,GAAlCL,EAAWtB,KAAKkI,KAAKnH,eACd2kB,EAAArjB,QAAA,MAAA,MACL,IAAI3B,kBAAiB,QAAA,OAAAglB,EAAAtjB,QAAAsjB,EAAArjB,QAGGf,EAASohB,YAAY9f,GAAQ,QAAtC,GAAf2f,EAAemD,EAAApjB,MACDojB,EAAArjB,QAAA,MAAA,MACZ,IAAIsgB,2BAA0B,QAEtC/f,EAAU2f,EAAgBmD,EAAArjB,QAAA,MAAA,QAAA,MAAAqjB,EAAAtjB,QAAAsjB,EAAAtH,GAAAsH,YAEpB,IAAI/C,2BAAwB+C,EAAAtH,IAAG,QAGzCzO,EAAQ,CAAEsF,IAAKrS,EAAQ6d,eAAgB,QAab,OAXxBxjB,IACF0S,EAAK4E,KAAQ5E,GAAO1S,KAAMwB,GAAwB0P,IAAIlR,MAElD6K,EAAQjK,EACRkK,EAAS,CACb4H,MAAAA,EACA+T,MAAAA,EACAC,KAAAA,EACAL,UAAAA,EACAE,OAAAA,GAE0BkC,EAAArjB,QAEKrC,KAAKwH,QAAQC,QAAW,CACvDK,MAAAA,EACAC,OAAAA,EACAhL,KALW,kBAMX,QAJoB,GAAd0oB,EAINC,EAAApjB,KAJMmjB,gBAKWC,EAAArjB,QAAA,MAAA,OAAAqjB,EAAAnjB,gBACV,MAAI,QAAA,OAAAmjB,EAAAnjB,gBAENwC,QAAQ+e,IACb2B,EAAerY,KACb,SAAC4J,GAAkC,OACjCD,GAAgBC,QAErB,QAAA,UAAA,OAAA0O,EAAAljB,UAAA2iB,sBACF,OAAA,SAAAQ,GAAA,OAAAT,EAAAziB,WAAAC,YAxD2B,GA0D5BnC,EAaaqlB,WAAU,WAAA,IAAAC,EAAAhkB,EAAAC,IAAAC,MAAhB,SAAA+jB,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA7C,EAAA8C,EAAA5C,EAAApO,EAAAzF,EAAA7H,EAAAC,EAAAse,OAAA,OAAAvkB,IAAAI,eAAAokB,GAAA,cAAAA,EAAAlkB,KAAAkkB,EAAAjkB,MAAA,OAmBsB,OAbJ4jB,GANlBD,WAAAD,EAMgB,GAAEA,GALvBrC,MAAUwC,EAAAF,EACVrC,KACAL,YADQ6C,EAAAH,EACR1C,WAAY7jB,sBAAcmkB,IAAGuC,EAC7B3C,YAD6B4C,EAAAJ,EAC7BxC,QAAStlB,qBAAaqoB,UAASH,EAG3BzW,EAAQ,IAFZyF,EAAS4Q,EAAT5Q,aAIEzF,EAAQ,CAAE6W,0BAA2BpR,IAEjCtN,EAAQhK,EACRiK,EAAS,CACb4H,MAAAA,EACA+T,eAbGuC,EAAG,GAAEA,EAcRtC,cAbEuC,EAAG,EAACA,EAcN5C,UAAAA,EACAE,OAAAA,GAEyB8C,EAAAjkB,OAEGrC,KAAKwH,QAAQC,QAAW,CACpDK,MAAAA,EACAC,OAAAA,EACAhL,KALW,iBAMX,OAJiB,OAAAupB,EAAA/jB,gBAKZwC,QAAQ+e,IADbwC,EAAAhkB,KAJMmkB,YAMMrZ,eAAG,IAAAsZ,EAAA7kB,EAAAC,IAAAC,MACb,SAAA4kB,EACE9O,GAAsC,IAAA+O,EAAAC,EAAAC,EAAAjR,EAAAX,EAAAsN,EAAAuE,EAAA,OAAAjlB,IAAAI,eAAA8kB,GAAA,cAAAA,EAAA5kB,KAAA4kB,EAAA3kB,MAAA,OAElCukB,EAA0C,GAAEC,EAAAnL,EAC1B7D,EAAWC,UAAQ,OAAA,IAAAgP,EAAAD,KAAAjL,MAAAoL,EAAA3kB,QAAA,MACA,GAAnC6S,UADKW,EAAOiR,EAAA/K,OAEH7G,UAAQ8R,EAAA3kB,OAAA,MACnB6S,EAAWmF,GAA4B2M,EAAA3kB,QAAA,MAAA,OAGe,OAHf2kB,EAAA5kB,OAG/BogB,EAAcI,iBAAe/M,EAAQX,UAAS8R,EAAA3kB,QACvBgkB,EAAK/hB,KAAKyC,YAAYyb,GAAY,QACzDuE,EAAmB7I,KAAK2E,MADVmE,EAAA1kB,MAEpB4S,EAAW6R,EAAiBC,EAAA3kB,QAAA,MAAA,QAAA2kB,EAAA5kB,QAAA4kB,EAAA5I,GAAA4I,WAE5B9R,EAAWoF,GACP0M,EAAA5I,cAAe0E,oBACjB5N,EAAWiF,IACZ,QAGLyM,KAAkBK,OACbL,GACHnP,GAAoB5B,EAASX,KAC7B,QAAA8R,EAAA3kB,OAAA,MAAA,QAAA,OAAA2kB,EAAAzkB,gBAEGqV,GAAqBC,EAAY+O,IAAmB,QAAA,UAAA,OAAAI,EAAAxkB,UAAAmkB,qBAC5D,gBAAAO,GAAA,OAAAR,EAAAjkB,WAAAC,kBAEJ,QAAA,UAAA,OAAA4jB,EAAA9jB,UAAAsjB,YACF,OAAA,SAAAqB,GAAA,OAAAtB,EAAApjB,WAAAC,YA1DsB,GA2DvBnC,EAOa6mB,UAAS,WAAA,IAAAC,EAAAxlB,EAAAC,IAAAC,MAAf,SAAAulB,EAAgBpR,GAAqB,IAAApO,EAAA+P,EAAAG,EAAAwK,EAAAuE,EAAA9O,EAAAsP,EAAAC,EAAA,OAAA1lB,IAAAI,eAAAulB,GAAA,cAAAA,EAAArlB,KAAAqlB,EAAAplB,MAAA,OAEjB,OAAnByF,EAAQ/J,EAAW0pB,EAAAplB,OAEIrC,KAAKwH,QAAQC,QAAW,CACnDK,MAAAA,EACAC,OAAQ,CAAE4I,GAAIuF,GACdnZ,KANW,mBAOX,OAJgB,IAAV8a,EAIN4P,EAAAnlB,KAJMuV,YAOQC,SAAS,GAAG5C,UAAQuS,EAAAplB,QAAA,MAClC2V,EAAkBqC,GAA4BoN,EAAAplB,QAAA,MAAA,QAGuB,OAHvBolB,EAAArlB,QAGtCogB,EAAcI,iBAAe/K,EAAWC,SAAS,GAAG5C,UAASuS,EAAAplB,QACtCrC,KAAKsE,KAAKyC,YAAYyb,GAAY,QACzDuE,EAAmB7I,KAAK2E,MADV4E,EAAAnlB,MAEpB0V,EAAkB+O,EAAiBU,EAAAplB,QAAA,MAAA,QAAAolB,EAAArlB,QAAAqlB,EAAArJ,GAAAqJ,YAEnCzP,EAAkBsC,GACdmN,EAAArJ,cAAe0E,oBACjB9K,EAAkBmC,IACnB,QAAA,GAKAtC,EAAWC,SAAS,GAAGH,OAAO,GAAGzC,UAAQuS,EAAAplB,QAAA,MAC5C4V,EAAgB6C,GAA0B2M,EAAAplB,QAAA,MAAA,QAKvC,OALuColB,EAAArlB,QAGlCogB,EAAcI,iBAClB/K,EAAWC,SAAS,GAAGH,OAAO,GAAGzC,UAClCuS,EAAAplB,QAC4BrC,KAAKsE,KAAKyC,YAAYyb,GAAY,QACzDuE,EAAmB7I,KAAK2E,MADV4E,EAAAnlB,MAEpB2V,EAAgB8O,EAAiBU,EAAAplB,QAAA,MAAA,QAAAolB,EAAArlB,QAAAqlB,EAAA7I,GAAA6I,YAEjCxP,EAAgB8C,GACZ0M,EAAA7I,cAAekE,oBACjB7K,EAAgBsC,IACjB,QAAA,OAAAkN,EAAAllB,gBAGEwV,GAAaF,EAAYG,EAAiBC,IAAc,QAAA,UAAA,OAAAwP,EAAAjlB,UAAA8kB,8BAChE,OAAA,SAAAI,GAAA,OAAAL,EAAA5kB,WAAAC,YA9CqB,GA8CrBsY,GA7tBgC/S,IC9EtB0f,YAAe1M,GAAA,SAAA0M,IAAA,OAAA1M,EAAAxY,WAAAC,iBAAA6L,EAAAoZ,EAAA1M,GAAA,IAAA1a,EAAAonB,EAAAnnB,UAmXzB,OAlXDD,EAMOqnB,wBAAA,SACLnJ,EACA1W,GAEA,IAAKjF,YAAU2b,GACb,MAAM,IAAI1b,sBAEZ,IAAM7B,EAAUlB,KAAKkI,KAAKlH,iBACpBwc,EAAepB,gCAA8B1K,kBAE7Ca,WHmORxK,GAEA,MAAO,CACL4N,OAAQ5N,EAAOmO,cACf4C,eAAgB,CACdC,gBAAiBhR,EAAO8P,WACxBgB,WAAY9Q,EAAO8Q,YAErBF,YAAanE,YACXwM,kBAAgBC,OAAO,CAAC,aAAc,CAAClZ,EAAO0Z,WAEhD7I,YAAa7Q,EAAO6Q,YAAYxL,KAAI,SAAC8L,GACnC,OAAA3E,KAAY2E,GAAY2O,UAAW3O,EAAW2O,WAAa9S,oBG/OhD+S,CAAiC/f,GACxC4J,EAAW6L,EAAa/K,mBAAmB,oBAAqB,CACpEgM,EACAlM,IAGIwV,EAAc/nB,KAAK+nB,YAAYtJ,EAAY,CAC/C9O,MAAO8O,EACPxF,IAAKvP,GAAexI,GAAS8I,qBAC7BkP,WAAYhG,GAAYO,kBAIpBuU,EAAehoB,KAAKgoB,aAAavJ,EAAY,CACjD9O,MAAO8O,EACPxF,IAAKvP,GAAexI,GAAS8I,qBAC7BkP,WAAYhG,GAAYO,kBAE1B,MAAO,CACLsU,EACA,CACExQ,GAAI7N,GAAexI,GAAS8I,qBAC5B+R,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,IAEnBqW,IAEHznB,EAEM0nB,0BAAA,SACLxJ,EACA1W,GAEA,IAAM7G,EAAUlB,KAAKkI,KAAKlH,iBACpBwc,EAAepB,gCAA8B1K,kBAC7Ca,WHiNRxK,GAEA,MAAO,CACL4N,OAAQ5N,EAAOmO,cACf4C,eAAgB,CACdC,gBAAiBhR,EAAO8P,WACxBgB,WAAY9Q,EAAO8Q,YAErBD,YAAa7Q,EAAO6Q,YAAYxL,KAAI,SAAC8L,GACnC,OAAA3E,KAAY2E,GAAY2O,UAAW3O,EAAW2O,WAAa9S,oBG1NhDmT,CAAoCngB,GAC3C4J,EAAW6L,EAAa/K,mBAAmB,sBAAuB,CACtEgM,EACAlM,IAGIwV,EAAc/nB,KAAK+nB,YAAYtJ,EAAY,CAC/C9O,MAAO8O,EACPxF,IAAKvP,GAAexI,GAAS8I,qBAC7BkP,WAAYhG,GAAYO,kBAIpBuU,EAAehoB,KAAKgoB,aAAavJ,EAAY,CACjD9O,MAAO8O,EACPxF,IAAKvP,GAAexI,GAAS8I,qBAC7BkP,WAAYhG,GAAYO,kBAE1B,MAAO,CACLsU,EACA,CACExQ,GAAI7N,GAAexI,GAAS8I,qBAC5B+R,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,IAEnBqW,IAGJznB,EAQOwnB,YAAA,SACLtJ,EACA1W,GAEA,IAAQ4H,EAAe5H,EAAf4H,MAAOsJ,EAAQlR,EAARkR,IACf,IACGnW,YAAU6M,KAAW7M,YAAUmW,KAASnW,YAAU2b,GAEnD,MAAM,IAAI1b,sBAEZ,IAAM+c,EAAe/F,eAAarI,kBAC5Ba,EAAOyG,GACX,CACEC,IAAAA,EACAtJ,MAAAA,EACAuJ,WAAYnR,EAAOmR,aAIjBvH,EAAWmO,EAAarN,mBAAmB,QAASF,GAC1D,MAAO,CACLgF,GAAIkH,EACJ1C,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAGrBpR,EAQO4nB,yBAAA,SACL1J,EACA1W,GAEA,IAAQ4H,EAAe5H,EAAf4H,MAAOsJ,EAAQlR,EAARkR,IACf,IACGnW,YAAU6M,KAAW7M,YAAUmW,KAASnW,YAAU2b,GAEnD,MAAM,IAAI1b,sBAEZ,IAAM+c,EAAe/F,eAAarI,kBAC5Ba,WHgKRxK,GAEA,SAAAkf,OACKjO,GAA2B,CAC5BC,IAAKlR,EAAOkR,IACZtJ,MAAO5H,EAAO4H,MACduJ,WAAYnR,EAAOmR,cAErBnR,EAAO8f,YGxKMO,CACX,CACEnP,IAAAA,EACAtJ,MAAAA,EACAuJ,WAAYnR,EAAOmR,WACnB2O,UAAW9f,EAAO8f,YAIhBlW,EAAWmO,EAAarN,mBAC5B,qBACAF,GAEF,MAAO,CACLgF,GAAIkH,EACJ1C,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAGrBpR,EAQOynB,aAAA,SACLvJ,EACA1W,GAEA,IAAQ4H,EAAe5H,EAAf4H,MAAOsJ,EAAQlR,EAARkR,IACf,IACGnW,YAAU6M,KAAW7M,YAAUmW,KAASnW,YAAU2b,GAEnD,MAAM,IAAI1b,sBAEZ,IAAM+c,EAAe/F,eAAarI,kBAC5Ba,EAAOyG,GACX,CACEC,IAAAA,EACAtJ,MAAAA,EACAuJ,WAAYnR,EAAOmR,aAIjBvH,EAAWmO,EAAarN,mBAAmB,SAAUF,GAC3D,MAAO,CACLgF,GAAIkH,EACJ1C,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAGrBpR,EAQa8nB,eAAc,WAAA,IAAAC,EAAAzmB,EAAAC,IAAAC,MAApB,SAAAC,EAAqB+F,GAAsB,IAAAwP,EAAAgR,EAAAhG,EAAAlS,EAAAiB,EAAA,OAAAxP,IAAAI,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACX,GAAjCkV,EAAKxP,EAAO6R,sBACX9W,YAAUiF,EAAO6R,wBAAsBzX,EAAAE,OAAA,MAAA,OAAAF,EAAAE,cAAAkmB,EACZvoB,KAAKkI,KAAKtH,oBAAV2nB,EAAuB7F,YACnD3a,EAAO6R,uBACR,OAFoB,GAAf2I,EAAepgB,EAAAG,MAGDH,EAAAE,OAAA,MAAA,MACZ,IAAI4L,MAAM,eAAc,OAEhCsJ,EAAKgL,EAAgB,OAAApgB,EAAAic,GAGfrW,EAAO9K,KAAIkF,EAAAE,KAAAF,EAAAic,KACZ1e,kBAAU+W,UAAMtU,EAAAic,KAEhB1e,kBAAUmX,YAAK,MAAA,QAAA,OAAA1U,EAAAI,gBADX,CAAEgV,GAAAA,EAAIwE,MAAOhU,EAAO6M,OAAQtD,KAAM,IAAI4Q,aAAc,QAAA,GAEtDna,EAAO+M,cAAY3S,EAAAE,QAAA,MAAA,MAChB,IAAI4L,MAAM,gCAA+B,QAU/C,OAPIoC,EAAQ,IAAIpN,WAChB8E,EAAO+M,aACPhY,aAEIwU,EAAOjB,EAAMoC,mBAAmB,WAAY,CAChD1K,EAAO6R,sBACP7R,EAAO6M,SACPzS,EAAAI,gBACK,CACLgV,GAAIxP,EAAO+M,aACXiH,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWpB,KAClB,QAAA,MAEC,IAAIrD,MAAM,0BAAyB,QAAA,UAAA,OAAA9L,EAAAK,UAAAR,YAC1C,OAAA,SAAA4D,GAAA,OAAA0iB,EAAA7lB,WAAAC,YAnC0B,GAoC3BnC,EAQaioB,wBAAuB,WAAA,IAAAC,EAAA5mB,EAAAC,IAAAC,MAA7B,SAAAsD,EACLsP,EACAmI,GAAmB,IAAAla,EAAA8lB,EAAAnG,EAAAzC,EAAAvN,EAAAZ,EAAA,OAAA7P,IAAAI,eAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,OAEU,GAAzBO,EAAU+R,EACT7R,YAAU6R,IAAgBnP,EAAAnD,OAAA,MAAA,OAAAmD,EAAAnD,cAAAqmB,EACC1oB,KAAKkI,KAAKtH,oBAAV8nB,EAAuBhG,YACnD/N,GACD,OAFoB,GAAf4N,EAAe/c,EAAAlD,MAGDkD,EAAAnD,OAAA,MAAA,MACZ,IAAI4L,MAAM,eAAc,OAEhCrL,EAAU2f,EAAgB,OAK2C,OAFjEzC,EAAe/F,eAAarI,kBAC5Ba,EAAOkC,cAAYqI,GACnBnL,EAAWmO,EAAarN,mBAAmB,cAAe,CAACF,IAAM/M,EAAAjD,gBAChE,CACLgV,GAAI3U,EACJmZ,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAClB,QAAA,UAAA,OAAAnM,EAAAhD,UAAA6C,YACF,OAAA,SAAA8c,EAAAY,GAAA,OAAA0F,EAAAhmB,WAAAC,YAvBmC,GAwBpCnC,EAQOooB,gBAAA,SACLhU,EACAqI,GAEA,IACMrL,EADeoI,eAAarI,kBACJe,mBAAmB,YAAa,CAACuK,IAC/D,MAAO,CACLzF,GAAI5C,EACJoH,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAGrBpR,EAQOqoB,+BAAA,SACLjU,EACA5M,GAEA,IACM4J,EADeoI,eAAarI,kBACJe,mBAC5B,2BACA,CAAC1K,EAAO8gB,YAAa9gB,EAAO+gB,iBAAkB/gB,EAAOghB,cAEvD,MAAO,CACLxR,GAAI5C,EACJoH,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAGrBpR,EAQOyoB,4BAAA,SACLrU,EACAsU,GAEA,IACMtX,EADeoI,eAAarI,kBACJe,mBAAmB,wBAAyB,CACxEwW,IAEF,MAAO,CACL1R,GAAI5C,EACJoH,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAGrBpR,EAQO2oB,gBAAA,SACLvU,EACAwU,GAEA,IACMxX,EADeoI,eAAarI,kBACJe,mBAAmB,YAAa,CAC5D0W,IAEF,MAAO,CACL5R,GAAI5C,EACJoH,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAGrBpR,EAQO6oB,uBAAA,SACLzU,EACA5M,GAEA,IACM4J,EADeoI,eAAarI,kBACJe,mBAAmB,mBAAoB,CACnE1K,EAAOohB,sBACPphB,EAAOuJ,OAET,MAAO,CACLiG,GAAI5C,EACJoH,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAEpBgW,GAnXiC1f,ICZvBohB,YAAiBpO,GAAA,SAAAoO,IAAA,OAAApO,EAAAxY,WAAAC,iBAAA6L,EAAA8a,EAAApO,GAAA,IAAA1a,EAAA8oB,EAAA7oB,UAwH3B,OAvHDD,EAOa2a,UAAS,WAAA,IAAAoO,EAAAznB,EAAAC,IAAAC,MAAf,SAAAC,EAAgB+F,GAAuB,IAAAlH,EAAA6e,EAAAlE,EAAAC,EAAAE,EAAAhG,EAAAkG,EAAAK,EAAA,OAAApa,IAAAI,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACC,GAAvCxB,EAASb,KAAKkI,KAAK7G,sBAEvB0G,EAAOoT,cAAiBpT,EAAOoT,aAAaC,MAAM,kBAAgBjZ,EAAAE,OAAA,MAAA,MAE5D,IAAI4L,MAAM,gDAA+C,OAG3DyR,EAAcnE,sBAAoBha,QACtCvB,KAAKkI,KAAKjE,uBACVpD,GAEI2a,EAA4D,GAAEC,EAAAC,EAC/C3T,EAAO2N,SAAO,OAAA,IAAAiG,EAAAF,KAAAG,MAAAzZ,EAAAE,QAAA,MAC0B,OAArDwZ,EAAOC,sBAAoBva,SADxBoU,EAAMgG,EAAAI,OACiCpL,GAAI9P,GAAOsB,EAAAE,QAE9BwZ,EAAKI,gBAAe,QAA7B,OAAdC,EAAc/Z,EAAAG,KAAAH,EAAAE,QACQwZ,EAAK,2BAC/BK,GACD,QACDV,EAAuB9P,KAAK,CAC1BoN,eAAgB,CACdC,gBAAiB8C,EAAKjZ,QACtBiW,WANe1W,EAAAG,KAMW6Z,KAE5B7K,KAAMqE,EAAOrE,OACZ,QAAAnP,EAAAE,OAAA,MAAA,QAAA,OAAAF,EAAAE,QAGuBqd,EAAY6J,YAAYrO,UAClD,CACE9F,UAAWrN,EAAOoT,aAClBjG,SAAUT,cAAY1M,EAAO+U,aAC7BC,OAAQhV,EAAOiV,QAAU,GACzBC,iBAAkBlV,EAAOkV,kBAAoBlI,eAE/CyG,GACD,QARkB,OAAArZ,EAAAI,gBAUZvC,KAAKkI,KAAK1E,qBAVErB,EAAAG,KAUiCiB,aAAW,QAAA,UAAA,OAAApB,EAAAK,UAAAR,YAChE,OAAA,SAAA4D,GAAA,OAAA0jB,EAAA7mB,WAAAC,YAxCqB,GAyCtBnC,EAQO+d,QAAA,SACLvW,cAEMlH,EAASb,KAAKkI,KAAK7G,qBAEzB,GAAI0G,EAAO9K,OAASyC,kBAAU+W,QAAU1O,EAAO9K,OAASyC,kBAAUmX,MAChE,MAAM,IAAI2S,0BAGZ,IAAAhL,EAAsD9J,GACpD3M,GADiB6M,EAAM4J,KAAE1J,EAAY0J,KAAEE,EAASF,KAI5CkB,EAAc3F,eAAaxY,QAJhBid,KAIoC3d,GAE/C8e,EAA+B,GAKrC,OAJI7K,IAAiBC,gBACnB4K,EAAS5D,MAAQnH,GAGZ8K,EAAY6J,YAChBjL,QAAQxJ,EAAcF,EAAQ8J,EAAWiB,GACzCje,MAAK,SAAC+nB,GACL,OAAO3lB,EAAKoE,KAAK1E,qBAAqBimB,EAASlmB,gBAGrDhD,EAOaif,aAAY,WAAA,IAAAkK,EAAA7nB,EAAAC,IAAAC,MAAlB,SAAAsD,EACL0C,GAA0B,IAAAlH,EAAA4d,EAAAnd,EAAAihB,EAAAoH,EAAApkB,OAAA,OAAAzD,IAAAI,eAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,OAIK,GAFzBxB,EAASb,KAAKkI,KAAK7G,qBAGpByB,YADD2b,EAAa1W,EAAO0X,UACEja,EAAAnD,QAAA,MAAA,OAAAmD,EAAAnD,OAClBrC,KAAKkI,KAAKvG,eAAc,OACU,GAAlCL,EAAWtB,KAAKkI,KAAKnH,eACdyE,EAAAnD,OAAA,MAAA,MACL,IAAI3B,kBAAiB,OAAA,OAAA8E,EAAAnD,QAECf,EAASohB,YAAYjE,GAAW,QAAzC,GAAf8D,EAAe/c,EAAAlD,MACDkD,EAAAnD,QAAA,MAAA,MACZ,IAAIsgB,2BAA0B,QAEtClE,EAAa8D,EAAgB,QAO9B,OAJKoH,EAAW,IAAI1mB,WACnB8E,EAAO+M,aACPhY,EACA+D,GACD2E,EAAAjD,gBACMonB,EAASJ,YAAYrJ,QAC1BzB,EACA1W,EAAO6M,QACPlT,MAAK,SAAC+nB,GACN,OAAOlkB,EAAK2C,KAAK1E,qBAAqBimB,EAASlmB,gBAC/C,QAAA,UAAA,OAAAiC,EAAAhD,UAAA6C,YACH,OAAA,SAAA8c,GAAA,OAAAuH,EAAAjnB,WAAAC,YA9BwB,GA8BxB2mB,GAxHmCphB,ICWzB2hB,YAAe3O,GAAA,SAAA2O,IAAA,OAAA3O,EAAAxY,WAAAC,iBAAA6L,EAAAqb,EAAA3O,GAAA,IAAA1a,EAAAqpB,EAAAppB,UA6PzB,OA5PDD,EAKOqnB,wBAAA,SACLtW,GAEA,IAAMkM,EAAepB,gCAA8B1K,kBAC7CC,EAAWC,aAAWN,GACtBuY,EAAmBrM,EAAa1L,YAAY,qBAElD,OAAO4G,GADQ8E,EAAazL,mBAAmB8X,EAAkBlY,KAGnEpR,EAKO0nB,0BAAA,SACL3W,GAEA,IAAMkM,EAAepB,gCAA8B1K,kBAC7CC,EAAWC,aAAWN,GACtBuY,EAAmBrM,EAAa1L,YAAY,uBAElD,OAAO4G,GADQ8E,EAAazL,mBAAmB8X,EAAkBlY,KAGnEpR,EAOOwnB,YAAA,SAAYzW,GACjB,IAAMwO,EAAe/F,eAAarI,kBAC5BC,EAAWC,aAAWN,GACtBuY,EAAmB/J,EAAahO,YAAY,SAElD,OAAOqH,GADQ2G,EAAa/N,mBAAmB8X,EAAkBlY,KAGnEpR,EAOO4nB,yBAAA,SACL7W,GAEA,IL0QFC,EK1QQuO,EAAe/F,eAAarI,kBAC5BC,EAAWC,aAAWN,GACtBuY,EAAmB/J,EAAahO,YAAY,sBAElD,OLwQFyC,KACK4E,GAHL5H,EKvQiBuO,EAAa/N,mBAAmB8X,EAAkBlY,KL2QjEkW,UAAWtW,EAAO,MKxQpBhR,EAOOynB,aAAA,SAAa1W,GAClB,IAAMwO,EAAe/F,eAAarI,kBAC5BC,EAAWC,aAAWN,GACtBuY,EAAmB/J,EAAahO,YAAY,UAElD,OAAOqH,GADQ2G,EAAa/N,mBAAmB8X,EAAkBlY,KAGnEpR,EAOO8nB,eAAA,SACL9Q,EACAwE,EACAzK,GAGA,SAAKA,IAAAA,EAAMhR,OACT,MAAO,CACLrD,KAAMyC,kBAAU+W,OAChBmD,sBAAuBrC,EACvB3C,OAAQmH,GASZ,IAJA,IAIAS,IAAAsN,EAJmB,CAAC,CAClBnQ,cAAeja,kBAAUmX,MACzBhU,IAAK/F,IAE2B0f,EAAAsN,EAAAxpB,OAAAkc,IAAE,CAA/B,IAAMuN,EAASD,EAAAtN,GACZ7K,EAAWC,aAAWN,GACtBjB,EAAQ,IAAIpN,WAAS8R,cAAagV,EAAUlnB,eAC5CgnB,EAAmBxZ,EAAMyB,YAAY,YAE3C,OAAO2H,GACLlC,EACAwE,EAHa1L,EAAM0B,mBAAmB8X,EAAkBlY,GAKxDoY,EAAUpQ,eAGd,MAAM,IAAI1L,MAAM,0CAElB1N,EAOOypB,2BAAA,SAA2B1Y,GAChC,IAAMwO,EAAe/F,eAAarI,kBAC5BC,EAAWC,aAAWN,GACtBuY,EAAmB/J,EAAahO,YAAY,eAC5CP,EAASuO,EAAa/N,mBAAmB8X,EAAkBlY,GAC3DmL,EAAcmN,eAAa1Y,EAAO,IAExC,OADAqR,iBAAe9F,GACRA,GAETvc,EAOaioB,wBAAuB,WAAA,IAAAC,EAAA5mB,EAAAC,IAAAC,MAA7B,SAAAC,EAA8BsP,GAAgB,IAAAwO,EAAAnO,EAAAkY,EAAAtY,EAAAuL,EAAAoN,EAAA,OAAApoB,IAAAI,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAMR,OALrCyd,EAAe/F,eAAarI,kBAC5BC,EAAWC,aAAWN,GACtBuY,EAAmB/J,EAAahO,YAAY,eAC5CP,EAASuO,EAAa/N,mBAAmB8X,EAAkBlY,GAC3DmL,EAAcmN,eAAa1Y,EAAO,IAClC2Y,EAAUtH,iBAAe9F,GAAY3a,EAAAC,OAAAD,EAAAE,OAEZrC,KAAKsE,KAAKyC,YAAYmjB,GAAQ,OAAvC,OAAA/nB,EAAAI,gBACb2b,KAAK2E,MADQ1gB,EAAAG,OACa,QAAA,MAAAH,EAAAC,QAAAD,EAAAic,GAAAjc,WAE3B,IAAI8L,MAAM,gCAA+B,QAAA,UAAA,OAAA9L,EAAAK,UAAAR,qBAElD,OAAA,SAAA4D,GAAA,OAAA6iB,EAAAhmB,WAAAC,YAbmC,GAcpCnC,EAOOooB,gBAAA,SAAgBrX,GACrB,IAAMwO,EAAe/F,eAAarI,kBAC5BC,EAAWC,aAAWN,GACtBuY,EAAmB/J,EAAahO,YAAY,aAElD,OADegO,EAAa/N,mBAAmB8X,EAAkBlY,GACnD,IAEhBpR,EAOOqoB,+BAAA,SACLtX,GAEA,IAAMwO,EAAe/F,eAAarI,kBAC5BC,EAAWC,aAAWN,GACtBuY,EAAmB/J,EAAahO,YACpC,4BAEIP,EAASuO,EAAa/N,mBAAmB8X,EAAkBlY,GACjE,MAAO,CACLkX,YAAatX,EAAO,GACpBuX,iBAAkBvX,EAAO,GACzBwX,YAAaxX,EAAO,KAGxBhR,EAOOyoB,4BAAA,SACL1X,GAEA,IAAMwO,EAAe/F,eAAarI,kBAC5BC,EAAWC,aAAWN,GACtBuY,EAAmB/J,EAAahO,YACpC,yBAGF,OADegO,EAAa/N,mBAAmB8X,EAAkBlY,GACnD,IACfpR,EACM2oB,gBAAA,SAAgB5X,GACrB,IAAMwO,EAAe/F,eAAarI,kBAC5BC,EAAWC,aAAWN,GACtBuY,EAAmB/J,EAAahO,YACpC,aAGF,OADegO,EAAa/N,mBAAmB8X,EAAkBlY,GACnD,IAEhBpR,EAOO6oB,uBAAA,SACL9X,GAEA,IAAMwO,EAAe/F,eAAarI,kBAC5BC,EAAWC,aAAWN,GACtBuY,EAAmB/J,EAAahO,YACpC,oBAEIP,EAASuO,EAAa/N,mBAAmB8X,EAAkBlY,GACjE,MAAO,CACLwX,sBAAuB5X,EAAO,GAC9BD,KAAMoB,aAAWnB,EAAO,MAI5BhR,EAOO4pB,cAAA,SAAc7Y,GACnB,IACE,IAAMhL,EAAOwM,GAAoBxB,EAAMwI,IACvC,MAAO,CACLnJ,GAAIrK,EAAKuK,OAAO,WAChBuZ,aAAc9jB,EAAKvJ,KACnB4I,KAAMiM,aAAWN,GAAM2B,UAAU,EAAG,KAEtC,MAAAoX,GACA,OAAO,OAEVT,GA7PiC3hB,ICtBvBqiB,YAAOrP,GAMlB,SAAAqP,EAAYvqB,SAKsC,OAJhD+D,EAAAmX,EAAA3M,UAAMvO,UACDwqB,QAAU,IAAIvP,GAAcjb,GACjC+D,EAAK0mB,SAAW,IAAI7C,GAAe5nB,GACnC+D,EAAK2mB,SAAW,IAAIb,GAAe7pB,GACnC+D,EAAK4mB,WAAa,IAAIrB,GAAiBtpB,GAAS+D,EACjD,OAZiByK,EAAA+b,EAAArP,GAYjBqP,GAZyBriB,ICff0iB,GAAgCptB,MAAGC,KAAAA,GAAAC,sKCAnCmtB,GAAiCrtB,MAAGC,KAAAA,GAAAC,qpBA0CpCotB,GAAkCttB,MAAGI,KAAAA,GAAAF,ymBC1CrCqtB,GAAiCvtB,MAAGC,KAAAA,GAAAC,kOCyBjCstB,GACdnc,EACAsG,GAEA,IAAMnG,EAAY,IAAID,KACW,IAA/BE,SAASJ,EAASG,YAEdE,EAAU,IAAIH,KAAkC,IAA7BE,SAASJ,EAASK,UACrCuG,EAAe,IAAI1G,KACQ,IAA/BE,SAASJ,EAAS6G,YAEduV,EAAgBpc,EAASoc,cAC3B,IAAIlc,KAC+B,IAAnCE,SAASJ,EAASoc,gBAElB,KACJ,MAAO,CACLra,GAAIsa,uBAAqBrc,EAAS+B,IAClCsE,IAAK,CACHrS,QAASgM,EAASqG,IAAItE,GACtB5T,KAAM6R,EAASqG,IAAIG,WAErB8V,eAAgBtc,EAASuc,QACzBjW,SAAU,CACR9M,MAAO8M,EAAS9M,MAChBC,QAAS6M,EAAS7M,QAClBC,YAAa4M,EAAS5M,YACtBC,UAAW2M,EAAS3M,UACpB6iB,MAAOlW,EAASkW,OAElBrc,UAAAA,EACAE,QAAAA,EACAuG,aAAAA,EACA6V,gBAAiBzc,EAASyc,iBAAmB,KAC7CC,oBAAqBtc,SAASJ,EAAS0c,qBACvCN,cAAAA,EACAO,qBAAsBvc,SAASJ,EAAS2c,uBAAyB,KACjEC,QAAS5c,EAAS4c,QAAQpe,KACxB,SAACqe,GACC,MAAO,CACLna,KAAMoB,aAAW+Y,EAAOna,MACxBiG,GAAIkU,EAAOlU,GACXwE,MAAOnY,OAAO6nB,EAAO1P,WAI3BpV,OAAQgI,GAAsBC,GAC9B2C,OAAQ,CACNma,IAAK9c,EAAS8c,IAAM1c,SAASJ,EAAS8c,KAAO,EAC7CC,GAAI/c,EAAS+c,GAAK3c,SAASJ,EAAS+c,IAAM,EAC1CC,QAAShd,EAASgd,QAAU5c,SAASJ,EAASgd,SAAW,GAE3DC,SAAU,CACR7Z,iBAAkBC,cAAYrO,OAAOgL,EAASoD,kBAAmB,GACjEE,iBAAkBD,cACfrO,OAAOgL,EAASkd,gBAAkBloB,OAAO,KACxCA,OAAOgL,EAASmd,kBAClB,GAEFC,SAAUhd,SAASJ,EAASK,SAC1BD,SAASJ,EAASG,YAEtBkd,kBAAmBjd,SAASJ,EAASmd,kBACrCG,MAAOtd,EAASud,OAAO/e,KACrB,SAACgf,GACC,MAAO,CACLC,aAAcD,EAAMC,aACpBzpB,QAASwpB,EAAMA,MAAMxpB,QACrB0pB,KAAMntB,GAAsBgP,IAAIie,EAAMG,0BAMhCC,GACd5d,EACAsG,GAEA,IAAMnG,EAAY,IAAID,KACW,IAA/BE,SAASJ,EAASG,YAEdE,EAAU,IAAIH,KAAkC,IAA7BE,SAASJ,EAASK,UAC3C,MAAO,CACL0B,GAAIsa,uBAAqBrc,EAAS+B,IAClCsE,IAAK,CACHrS,QAASgM,EAASqG,IAAItE,GACtB5T,KAAM6R,EAASqG,IAAIG,WAErB8V,eAAgBtc,EAASuc,QACzBjW,SAAU,CACR9M,MAAO8M,EAAS9M,MAChBC,QAAS6M,EAAS7M,SAEpB0G,UAAAA,EACAE,QAAAA,EACAtI,OAAQgI,GAAsBC,GAC9B2C,OAAQ,CACNma,IAAK9c,EAAS8c,IAAM1c,SAASJ,EAAS8c,KAAO,EAC7CC,GAAI/c,EAAS+c,GAAK3c,SAASJ,EAAS+c,IAAM,EAC1CC,QAAShd,EAASgd,QAAU5c,SAASJ,EAASgd,SAAW,GAE3DM,MAAOtd,EAASud,OAAO/e,KACrB,SAACgf,GACC,MAAO,CACLC,aAAcD,EAAMC,aACpBzpB,QAASwpB,EAAMA,MAAMxpB,QACrB0pB,KAAMntB,GAAsBgP,IAAIie,EAAMG,qBCxCpCE,GASAC,GCxDAC,GAIAC,SCxBCC,YAAgC5R,GAAA,SAAA4R,IAAA,OAAA5R,EAAAxY,WAAAC,iBAAA6L,EAAAse,EAAA5R,GAE3C4R,EASOC,qBAAP,SACE/kB,EACA7G,GAEA,IAAMD,EAAcQ,aAAWP,GAASnE,KACxC,IAAK4C,GAAuBwB,SAASF,GACnC,MAAM,IAAIG,0BAAwBH,GAEpC,IAAA8rB,EAMIva,GAAyBzK,EAAOilB,gBAE9Brb,EAAWqP,kBAAgBC,OAC/B,CACE,+IACA,qBAEF,CACE,CAbQ8L,EAAVhc,WACgBgc,EAAhB/a,iBACgB+a,EAAhB7a,iBACW6a,EAAX5a,YACsB4a,EAAtB1a,wBAgBEtK,EAAOklB,YAIX,MAAO,CACLtc,GAAIjH,GAAezI,GAAamJ,sBAChCkH,KAAMoB,aAAWf,KAIrB,IAAApR,EAAAssB,EAAArsB,UAkFC,OAlFDD,EAQO2sB,2BAAA,SACLhX,EACAnO,GAEA,IAAKjF,YAAUoT,GACb,MAAM,IAAInT,sBAGZ,MAAO,CACLwU,GAAIrB,EACJ6F,MAAOnY,OAAO,GACd0N,KAAMgB,GAAiCvK,KAG3CxH,EAQO4sB,iBAAA,SAAiBjX,EAAuBkX,GAC7C,IAAKtqB,YAAUoT,GACb,MAAM,IAAInT,sBAEZ,QAA4B4Y,EAA5BF,EAAAC,EAAqB0R,KAAOzR,EAAAF,KAAAG,MAC1B,IAAK9Y,YADU6Y,EAAAI,OAEb,MAAM,IAAIhZ,sBAGd,IAEM4O,EAFkB0b,6BAA2B3b,kBAElBe,mBAC/B,eACA,CAAC2a,IAEH,MAAO,CACL7V,GAAIrB,EACJ6F,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAGrBpR,EAQO+sB,oBAAA,SACLpX,EACAkX,GAEA,IAAKtqB,YAAUoT,GACb,MAAM,IAAInT,sBAEZ,QAA4B+jB,EAA5BD,EAAAnL,EAAqB0R,KAAOtG,EAAAD,KAAAjL,MAC1B,IAAK9Y,YADUgkB,EAAA/K,OAEb,MAAM,IAAIhZ,sBAGd,IAEM4O,EAFkB0b,6BAA2B3b,kBAElBe,mBAC/B,kBACA,CAAC2a,IAEH,MAAO,CACL7V,GAAIrB,EACJ6F,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAEpBkb,GApIkD5kB,ICqDxCslB,YAA+BtS,GAAA,SAAAsS,IAAA,OAAAtS,EAAAxY,WAAAC,iBAAA6L,EAAAgf,EAAAtS,GAAA,IAAA1a,EAAAgtB,EAAA/sB,UAofzC,OAlfDD,EAOcitB,eAAP,SACLzlB,iJAOC,GALKlH,EAASiD,EAAKoE,KAAK7G,qBAEnBosB,EAAsBJ,6BAA2B9rB,QACrDwG,EAAOmO,cACPrV,UAIA6sB,EAAA3lB,EAAO4lB,mBAAPD,EAAwBptB,QACxByH,EAAO4lB,gBAAgBrtB,iBAAMstB,EAAK7lB,EAAOyjB,gBAAPoC,EAAgBttB,SAAM6B,EAAAE,OAAA,MAAA,MAElD,IAAI4L,MACR,2DACD,OAKgD,OAH7C4f,EAAkBC,oBAAkB/lB,EAAO4lB,iBAE3CI,UAAiBC,EAAAjmB,EAAOgH,kBAAPif,EAAkBne,YAAa,EAChDoe,UAAeC,EAAAnmB,EAAOkH,gBAAPif,EAAgBre,YAAa,EAAC1N,EAAAE,OAAA2Z,EAElCyR,EAAoBD,eACnC/Y,cAAY1M,EAAO+U,aACnB/U,EAAOyjB,SAAW,GAClBqC,EACA3tB,KAAK0P,MAAMme,EAAiB,KAC5B7tB,KAAK0P,MAAMqe,EAAe,KAC1BlmB,EAAOomB,aAAe,EACtBpmB,EAAOqmB,gBAAiB,IACzB,OAED,OAVMlR,EAAE/a,EAAAG,KAAAH,EAAAE,QAUF,CACJ6L,IAAKrP,8BAAsBse,SAC3B7F,OAAQ4F,EAAGvX,MACZ,QAAA,OAAAxD,EAAAE,QAAA2Z,EAEqBkB,EAAGE,QAAM,QAQ9B,GARKhN,EAAOjO,EAAAG,KACP+rB,EAA+BhB,6BAClC3b,kBAEGjB,EAAMN,GACVC,EACAie,EACA,oBAGMlsB,EAAAE,QAAA,MAAA,MACA,IAAIisB,wBAAuB,QAIY,GADzC1Q,EAAYyQ,EAA6BxQ,SAASpN,GAClD+G,EAAaoG,EAAUrL,KAAiB,YAC/BpQ,EAAAE,QAAA,MAAA,MACP,IAAIisB,wBAAuB,QAGnC,OAHmCnsB,EAAAE,QAG7B,CACJ6L,IAAKrP,8BAAsBif,KAC3BtG,WAAY+W,mBAAiBxmB,EAAOmO,cAAesY,OAAOhX,KAC3D,QAAA,UAAA,OAAArV,EAAAK,UAAAR,UAGHzB,EAOayd,YAAW,WAAA,IAAAC,EAAApc,EAAAC,IAAAC,MAAjB,SAAAsD,EAAkB0C,GAAwB,IAAA/B,EAAA,OAAAlE,IAAAI,eAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,OAAA,OAAAmD,EAAApD,OAAAoD,EAAAnD,OAE3BrC,KAAKsE,KAAKa,IAAI+Y,KAAKC,UAAUpW,IAAQ,OAA9C,OAAH/B,EAAGR,EAAAlD,KAAAkD,EAAAnD,OACHrC,KAAKsE,KAAKuB,IAAIG,GAAI,OAAA,OAAAR,EAAAjD,0BACPyD,GAAG,OAAA,MAAAR,EAAApD,OAAAoD,EAAA4Y,GAAA5Y,WAEd,IAAI6Y,eAAY7Y,EAAA4Y,IAAG,QAAA,UAAA,OAAA5Y,EAAAhD,UAAA6C,oBAE5B,OAAA,SAAAO,GAAA,OAAAqY,EAAAxb,WAAAC,YARuB,GASxBnC,EAOckuB,aAAP,SACL1mB,6HASC,OAPKlH,EAAS0E,EAAK2C,KAAK7G,qBAAoBqtB,EAEfC,mBAAiB5mB,EAAOyP,YAA/B7G,EAAE+d,EAAF/d,GAEjB8c,EAAsBJ,6BAA2B9rB,QAFlCmtB,EAAbxY,cAINrV,GACD0d,EAAAlc,OAAA2Z,EAEgByR,EAAoBnB,KACnC3b,EACA5I,EAAOukB,MACP,IACD,OAED,OANMpP,EAAEqB,EAAAjc,KAAAic,EAAAlc,OAMF,CACJ6L,IAAKpP,yBAAiB8vB,OACtBtX,OAAQ4F,EAAGvX,MACZ,OAAA,OAAA4Y,EAAAlc,QAAA2Z,EAEKkB,EAAGE,QAAM,QAEf,OAFemB,EAAAlc,QAET,CACJ6L,IAAKpP,yBAAiBgf,MACvB,QAAA,UAAA,OAAAS,EAAA/b,UAAAwd,UAGHzf,EAOcsuB,gBAAP,SACLrX,6HASC,OAPK3W,EAASiF,EAAKoC,KAAK7G,qBAAoBytB,EAEfH,mBAAiBnX,GAAxB7G,EAAEme,EAAFne,GAEjB8c,EAAsBJ,6BAA2B9rB,QAFlCutB,EAAb5Y,cAINrV,GACDof,EAAA5d,OAAA2Z,EACgByR,EAAoBsB,QAAQpe,IAAG,OAEhD,OAFMuM,EAAE+C,EAAA3d,KAAA2d,EAAA5d,OAEF,CACJ6L,IAAKnP,4BAAoBiwB,UACzB1X,OAAQ4F,EAAGvX,MACZ,OAAA,OAAAsa,EAAA5d,QAAA2Z,EACKkB,EAAGE,QAAM,QACf,OADe6C,EAAA5d,QACT,CACJ6L,IAAKnP,4BAAoB+e,MAC1B,QAAA,UAAA,OAAAmC,EAAAzd,UAAA+d,UAEHhgB,EAOcoa,oBAAP,SACL5S,+IAe0D,GAbpDlH,EAASoF,EAAKiC,KAAK7G,qBACnBJ,EAAcgF,EAAKiC,KAAKlH,iBAExBsgB,EAAclF,gCAA8B7a,QAChDmI,GAAezI,GAAa+I,qBAC5BnJ,GAGIouB,EAAgCnT,sBAAoBva,QACxDmI,GAAezI,GAAamJ,sBAC5BvJ,GAGEgY,EAAqC9Q,EAAO8Q,WAC3C9Q,EAAO8Q,YAAU2H,EAAAne,QAAA,MAAA,OAAAme,EAAAne,OAAA2Z,EACQiT,EACzB,6BACCvlB,GAAezI,GAAayJ,yBAC7B,OACHmO,EAAa,CACX9C,OALImZ,EAAa1O,EAAAle,MAKI6Z,IAAIpG,MACzBF,QAASqZ,EAAc/S,IAAItG,SAC3B,QAKJ,OAFMsZ,EAAqCtC,GACxCC,qBAAqB/kB,EAAO8jB,SAAU5qB,GACzCuf,EAAAne,QAAA2Z,EACiBsF,EAAY3G,oBAC3B5S,EAAO4M,gBACP,CACEmE,eAAgB,CACdC,gBAAiBrP,GAAezI,GAAamJ,sBAC7CyO,WAAYA,GAEdvH,KAAM6d,EAAmC7d,QAE5C,QAED,OAXM4L,EAAEsD,EAAAle,KAAAke,EAAAne,QAWF,CACJ6L,IAAKlP,gCAAwB0iB,UAC7BpK,OAAQ4F,EAAGvX,MACZ,QAAA,OAAA6a,EAAAne,QAAA2Z,EAEqBkB,EAAGE,QAAM,QAO9B,GAPKhN,EAAOoQ,EAAAle,KACP8sB,EAAuBhT,gCAC1B1K,kBACGjB,EAAMN,GACVC,EACAgf,EACA,yBAEM5O,EAAAne,QAAA,MAAA,MACA,IAAIisB,wBAAuB,QAK0B,GAFvD1Q,EAAYwR,EAAqBvR,SAASpN,GAE1C4e,EAAoBzR,EAAUrL,KAAwB,mBADtD2D,EAAgB0H,EAAUrL,KAAa,SAEtB8c,GAAiB7O,EAAAne,QAAA,MAAA,MAChC,IAAIitB,qCAAoC,QAEhD,OAFgD9O,EAAAne,QAE1C,CACJ6L,IAAKlP,gCAAwB8e,KAC7B5H,cAAAA,EACA2B,WAAYnO,GAAezI,GAAamJ,sBACxCyO,WAAYA,EACZD,YAAayW,EAAkBzW,YAC/B6I,QAAS4N,EAAkB5N,SAC5B,QAAA,UAAA,OAAAjB,EAAAhe,UAAAqf,UAGHthB,EAOagvB,QAAO,WAAA,IAAAC,EAAA3tB,EAAAC,IAAAC,MAAb,SAAAigB,EAAcja,GAAqB,IAAAlH,EAAA4uB,EAAA9e,EAAA8c,EAAA,OAAA3rB,IAAAI,eAAA+f,GAAA,cAAAA,EAAA7f,KAAA6f,EAAA5f,MAAA,OAQvC,OAPKxB,EAASb,KAAKkI,KAAK7G,qBAAoBouB,EAEfd,mBAAiB5mB,EAAOyP,YAA/B7G,EAAE8e,EAAF9e,GAEjB8c,EAAsBJ,6BAA2B9rB,QAFlCkuB,EAAbvZ,cAINrV,GACDohB,EAAA1f,gBACMkrB,EAAoB9Q,WAAW4S,QACpC5e,EACA5I,EAAO2nB,kBACP3nB,EAAOukB,OACR,OAAA,UAAA,OAAArK,EAAAzf,UAAAwf,YACF,OAAA,SAAAG,GAAA,OAAAqN,EAAA/sB,WAAAC,YAdmB,GAepBnC,EAOaovB,WAAU,WAAA,IAAAC,EAAA/tB,EAAAC,IAAAC,MAAhB,SAAAugB,EACL9K,GAAkB,IAAA3W,EAAAgvB,EAAAlf,EAAA8c,EAAA,OAAA3rB,IAAAI,eAAAugB,GAAA,cAAAA,EAAArgB,KAAAqgB,EAAApgB,MAAA,OASjB,OAPKxB,EAASb,KAAKkI,KAAK7G,qBAAoBwuB,EAEflB,mBAAiBnX,GAAxB7G,EAAEkf,EAAFlf,GAEjB8c,EAAsBJ,6BAA2B9rB,QAFlCsuB,EAAb3Z,cAINrV,GACD4hB,EAAAlgB,gBAEMkrB,EAAoBkC,WAAWhf,IAAG,OAAA,UAAA,OAAA8R,EAAAjgB,UAAA8f,YAC1C,OAAA,SAAAS,GAAA,OAAA6M,EAAAntB,WAAAC,YAbsB,GAcvBnC,EAQauvB,WAAU,WAAA,IAAAC,EAAAluB,EAAAC,IAAAC,MAAhB,SAAAkiB,EAAiB/N,GAAqB,IAAApO,EAAAC,EAAA,OAAAjG,IAAAI,eAAAgiB,GAAA,cAAAA,EAAA9hB,KAAA8hB,EAAA7hB,MAAA,OAAA,GACtCS,YAAUoT,IAAcgO,EAAA7hB,OAAA,MAAA,MACrB,IAAIU,sBAAqB,OAMa,OAJxC+E,EAAQ6iB,GACR5iB,EAAS,CACbnF,QAASsT,EAAcuK,eAEqByD,EAAA7hB,OAEJrC,KAAKwH,QAAQC,QAAW,CAChEK,MAAAA,EACAC,OAAAA,EACAhL,KALW,oCAMX,OAJ6B,OAAAmnB,EAAA3hB,gBAI7B2hB,EAAA5hB,KAJM0tB,wBAKuB5C,QAAQhgB,KAAI,SACzC6iB,GAA2B,OACxBA,EAAOrtB,YAAQ,QAAA,UAAA,OAAAshB,EAAA1hB,UAAAyhB,YACrB,OAAA,SAAAG,GAAA,OAAA2L,EAAAttB,WAAAC,YAlBsB,GAmBvBnC,EAOa2vB,YAAW,WAAA,IAAAC,EAAAtuB,EAAAC,IAAAC,MAAjB,SAAAmhB,EACL1L,GAAkB,IAAA4Y,EAAAtoB,EAAAC,EAAAsoB,EAAA7N,EAAAtN,EAAA,OAAApT,IAAAI,eAAAuhB,GAAA,cAAAA,EAAArhB,KAAAqhB,EAAAphB,MAAA,OAAA,GAEbiuB,eAAa9Y,IAAWiM,EAAAphB,OAAA,MAAA,MACrB,IAAIkuB,yBAAwB,OAOK,OALnCH,EAAqBI,wBAAsBhZ,GAC3C1P,EAAQ8iB,GACR7iB,EAAS,CACbyP,WAAY4Y,GAE2B3M,EAAAphB,OAEGrC,KAAKwH,QAAQC,QAAW,CAClEK,MAAAA,EACAC,OAAAA,EACAhL,KALW,+BAMX,OAJ+B,GAAzBszB,EAIN5M,EAAAnhB,KAJM+tB,2BAKsB5M,EAAAphB,QAAA,MAAA,OAAAohB,EAAAlhB,gBACrB,MAAI,QAAA,GACD8tB,EAA0Bnb,UAAQuO,EAAAphB,QAAA,MAAA,OAAAohB,EAAAlhB,gBACrCwoB,GACLsF,EACA7nB,KACD,QAGqE,OAHrEib,EAAArhB,QAGKogB,EAAcI,iBAAeyN,EAA0Bnb,UAASuO,EAAAphB,QACzCrC,KAAKsE,KAAKyC,YAAYyb,GAAY,QACA,OAAzDtN,EAAWgJ,KAAK2E,MADFY,EAAAnhB,MAC2CmhB,EAAAlhB,gBACxDwoB,GAA4BsF,EAA2Bnb,IAAS,QAAA,GAAAuO,EAAArhB,QAAAqhB,EAAArF,GAAAqF,cAGnEA,EAAArF,cAAe0E,oBAAeW,EAAAphB,QAAA,MAAA,OAAAohB,EAAAlhB,gBACzBwoB,GACLsF,EACAloB,KACD,QAAA,OAAAsb,EAAAlhB,gBAEIwoB,GACLsF,EACA5nB,KACD,QAAA,UAAA,OAAAgb,EAAAjhB,UAAA0gB,sBAEJ,OAAA,SAAAiB,GAAA,OAAAgM,EAAA1tB,WAAAC,YA5CuB,GA8CxBnC,EAcakwB,aAAY,WAAA,IAAAC,EAAA7uB,EAAAC,IAAAC,MAAlB,SAAAojB,EAAAtd,GAAA,IAAAsb,EAAAO,EAAA/c,EAAAyc,EAAAO,EAAAN,EAAAC,EAAAC,EAAAC,EAAA7T,EAAA/M,EAAAtB,EAAAihB,EAAAza,EAAAC,EAAAlB,OAAA,OAAA/E,IAAAI,eAAAwjB,GAAA,cAAAA,EAAAtjB,KAAAsjB,EAAArjB,MAAA,OASwB,GAP7BqhB,YADeP,EAAAtb,EACf6b,OAAQ,GAAEP,EACVxc,EAAMkB,EAANlB,OACAgd,YADMP,EAAAvb,EACN8b,MAAO,EAACP,EACRE,YADQD,EAAAxb,EACRyb,WAAY7jB,sBAAcmkB,IAAGP,EAC7BG,YAD6BD,EAAA1b,EAC7B2b,QAASjkB,uBAAeskB,WAAUN,EAE9B5T,EAAQ,KACR/M,EARWiF,EAAf8M,kBASW+Q,EAAArjB,QAAA,MAAA,GACJS,YAAUF,IAAQ8iB,EAAArjB,QAAA,MAAA,OAAAqjB,EAAArjB,OACfrC,KAAKkI,KAAKvG,eAAc,OACU,GAAlCL,EAAWtB,KAAKkI,KAAKnH,eACd2kB,EAAArjB,QAAA,MAAA,MACL,IAAI3B,kBAAiB,QAAA,OAAAglB,EAAAtjB,QAAAsjB,EAAArjB,QAGGf,EAASohB,YAAY9f,GAAQ,QAAtC,GAAf2f,EAAemD,EAAApjB,MACDojB,EAAArjB,QAAA,MAAA,MACZ,IAAIsgB,2BAA0B,QAEtC/f,EAAU2f,EAAgBmD,EAAArjB,QAAA,MAAA,QAAA,MAAAqjB,EAAAtjB,QAAAsjB,EAAAtH,GAAAsH,YAEpB,IAAI/C,2BAA0B,QAGxChT,EAAQ,CAAEsF,IAAKrS,EAAQ6d,eAAgB,QAcC,OAZtC9Z,IACFgJ,EAAK4E,KAAQ5E,EAAUD,GAA4B/I,KAG/CmB,EAAQ+iB,GACR9iB,EAAS,CACb4H,MAAAA,EACA+T,MAAAA,EACAC,KAAAA,EACAL,UAAAA,EACAE,OAAAA,GAEwCkC,EAAArjB,QAIGrC,KAAKwH,QAAQC,QAAW,CACnEK,MAAAA,EACAC,OAAAA,EACAhL,KAPW,gCAQX,QAJgC,OAAA2oB,EAAAnjB,gBAK3BwC,QAAQ+e,IADb4B,EAAApjB,KAJMquB,2BAMqBvjB,eAAG,IAAA4W,EAAAniB,EAAAC,IAAAC,MAC5B,SAAAwiB,EACE3V,GAAmD,IAAA4T,EAAAtN,EAAA,OAAApT,IAAAI,eAAA4iB,GAAA,cAAAA,EAAA1iB,KAAA0iB,EAAAziB,MAAA,OAAA,GAG9CuM,EAASsG,UAAQ4P,EAAAziB,OAAA,MAAA,OAAAyiB,EAAAviB,gBACbiqB,GACL5d,EACApG,KACD,OAGoD,OAHpDsc,EAAA1iB,OAGKogB,EAAcI,iBAAehU,EAASsG,UAAS4P,EAAAziB,OACxBwE,EAAKvC,KAAKyC,YAAYyb,GAAY,OACA,OAAzDtN,EAAWgJ,KAAK2E,MADFiC,EAAAxiB,MAC2CwiB,EAAAviB,gBACxDiqB,GAAoC5d,EAAUsG,IAAS,QAAA,GAAA4P,EAAA1iB,QAAA0iB,EAAA1G,GAAA0G,aAE1DA,EAAA1G,cAAe0E,oBAAegC,EAAAziB,QAAA,MAAA,OAAAyiB,EAAAviB,gBACzBiqB,GACL5d,EACAzG,KACD,QAAA,OAAA2c,EAAAviB,gBAEIiqB,GACL5d,EACAnG,KACD,QAAA,UAAA,OAAAqc,EAAAtiB,UAAA+hB,qBAEJ,gBAAAoB,GAAA,OAAA3B,EAAAvhB,WAAAC,kBAEJ,QAAA,UAAA,OAAAgjB,EAAAljB,UAAA2iB,sBACF,OAAA,SAAAH,GAAA,OAAA0L,EAAAjuB,WAAAC,YAlFwB,GAoFzBnC,EAOaqwB,kBAAiB,WAAA,IAAAC,EAAAhvB,EAAAC,IAAAC,MAAvB,SAAA4kB,EACLzQ,GAAqB,IAAApO,EAAAC,EAAAioB,EAAA,OAAAluB,IAAAI,eAAA8kB,GAAA,cAAAA,EAAA5kB,KAAA4kB,EAAA3kB,MAAA,OAAA,GAEhBS,YAAUoT,IAAc8Q,EAAA3kB,OAAA,MAAA,MACrB,IAAIU,sBAAqB,OAMQ,OAJnC+E,EAAQgjB,GACR/iB,EAAS,CACbnF,QAASsT,EAAcuK,eAEgBuG,EAAA3kB,OAECrC,KAAKwH,QAAQC,QAAW,CAChEK,MAAAA,EACAC,OAAAA,EACAhL,KALW,+BAMX,OAJ6B,GAAvBizB,EAINhJ,EAAA1kB,KAJM0tB,yBAKoBhJ,EAAA3kB,QAAA,MAAA,OAAA2kB,EAAAzkB,gBACnB,MAAI,QAAA,OAAAykB,EAAAzkB,gBAEN,CACL4P,YAAanD,SAASghB,EAAwB7d,aAC9CH,iBAAkBC,cAChBrO,OAAOosB,EAAwBhe,kBAC/B,GAEFE,iBAAkBD,cAChBrO,OAAOosB,EAAwB9d,kBAC/B,GAEFG,uBAAwBzO,OACtBosB,EAAwB3d,wBAE1BtB,WAAYif,EAAwBjf,aACrC,QAAA,UAAA,OAAAiW,EAAAxkB,UAAAmkB,YACF,OAAA,SAAAQ,GAAA,OAAA0J,EAAApuB,WAAAC,YAnC6B,GAmC7B6qB,GApfiDtlB,IC1EvC6R,GAA0C,CACrDrI,8BAA4BC,kBAAkBI,YAC5C,wBAECjB,OAAO,WACVwc,6BAA2B3b,kBAAkBI,YAAY,gBACtDjB,OAAO,WACVwc,6BAA2B3b,kBAAkBI,YAC3C,mBACAjB,OAAO,YCCEigB,YAAgC7V,GAAA,SAAA6V,IAAA,OAAA7V,EAAAxY,WAAAC,iBAAA6L,EAAAuiB,EAAA7V,GAAA,IAAA1a,EAAAuwB,EAAAtwB,UAkE1C,OAhEDD,EAOO2sB,2BAAA,SAA2B5b,GAChC,OAAOD,GAAiCC,IAE1C/Q,EAOO4sB,iBAAA,SAAiB7b,GACtB,IAAME,EAAkB6b,6BAA2B3b,kBAC7CC,EAAWC,aAAWN,GACtBO,EAAmBL,EAAgBM,YAAY,gBAKrD,OAJeN,EAAgBO,mBAC7BF,EACAF,GAEY,IAEhBpR,EAOO+sB,oBAAA,SAAoBhc,GACzB,IAAME,EAAkB6b,6BAA2B3b,kBAC7CC,EAAWC,aAAWN,GACtBO,EAAmBL,EAAgBM,YACvC,mBAMF,OAJeN,EAAgBO,mBAC7BF,EACAF,GAEY,IAEhBpR,EAOO4pB,cAAA,SAAc7Y,GACnB,IACE,IAAMhL,EAAOwM,GAAoBxB,EAAMwI,IACvC,MAAO,CACLnJ,GAAIrK,EAAKuK,OAAO,WAChBuZ,aAAc9jB,EAAKvJ,KACnB4I,KAAMiM,aAAWN,GAAM2B,UAAU,EAAG,KAEtC,MAAA8d,GACA,OAAO,OAEVD,GAlEkD7oB,ICDxC+oB,YAAkC/V,GAAA,SAAA+V,IAAA,OAAA/V,EAAAxY,WAAAC,iBAAA6L,EAAAyiB,EAAA/V,GAAA,IAAA1a,EAAAywB,EAAAxwB,UAkG5C,OAhGDD,EAOaitB,eAAc,WAAA,IAAAyD,EAAApvB,EAAAC,IAAAC,MAApB,SAAAC,EACL+F,GAA0C,IAAA2lB,EAAAE,EAAAI,EAAAE,EAAArtB,EAAA4sB,EAAAI,EAAAE,EAAAE,EAAA,OAAAnsB,IAAAI,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAOzC,GALKxB,EAASb,KAAKkI,KAAK7G,qBAEnBosB,EAAsBJ,6BAA2B9rB,QACrDwG,EAAOmO,cACPrV,UAIA6sB,EAAA3lB,EAAO4lB,mBAAPD,EAAwBptB,QACxByH,EAAO4lB,gBAAgBrtB,iBAAMstB,EAAK7lB,EAAOyjB,gBAAPoC,EAAgBttB,SAAM6B,EAAAE,OAAA,MAAA,MAElD,IAAI4L,MACR,2DACD,OAKgD,OAH7C4f,EAAkBC,oBAAkB/lB,EAAO4lB,iBAE3CI,UAAiBC,EAAAjmB,EAAOgH,kBAAPif,EAAkBne,YAAa,EAChDoe,UAAeC,EAAAnmB,EAAOkH,gBAAPif,EAAgBre,YAAa,EAAC1N,EAAAE,OAErBorB,EAAoBlE,YAC/CiE,eACC/Y,cAAY1M,EAAO+U,aACnB/U,EAAOyjB,SAAW,GAClBqC,EACA3tB,KAAK0P,MAAMme,EAAiB,KAC5B7tB,KAAK0P,MAAMqe,EAAe,KAC1BlmB,EAAOomB,aAAe,EACtBpmB,EAAOqmB,gBAAiB,GACzB,OATkB,OAAAjsB,EAAAI,gBAUdvC,KAAKkI,KAAK1E,qBAVIrB,EAAAG,KAUiCiB,aAAW,QAAA,UAAA,OAAApB,EAAAK,UAAAR,YAClE,OAAA,SAAA4D,GAAA,OAAAqrB,EAAAxuB,WAAAC,YAlC0B,GAoC3BnC,EAOakuB,aAAY,WAAA,IAAAyC,EAAArvB,EAAAC,IAAAC,MAAlB,SAAAsD,EACL0C,GAA0B,IAAAlH,EAAA6tB,EAAA/d,EAAA8c,EAAA,OAAA3rB,IAAAI,eAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,OAWzB,OATKxB,EAASb,KAAKkI,KAAK7G,qBAAoBqtB,EAEfC,mBAC5B5mB,EAAOyP,YADc7G,EAAE+d,EAAF/d,GAIjB8c,EAAsBJ,6BAA2B9rB,QAJlCmtB,EAAbxY,cAMNrV,GACD2E,EAAAnD,OAEwBorB,EAAoBlE,YAAY+C,KACvD3b,EACA5I,EAAOukB,MACP,GACD,OAJe,OAAA9mB,EAAAjD,gBAKTvC,KAAKkI,KAAK1E,qBALDgC,EAAAlD,KAKiCiB,aAAW,OAAA,UAAA,OAAAiC,EAAAhD,UAAA6C,YAC7D,OAAA,SAAA8c,GAAA,OAAA+O,EAAAzuB,WAAAC,YApBwB,GAsBzBnC,EAOasuB,gBAAe,WAAA,IAAAsC,EAAAtvB,EAAAC,IAAAC,MAArB,SAAAie,EACLxI,GAAkB,IAAA3W,EAAAiuB,EAAAne,EAAA8c,EAAA,OAAA3rB,IAAAI,eAAAqc,GAAA,cAAAA,EAAAnc,KAAAmc,EAAAlc,MAAA,OAWjB,OATKxB,EAASb,KAAKkI,KAAK7G,qBAAoBytB,EAEfH,mBAC5BnX,GADqB7G,EAAEme,EAAFne,GAIjB8c,EAAsBJ,6BAA2B9rB,QAJlCutB,EAAb5Y,cAMNrV,GACD0d,EAAAlc,OACwBorB,EAAoBlE,YAAYwF,QACvDpe,GACD,OAFe,OAAA4N,EAAAhc,gBAGTvC,KAAKkI,KAAK1E,qBAHD+a,EAAAjc,KAGiCiB,aAAW,OAAA,UAAA,OAAAgb,EAAA/b,UAAAwd,YAC7D,OAAA,SAAA+C,GAAA,OAAAoO,EAAA1uB,WAAAC,YAjB2B,GAiB3BsuB,GAlGoD/oB,ICQ1CmpB,YAAwBnW,GAOnC,SAAAmW,EAAYrxB,SAKuD,OAJjE+D,EAAAmX,EAAA3M,UAAMvO,UACDwqB,QAAU,IAAIgD,GAA+BxtB,GAClD+D,EAAK0mB,SAAW,IAAIqC,GAAgC9sB,GACpD+D,EAAK2mB,SAAW,IAAIqG,GAAgC/wB,GACpD+D,EAAK4mB,WAAa,IAAIsG,GAAkCjxB,GAAS+D,EAClE,OAbkCyK,EAAA6iB,EAAAnW,GAalCmW,GAb0CnpB,IAepCmpB,YAAW,CAUhBtE,qBAAsB,SACpB/kB,EACA7G,GAA+B,gBAA/BA,IAAAA,EAAsB,WAEtB2rB,GAAgCC,qBAAqB/kB,EAAQ7G,MP0CvDurB,GAAAA,yBAAAA,gDAEVA,gBAOUC,GAAAA,2BAAAA,sDAEVA,eC1DF,SAAYC,GACVA,qBACAA,uBAFF,CAAYA,KAAAA,QAIZ,SAAYC,GACVA,wBACAA,0BAFF,CAAYA,KAAAA,QOhDL,aAAMyE,GAA2B9zB,MAAGC,KAAAA,GAAAC,u0BAsD9B6zB,GAA4B/zB,MAAGI,KAAAA,GAAAF,61BCtD/B8zB,GAA2Bh0B,MAAGC,KAAAA,GAAAC,6MCA9B+zB,GAAyBj0B,MAAGC,KAAAA,GAAAC,oOCA5Bg0B,GAA0Bl0B,MAAGC,KAAAA,GAAAC,6WCsC1Bi0B,GACd9iB,EACAsG,GAeA,IAbA,IAamCyG,EAb7B5M,EAAY,IAAID,KACW,IAA/BE,SAASJ,EAASG,YAEdE,EAAU,IAAIH,KAAkC,IAA7BE,SAASJ,EAASK,UACrCuG,EAAe,IAAI1G,KACQ,IAA/BE,SAASJ,EAAS6G,YAEduV,EAAgBpc,EAASoc,cAC3B,IAAIlc,KAC+B,IAAnCE,SAASJ,EAASoc,gBAElB,KACA2G,EAA2B/tB,OAAO,GACtC6X,EAAAC,EAAoB9M,EAASud,UAAMxQ,EAAAF,KAAAG,MACjC+V,GAAoB/tB,OADN+X,EAAAI,MACmB6V,aAEnC,IAAMjb,EAAQkb,GAAWjjB,EAAS+G,OAAOgB,OACzC,MAAO,CACLhG,GAAIsa,uBAAqBrc,EAAS+B,IAClCsE,IAAK,CACHrS,QAASgM,EAASqG,IAAItE,GACtB5T,KAAM6R,EAASqG,IAAIG,WAErB8V,eAAgBtc,EAASuc,QACzBjW,SAAU,CACR9M,MAAO8M,EAAS9M,MAChBC,QAAS6M,EAAS7M,QAClBC,YAAa4M,EAAS5M,YACtBC,UAAW2M,EAAS3M,UACpB6iB,MAAOlW,EAASkW,OAElBrc,UAAAA,EACAE,QAAAA,EACAuG,aAAAA,EACA8V,oBAAqBtc,SAASJ,EAAS0c,qBACvCN,cAAAA,EACAO,qBAAsBvc,SAASJ,EAAS2c,uBAAyB,KACjEF,gBAAiBzc,EAASyc,iBAAmB,KAC7CG,QAAS5c,EAAS4c,QAAQpe,KACxB,SAACqe,GACC,MAAO,CACLna,KAAMoB,aAAW+Y,EAAOna,MACxBiG,GAAIkU,EAAOlU,GACXwE,MAAOnY,OAAO6nB,EAAO1P,WAI3BpV,OAAQgI,GAAsBC,GAC9B2C,OAAQ,CACNma,IAAK9c,EAAS8c,IAAM9nB,OAAOgL,EAAS8c,KAAO9nB,OAAO,GAClD+nB,GAAI/c,EAAS+c,GAAK/nB,OAAOgL,EAAS+c,IAAM/nB,OAAO,GAC/CgoB,QAAShd,EAASgd,QAAUhoB,OAAOgL,EAASgd,SAAWhoB,OAAO,IAEhEioB,SAAU,CACR7Z,iBAAkBC,cAAYrO,OAAOgL,EAASoD,kBAAmB,GACjEga,SAAUhd,SAASJ,EAASK,SAC1BD,SAASJ,EAASG,WACpBmD,iBAAkBD,cACfrO,OAAOgL,EAASkd,gBAAkBloB,OAAO,KACxCA,OAAOgL,EAASmd,kBAClB,IAGJpV,MAAAA,EACAgb,iBAAAA,EACA1F,kBAAmBroB,OAAOgL,EAASmd,kBACnCG,MAAOtd,EAASud,OAAO/e,KACrB,SAACgf,GACC,MAAO,CACLC,aAAcD,EAAMC,aACpBzpB,QAASwpB,EAAMA,MAAMxpB,QACrB0pB,KAAMntB,GAAsBgP,IAAIie,EAAMG,YACtCuF,OAAQluB,OAAOwoB,EAAMwF,2BAOfG,GACdnjB,EACAsG,GAEA,IAAMnG,EAAY,IAAID,KACW,IAA/BE,SAASJ,EAASG,YAEdE,EAAU,IAAIH,KAAkC,IAA7BE,SAASJ,EAASK,UACrC0H,EAAQkb,GAAWjjB,EAAS+G,OAAOgB,OACzC,MAAO,CACLhG,GAAIsa,uBAAqBrc,EAAS+B,IAClCsE,IAAK,CACHrS,QAASgM,EAASqG,IAAItE,GACtB5T,KAAM6R,EAASqG,IAAIG,WAErByW,SAAU,CACR7Z,iBAAkBC,cAAYrO,OAAOgL,EAASoD,kBAAmB,GACjEga,SAAUhd,SAASJ,EAASK,SAC1BD,SAASJ,EAASG,WACpBmD,iBAAkBD,cACfrO,OAAOgL,EAASkd,gBAAkBloB,OAAO,KACxCA,OAAOgL,EAASmd,kBAClB,IAGJb,eAAgBtc,EAASuc,QACzBjW,SAAU,CACR9M,MAAO8M,EAAS9M,MAChBC,QAAS6M,EAAS7M,SAEpB4jB,kBAAmBroB,OAAOgL,EAASmd,kBACnChd,UAAAA,EACAE,QAAAA,EACAtI,OAAQgI,GAAsBC,GAC9B2C,OAAQ,CACNma,IAAK9c,EAAS8c,IAAM9nB,OAAOgL,EAAS8c,KAAO9nB,OAAO,GAClD+nB,GAAI/c,EAAS+c,GAAK/nB,OAAOgL,EAAS+c,IAAM/nB,OAAO,GAC/CgoB,QAAShd,EAASgd,QAAUhoB,OAAOgL,EAASgd,SAAWhoB,OAAO,IAEhE+S,MAAAA,EACAuV,MAAOtd,EAASud,OAAO/e,KACrB,SAACgf,GACC,MAAO,CACLC,aAAcD,EAAMC,aACpBzpB,QAASwpB,EAAMA,MAAMxpB,QACrB0pB,KAAMntB,GAAsBgP,IAAIie,EAAMG,YACtCuF,OAAQluB,OAAOwoB,EAAMwF,kBA+C/B,SAASC,GACPG,GAEA,IAAIrb,EAAuD,KAiB3D,OAhBIqb,EAAcxb,aAAeoW,GAAqB/V,MACpDF,EAAQ,CACN/T,QAASovB,EAAcrhB,GACvBiG,OAAQob,EAAcpb,OACtB7Z,KAAMi1B,EAAcj1B,KACpB+Z,SAAUkb,EAAclb,SACxB7Z,KAAMyC,kBAAUmX,OAETmb,EAAcxb,aAAeoW,GAAqBlW,SAC3DC,EAAQ,CACN/T,QAASovB,EAAcrhB,GACvBiG,OAAQob,EAAcpb,OACtB7Z,KAAMi1B,EAAcj1B,KACpBE,KAAMyC,kBAAUgX,SAGbC,WAGOsb,GACdhC,GAEA,MAAO,CACLrtB,QAASqtB,EAAOrtB,QAChBgvB,YAAahuB,OAAOqsB,EAAO2B,aAC3Bvb,QAASzS,OAAOqsB,EAAO5Z,SACvB6b,UAAWjC,EAAOiC,UAAUtvB,UAAYqtB,EAAOrtB,QAC3C,KACAqtB,EAAOiC,UAAUtvB,QACrBuvB,WAAYlC,EAAOkC,WAAWxU,QAAO,SAACyU,GAAS,OAC7CA,EAAUxvB,UAAYqtB,EAAOrtB,WAC7BwK,KAAI,SAACglB,GACL,MAAO,CACLxvB,QAASwvB,EAAUxvB,QACnByT,QAASzS,OAAOwuB,EAAU/b,kBCnMtBgc,SC9BCC,YAA0BrX,GAAA,SAAAqX,IAAA,OAAArX,EAAAxY,WAAAC,iBAAA6L,EAAA+jB,EAAArX,GAErCqX,EASOxF,qBAAP,SACE/kB,EACA7G,GAEA,IAAMD,EAAcQ,aAAWP,GAASnE,KACxC,IAAK4C,GAAuBwB,SAASF,GACnC,MAAM,IAAIG,0BAAwBH,GAEpC,IAAMsR,WF8IRxK,GAEA,IAAI4O,EAAkC,CAAC,GAAI,GAAI,IAC3C4b,EAAoC,CAAC,GAAI,IAC7C,GAAIxqB,EAAOyqB,SACT7b,EAAQ,CAAC5B,cAAahN,EAAOyqB,SAASz1B,KAAMgL,EAAOyqB,SAAS5b,QAC5D2b,EAAW,CACTxqB,EAAOyqB,SAASD,SAASnlB,KAAI,SAACiJ,GAAO,OAAKA,EAAQzT,WAClDmF,EAAOyqB,SAASD,SAASnlB,KAAI,SAAAvF,GAAU,OAAO8K,YAAUC,KAAjB/K,EAAPwO,kBAE7B,GAAItO,EAAO0qB,SAAU,CAAA,IAAAC,EAC1B/b,EAAQ,QAAA+b,EACN3qB,EAAO0qB,iBAAPC,EAAiB5d,aACjB/M,EAAO0qB,SAASE,aAAa51B,KAC7BgL,EAAO0qB,SAASE,aAAa/b,QAGjC,MAAO,CACLhX,OAAOC,OACL2S,GAAyBzK,EAAOilB,iBAElCrW,EACA4b,GEpKaK,CAAgC7qB,GACvC4J,EAAWqP,kBAAgBC,OAE/B,CACE,+IACA,gEACA,8DAEF1O,GAEF,MAAO,CACL5B,GAAIjH,GAAezI,GAAaoJ,gBAChCiH,KAAMoB,aAAWf,KAGrB,IAAApR,EAAA+xB,EAAA9xB,UAgDC,OAhDDD,EAQO2sB,2BAAA,SACLhX,EACAnO,GAEA,IAAKjF,YAAUoT,GACb,MAAM,IAAIjI,MAAM,0BAGlB,MAAO,CACLsJ,GAAIrB,EACJ6F,MAAOnY,OAAO,GACd0N,KAAMgB,GAAiCvK,KAI3CxH,EAQOsyB,gBAAA,SACLC,EACA/qB,GAEA,IAAKjF,YAAUgwB,KAAmBhwB,YAAUiF,EAAOnF,SACjD,MAAM,IAAIG,sBAEZ,IAAMyO,EAAkBuhB,qCACrBrhB,kBACGa,WF0ERxK,GAEA,MAAO,CAACA,EAAOnF,QAAS+P,YAAUC,KAAK7K,EAAO6M,SE5E/Boe,CAA0BjrB,GAEjC4J,EAAWH,EAAgBiB,mBAAmB,OAAQF,GAC5D,MAAO,CACLgF,GAAIub,EACJ/W,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAEpB2gB,GAlF4CrqB,ICsElCgrB,YAAyBhY,GAAA,SAAAgY,IAAA,OAAAhY,EAAAxY,WAAAC,iBAAA6L,EAAA0kB,EAAAhY,GAAA,IAAA1a,EAAA0yB,EAAAzyB,UAmpBnC,OAjpBDD,EAOcitB,eAAP,SACLzlB,iJAOC,GALKlH,EAASiD,EAAKoE,KAAK7G,qBAEnB6xB,EAAsBC,uBAAqB5xB,QAC/CwG,EAAOmO,cACPrV,UAIA6sB,EAAA3lB,EAAO4lB,mBAAPD,EAAwBptB,QACxByH,EAAO4lB,gBAAgBrtB,iBAAMstB,EAAK7lB,EAAOyjB,gBAAPoC,EAAgBttB,SAAM6B,EAAAE,OAAA,MAAA,MAElD,IAAI4L,MACR,2DACD,OAKgD,OAH7C4f,EAAkBC,oBAAkB/lB,EAAO4lB,iBAE3CI,UAAiBC,EAAAjmB,EAAOgH,kBAAPif,EAAkBne,YAAa,EAChDoe,UAAeC,EAAAnmB,EAAOkH,gBAAPif,EAAgBre,YAAa,EAAC1N,EAAAE,OAAA2Z,EAElCkX,EAAoB1F,eACnC/Y,cAAY1M,EAAO+U,aACnB/U,EAAOyjB,SAAW,GAClBqC,EACA3tB,KAAK0P,MAAMme,EAAiB,KAC5B7tB,KAAK0P,MAAMqe,EAAe,KAC1BlmB,EAAOomB,aAAe,EACtBpmB,EAAOqmB,gBAAiB,IACzB,OAED,OAVMlR,EAAE/a,EAAAG,KAAAH,EAAAE,QAUF,CACJ6L,IAAKrP,8BAAsBse,SAC3B7F,OAAQ4F,EAAGvX,MACZ,QAAA,OAAAxD,EAAAE,QAAA2Z,EAEqBkB,EAAGE,QAAM,QAM9B,GANKhN,EAAOjO,EAAAG,KACP8wB,EAA+BD,uBAAqBzhB,kBACpDjB,EAAMN,GACVC,EACAgjB,EACA,oBAEMjxB,EAAAE,QAAA,MAAA,MACA,IAAIisB,wBAAuB,QAIY,GADzC1Q,EAAYwV,EAA6BvV,SAASpN,GAClD+G,EAAaoG,EAAUrL,KAAiB,YAC/BpQ,EAAAE,QAAA,MAAA,MACP,IAAIisB,wBAAuB,QAGnC,OAHmCnsB,EAAAE,QAG7B,CACJ6L,IAAKrP,8BAAsBif,KAC3BtG,WAAY+W,mBAAiBxmB,EAAOmO,cAAesY,OAAOhX,KAC3D,QAAA,UAAA,OAAArV,EAAAK,UAAAR,UAGHzB,EAOayd,YAAW,WAAA,IAAAC,EAAApc,EAAAC,IAAAC,MAAjB,SAAAsD,EAAkB0C,GAAwB,IAAA/B,EAAA,OAAAlE,IAAAI,eAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,OAAA,OAAAmD,EAAApD,OAAAoD,EAAAnD,OAE3BrC,KAAKsE,KAAKa,IAAI+Y,KAAKC,UAAUpW,IAAQ,OAA9C,OAAH/B,EAAGR,EAAAlD,KAAAkD,EAAAnD,OACHrC,KAAKsE,KAAKuB,IAAIG,GAAI,OAAA,OAAAR,EAAAjD,0BACPyD,GAAG,OAAA,MAAAR,EAAApD,OAAAoD,EAAA4Y,GAAA5Y,WAEd,IAAI6Y,eAAY7Y,EAAA4Y,IAAG,QAAA,UAAA,OAAA5Y,EAAAhD,UAAA6C,oBAE5B,OAAA,SAAAO,GAAA,OAAAqY,EAAAxb,WAAAC,YARuB,GASxBnC,EAQckuB,aAAP,SACL1mB,6HASC,OAPKlH,EAAS0E,EAAK2C,KAAK7G,qBAAoBqtB,EAEfC,mBAAiB5mB,EAAOyP,YAA/B7G,EAAE+d,EAAF/d,GAEjBuiB,EAAsBC,uBAAqB5xB,QAF5BmtB,EAAbxY,cAINrV,GACD0d,EAAAlc,OAAA2Z,EAEgBkX,EAAoB5G,KACnC3b,EACA5I,EAAOukB,MACP,IACD,OAED,OANMpP,EAAEqB,EAAAjc,KAAAic,EAAAlc,OAMF,CACJ6L,IAAKpP,yBAAiB8vB,OACtBtX,OAAQ4F,EAAGvX,MACZ,OAAA,OAAA4Y,EAAAlc,QAAA2Z,EACKkB,EAAGE,QAAM,QACf,OADemB,EAAAlc,QACT,CACJ6L,IAAKpP,yBAAiBgf,MACvB,QAAA,UAAA,OAAAS,EAAA/b,UAAAwd,UAEHzf,EAOcsuB,gBAAP,SACLrX,6HASC,OAPK3W,EAASiF,EAAKoC,KAAK7G,qBAAoBytB,EAEfH,mBAAiBnX,GAAxB7G,EAAEme,EAAFne,GAEjBuiB,EAAsBC,uBAAqB5xB,QAF5ButB,EAAb5Y,cAINrV,GACDof,EAAA5d,OAAA2Z,EACgBkX,EAAoBnE,QAAQpe,IAAG,OAEhD,OAFMuM,EAAE+C,EAAA3d,KAAA2d,EAAA5d,OAEF,CACJ6L,IAAKnP,4BAAoBiwB,UACzB1X,OAAQ4F,EAAGvX,MACZ,OAAA,OAAAsa,EAAA5d,QAAA2Z,EACKkB,EAAGE,QAAM,QACf,OADe6C,EAAA5d,QACT,CACJ6L,IAAKnP,4BAAoB+e,MAC1B,QAAA,UAAA,OAAAmC,EAAAzd,UAAA+d,UAGHhgB,EAOcoa,oBAAP,SACL5S,+IAgB0D,GAdpDlH,EAASoF,EAAKiC,KAAK7G,qBACnBJ,EAAcgF,EAAKiC,KAAKlH,iBAGxBsgB,EAAclF,gCAA8B7a,QAChDmI,GAAezI,GAAa+I,qBAC5BnJ,GAGIwyB,EAA0BvX,sBAAoBva,QAClDmI,GAAezI,GAAaoJ,gBAC5BxJ,GAGEgY,EAAqC9Q,EAAO8Q,WAC3C9Q,EAAO8Q,YAAU2H,EAAAne,QAAA,MAAA,OAAAme,EAAAne,OAAA2Z,EACQqX,EACzB,6BACC3pB,GAAezI,GAAa2J,mBAC7B,OACHiO,EAAa,CACX9C,OALImZ,EAAa1O,EAAAle,MAKI6Z,IAAIpG,MACzBF,QAASqZ,EAAc/S,IAAItG,SAC3B,QAKJ,OAFMyd,EAA+BhB,GAClCxF,qBAAqB/kB,EAAO8jB,SAAU5qB,GACzCuf,EAAAne,QAAA2Z,EACiBsF,EAAY3G,oBAC3B5S,EAAO4M,gBACP,CACEmE,eAAgB,CACdC,gBAAiBrP,GAAezI,GAAaoJ,gBAC7CwO,WAAYA,GAEdvH,KAAMgiB,EAA6BhiB,QAEtC,QAED,OAXM4L,EAAEsD,EAAAle,KAAAke,EAAAne,QAWF,CACJ6L,IAAKlP,gCAAwB0iB,UAC7BpK,OAAQ4F,EAAGvX,MACZ,QAAA,OAAA6a,EAAAne,QAAA2Z,EAEqBkB,EAAGE,QAAM,QAO9B,GAPKhN,EAAOoQ,EAAAle,KACP8sB,EAAuBhT,gCAC1B1K,kBACGjB,EAAMN,GACVC,EACAgf,EACA,yBAEM5O,EAAAne,QAAA,MAAA,MACA,IAAIitB,qCAAoC,QAKa,GAFvD1R,EAAYwR,EAAqBvR,SAASpN,GAE1C4e,EAAoBzR,EAAUrL,KAAwB,mBADtD2D,EAAgB0H,EAAUrL,KAAa,SAEtB8c,GAAiB7O,EAAAne,QAAA,MAAA,MAChC,IAAIitB,qCAAoC,QAEhD,OAFgD9O,EAAAne,QAE1C,CACJ6L,IAAKlP,gCAAwB8e,KAC7B5H,cAAAA,EACA2B,WAAYnO,GAAezI,GAAaoJ,gBACxCwO,WAAYA,EACZD,YAAayW,EAAkBzW,YAC/B6I,QAAS4N,EAAkB5N,SAC5B,QAAA,UAAA,OAAAjB,EAAAhe,UAAAqf,UACFthB,EAEagzB,WAAP,SACLxrB,2HAE6C,GAAvClH,EAASgG,EAAKqB,KAAK7G,qBACpByB,YAAUiF,EAAOyrB,sBAAoBvR,EAAA5f,OAAA,MAAA,MAClC,IAAIU,sBAAqB,OAKhC,OAHK0wB,EAAuBC,kCAAgCnyB,QAC3DwG,EAAOyrB,oBACP3yB,GACDohB,EAAA5f,OAAA2Z,EAEqBnb,EAAOge,cAAY,OAA5B,OAAP8U,EAAO1R,EAAA3f,KAAA2f,EAAA5f,OAAA2Z,EAEIyX,EAAqBG,WACpCD,EACA5rB,EAAO6M,SACR,OAED,OALMsI,EAAE+E,EAAA3f,KAAA2f,EAAA5f,QAKF,CACJ6L,IAAKue,uBAAeoH,SACpBvc,OAAQ4F,EAAGvX,MACZ,QAAA,OAAAsc,EAAA5f,QAAA2Z,EACKkB,EAAGE,QAAM,QACf,OADe6E,EAAA5f,QACT,CACJ6L,IAAKue,uBAAe3O,MACrB,QAAA,UAAA,OAAAmE,EAAAzf,UAAAwf,UACFzhB,EACauzB,aAAP,SACL/rB,2HAE6C,GAAvClH,EAASwlB,EAAKne,KAAK7G,qBACpByB,YAAUiF,EAAOyrB,sBAAoB/Q,EAAApgB,OAAA,MAAA,MAClC,IAAIU,sBAAqB,OAKhC,OAHK0wB,EAAuBC,kCAAgCnyB,QAC3DwG,EAAOyrB,oBACP3yB,GACD4hB,EAAApgB,OAAA2Z,EAEqBnb,EAAOge,cAAY,OAA5B,OAAP8U,EAAOlR,EAAAngB,KAAAmgB,EAAApgB,OAAA2Z,EAEIyX,EAAqBM,WACpCJ,EACA5rB,EAAO6M,SACR,OAED,OALMsI,EAAEuF,EAAAngB,KAAAmgB,EAAApgB,QAKF,CACJ6L,IAAKwe,yBAAiBsH,WACtB1c,OAAQ4F,EAAGvX,MACZ,QAAA,OAAA8c,EAAApgB,QAAA2Z,EACKkB,EAAGE,QAAM,QACf,OADeqF,EAAApgB,QACT,CACJ6L,IAAKwe,yBAAiB5O,MACvB,QAAA,UAAA,OAAA2E,EAAAjgB,UAAA8f,UAEH/hB,EAOc0zB,eAAP,SACLlsB,yHAMC,OAJKlH,EAASqzB,EAAKhsB,KAAK7G,qBACnB8yB,EAA0BC,2BAAyB7yB,QACvDwG,EAAO+M,aACPjU,GACDqjB,EAAA7hB,OAAA2Z,EACgBmY,EAAwBE,SAAStsB,EAAOmqB,YAAU,OACnE,OADMhV,EAAEgH,EAAA5hB,KAAA4hB,EAAA7hB,OACF,CACJ6L,iBACAoJ,OAAQ4F,EAAGvX,MACZ,OAAA,OAAAue,EAAA7hB,OAAA2Z,EACKkB,EAAGE,QAAM,OACf,OADe8G,EAAA7hB,QACT,CACJ6L,YACD,QAAA,UAAA,OAAAgW,EAAA1hB,UAAAyhB,UAEH1jB,EAOc+zB,iBAAP,SACLxf,qHAIc,OAFRjU,EAAS0zB,EAAKrsB,KAAK7G,qBAAoBoiB,EAAArF,GAAAkB,EAAAmE,EAAA7E,GAAAW,EAAAkE,EAAA3E,GACtCyV,EAAI9Q,EAAA1E,GACTjK,EAAY2O,EAAAphB,OAAA2Z,EACKnb,EAAOge,cAAY,OAFtC,OAEsC4E,EAAAzE,GAAAyE,EAAAnhB,KAAAmhB,EAAA+Q,IADpC1f,aAAY2O,EAAA1E,GACZmT,UAASzO,EAAAzE,IAAAyE,EAAAgR,GAAAhR,EAAA3E,GAFCmV,eAAc3lB,KAAAmV,EAAA3E,GAAA2E,EAAA+Q,IAAA/Q,EAAAiR,MAAAjR,EAAA7E,IAAA6E,EAAAgR,IAAAhR,EAAAkR,GAAA3Y,EAA1ByH,EAAApE,iBAAAoE,EAAArF,IAAAqF,EAAAiR,GAAAjR,EAAAkR,aAGE,QAAA,UAAA,OAAAlR,EAAAjhB,UAAA0gB,UAEJ3iB,EAOaq0B,aAAY,WAAA,IAAAC,EAAAhzB,EAAAC,IAAAC,MAAlB,SAAAwiB,EAAmBzP,GAAoB,IAAAjU,EAAAszB,EAAAvxB,EAAAsvB,EAAA,OAAApwB,IAAAI,eAAA4iB,GAAA,cAAAA,EAAA1iB,KAAA0iB,EAAAziB,MAAA,OAK3C,OAJKxB,EAASb,KAAKkI,KAAK7G,qBACnB8yB,EAA0BC,2BAAyB7yB,QACvDuT,EACAjU,GACDikB,EAAAziB,OACqBxB,EAAOge,aAAY,OAA5B,OAAPjc,EAAOkiB,EAAAxiB,KAAAwiB,EAAAziB,OACW8xB,EAAwBW,UAAUlyB,GAAQ,OAAnD,OAAAkiB,EAAAviB,gBACRK,KADDsvB,EAASpN,EAAAxiB,MACgB,KAAO4vB,GAAS,OAAA,UAAA,OAAApN,EAAAtiB,UAAA+hB,YAChD,OAAA,SAAApC,GAAA,OAAA0S,EAAApyB,WAAAC,YATwB,GAWzBnC,EAMagvB,QAAO,WAAA,IAAAC,EAAA3tB,EAAAC,IAAAC,MAAb,SAAAojB,EAAcpd,GAAqB,IAAAlH,EAAA4uB,EAAA9e,EAAAuiB,EAAA,OAAApxB,IAAAI,eAAAwjB,GAAA,cAAAA,EAAAtjB,KAAAsjB,EAAArjB,MAAA,OACK,GAAvCxB,EAASb,KAAKkI,KAAK7G,qBAEpByB,YAAUiF,EAAO2nB,oBAAkBhK,EAAArjB,OAAA,MAAA,MAChC,IAAIU,sBAAqB,OAQhC,OARgC0sB,EAGHd,mBAAiB5mB,EAAOyP,YAA/B7G,EAAE8e,EAAF9e,GAEjBuiB,EAAsBC,uBAAqB5xB,QAF5BkuB,EAAbvZ,cAINrV,GACD6kB,EAAAnjB,gBACM2wB,EAAoBvW,WAAW4S,QACpC5e,EACA5I,EAAO2nB,kBACP3nB,EAAOukB,OACR,OAAA,UAAA,OAAA5G,EAAAljB,UAAA2iB,YACF,OAAA,SAAApC,GAAA,OAAAyM,EAAA/sB,WAAAC,YAlBmB,GAoBpBnC,EAOaovB,WAAU,WAAA,IAAAC,EAAA/tB,EAAAC,IAAAC,MAAhB,SAAA4kB,EACLnP,GAAkB,IAAA3W,EAAAgvB,EAAAlf,EAAAuiB,EAAA,OAAApxB,IAAAI,eAAA8kB,GAAA,cAAAA,EAAA5kB,KAAA4kB,EAAA3kB,MAAA,OASjB,OAPKxB,EAASb,KAAKkI,KAAK7G,qBAAoBwuB,EAEflB,mBAAiBnX,GAAxB7G,EAAEkf,EAAFlf,GAEjBuiB,EAAsBC,uBAAqB5xB,QAF5BsuB,EAAb3Z,cAINrV,GACDmmB,EAAAzkB,gBAEM2wB,EAAoBvD,WAAWhf,IAAG,OAAA,UAAA,OAAAqW,EAAAxkB,UAAAmkB,YAC1C,OAAA,SAAAvC,GAAA,OAAAwL,EAAAntB,WAAAC,YAbsB,GAcvBnC,EAQauvB,WAAU,WAAA,IAAAC,EAAAluB,EAAAC,IAAAC,MAAhB,SAAA+jB,EAAiB5P,GAAqB,IAAApO,EAAAC,EAAA,OAAAjG,IAAAI,eAAAokB,GAAA,cAAAA,EAAAlkB,KAAAkkB,EAAAjkB,MAAA,OAAA,GACtCS,YAAUoT,IAAcoQ,EAAAjkB,OAAA,MAAA,MACrB,IAAIU,sBAAqB,OAMC,OAJ5B+E,EAAQ2pB,GACR1pB,EAAS,CACbnF,QAASsT,EAAcuK,eAES6F,EAAAjkB,OAEErC,KAAKwH,QAAQC,QAAW,CAC1DK,MAAAA,EACAC,OAAAA,EACAhL,KALW,wBAMX,OAJuB,OAAAupB,EAAA/jB,gBAIvB+jB,EAAAhkB,KAJMyyB,kBAKiB3H,QAAQhgB,KAAI,SACnC6iB,GAAiC,OAC9BgC,GAAoBhC,OAAQ,QAAA,UAAA,OAAA3J,EAAA9jB,UAAAsjB,YAClC,OAAA,SAAA3B,GAAA,OAAA4L,EAAAttB,WAAAC,YAlBsB,GAoBvBnC,EAOa2vB,YAAW,WAAA,IAAAC,EAAAtuB,EAAAC,IAAAC,MAAjB,SAAAulB,EACL9P,GAAkB,IAAA4Y,EAAAtoB,EAAAC,EAAAitB,EAAAxS,EAAAtN,EAAA,OAAApT,IAAAI,eAAAulB,GAAA,cAAAA,EAAArlB,KAAAqlB,EAAAplB,MAAA,OAAA,GAEbiuB,eAAa9Y,IAAWiQ,EAAAplB,OAAA,MAAA,MACrB,IAAIkuB,yBAAwB,OAOD,OAL7BH,EAAqBI,wBAAsBhZ,GAC3C1P,EAAQupB,GACRtpB,EAAS,CACbyP,WAAY4Y,GAEqB3I,EAAAplB,OAEGrC,KAAKwH,QAAQC,QAAW,CAC5DK,MAAAA,EACAC,OAAAA,EACAhL,KALW,yBAMX,OAJyB,GAAnBi4B,EAINvN,EAAAnlB,KAJM0yB,qBAKgBvN,EAAAplB,QAAA,MAAA,OAAAolB,EAAAllB,gBACf,MAAI,QAAA,GACDyyB,EAAoB9f,UAAQuS,EAAAplB,QAAA,MAAA,OAAAolB,EAAAllB,gBAC/BmvB,GACLsD,EACAxsB,KACD,QAI+D,OAJ/Dif,EAAArlB,QAIKogB,EAAcI,iBAAeoS,EAAoB9f,UAASuS,EAAAplB,QACnCrC,KAAKsE,KAAKyC,YAAYyb,GAAY,QACA,OAAzDtN,EAAWgJ,KAAK2E,MADF4E,EAAAnlB,MAC2CmlB,EAAAllB,gBACxDmvB,GAAsBsD,EAAqB9f,IAAS,QAAA,GAAAuS,EAAArlB,QAAAqlB,EAAArJ,GAAAqJ,cAGvDA,EAAArJ,cAAe0E,oBAAe2E,EAAAplB,QAAA,MAAA,OAAAolB,EAAAllB,gBACzBmvB,GACLsD,EACA7sB,KACD,QAAA,OAAAsf,EAAAllB,gBAEImvB,GACLsD,EACAvsB,KACD,QAAA,UAAA,OAAAgf,EAAAjlB,UAAA8kB,sBAEJ,OAAA,SAAAtC,GAAA,OAAAmL,EAAA1tB,WAAAC,YA7CuB,GA8CxBnC,EAOakwB,aAAY,WAAA,IAAAC,EAAA7uB,EAAAC,IAAAC,MAAlB,SAAAkzB,EAAAptB,GAAA,IAAAsb,EAAAO,EAAA/c,EAAAyc,EAAAO,EAAAN,EAAAC,EAAAC,EAAAC,EAAA7T,EAAA/M,EAAAtB,EAAAihB,EAAAza,EAAAC,EAAAmtB,OAAA,OAAApzB,IAAAI,eAAAizB,GAAA,cAAAA,EAAA/yB,KAAA+yB,EAAA9yB,MAAA,OASwB,GAP7BqhB,YADeP,EAAAtb,EACf6b,OAAQ,GAAEP,EACVxc,EAAMkB,EAANlB,OACAgd,YADMP,EAAAvb,EACN8b,MAAO,EAACP,EACRE,YADQD,EAAAxb,EACRyb,WAAY7jB,sBAAcmkB,IAAGP,EAC7BG,YAD6BD,EAAA1b,EAC7B2b,QAASjkB,uBAAeskB,WAAUN,EAE9B5T,EAAQ,KACR/M,EARWiF,EAAf8M,kBASWwgB,EAAA9yB,QAAA,MAAA,GACJS,YAAUF,IAAQuyB,EAAA9yB,QAAA,MAAA,OAAA8yB,EAAA9yB,OACfrC,KAAKkI,KAAKvG,eAAc,OACU,GAAlCL,EAAWtB,KAAKkI,KAAKnH,eACdo0B,EAAA9yB,QAAA,MAAA,MACL,IAAI3B,kBAAiB,QAAA,OAAAy0B,EAAA/yB,QAAA+yB,EAAA9yB,QAGGf,EAASohB,YAAY9f,GAAQ,QAAtC,GAAf2f,EAAe4S,EAAA7yB,MACD6yB,EAAA9yB,QAAA,MAAA,MACZ,IAAIsgB,2BAA0B,QAEtC/f,EAAU2f,EAAgB4S,EAAA9yB,QAAA,MAAA,QAAA,MAAA8yB,EAAA/yB,QAAA+yB,EAAA/W,GAAA+W,YAEpB,IAAIxS,2BAAwBwS,EAAA/W,IAAG,QAGzCzO,EAAQ,CAAEsF,IAAKrS,EAAQ6d,eAAgB,QAaL,OAXhC9Z,IACFgJ,EAAK4E,KAAQ5E,EAAUD,GAA4B/I,KAE/CmB,EAAQwpB,GACRvpB,EAAS,CACb4H,MAAAA,EACA+T,MAAAA,EACAC,KAAAA,EACAL,UAAAA,EACAE,OAAAA,GAEkC2R,EAAA9yB,QAEGrC,KAAKwH,QAAQC,QAAW,CAC7DK,MAAAA,EACAC,OAAAA,EACAhL,KALW,0BAMX,QAJ0B,OAAAo4B,EAAA5yB,gBAKrBwC,QAAQ+e,IADbqR,EAAA7yB,KAJM8yB,qBAMehoB,eAAG,IAAA4W,EAAAniB,EAAAC,IAAAC,MACtB,SAAAszB,EACEzmB,GAA6C,IAAA4T,EAAAtN,EAAA,OAAApT,IAAAI,eAAAozB,GAAA,cAAAA,EAAAlzB,KAAAkzB,EAAAjzB,MAAA,OAAA,GAGxCuM,EAASsG,UAAQogB,EAAAjzB,OAAA,MAAA,OAAAizB,EAAA/yB,gBACbwvB,GACLnjB,EACApG,KACD,OAGoD,OAHpD8sB,EAAAlzB,OAGKogB,EAAcI,iBAAehU,EAASsG,UAASogB,EAAAjzB,OACxB6yB,EAAK5wB,KAAKyC,YAAYyb,GAAY,OACA,OAAzDtN,EAAWgJ,KAAK2E,MADFyS,EAAAhzB,MAC2CgzB,EAAA/yB,gBACxDwvB,GAA8BnjB,EAAUsG,IAAS,QAAA,GAAAogB,EAAAlzB,QAAAkzB,EAAAlX,GAAAkX,aAEpDA,EAAAlX,cAAe0E,oBAAewS,EAAAjzB,QAAA,MAAA,OAAAizB,EAAA/yB,gBACzBwvB,GACLnjB,EACAzG,KACD,QAAA,OAAAmtB,EAAA/yB,gBAEIwvB,GACLnjB,EACAnG,KACD,QAAA,UAAA,OAAA6sB,EAAA9yB,UAAA6yB,qBAEJ,gBAAAlO,GAAA,OAAAnD,EAAAvhB,WAAAC,kBAEJ,QAAA,UAAA,OAAAyyB,EAAA3yB,UAAAyyB,sBACF,OAAA,SAAAtP,GAAA,OAAA+K,EAAAjuB,WAAAC,YA/EwB,GAiFzBnC,EAOaqwB,kBAAiB,WAAA,IAAAC,EAAAhvB,EAAAC,IAAAC,MAAvB,SAAAwzB,EACLrf,GAAqB,IAAApO,EAAAC,EAAAgtB,EAAA,OAAAjzB,IAAAI,eAAAszB,GAAA,cAAAA,EAAApzB,KAAAozB,EAAAnzB,MAAA,OAAA,GAEhBS,YAAUoT,IAAcsf,EAAAnzB,OAAA,MAAA,MACrB,IAAIU,sBAAqB,OAME,OAJ7B+E,EAAQypB,GACRxpB,EAAS,CACbnF,QAASsT,EAAcuK,eAEU+U,EAAAnzB,OAECrC,KAAKwH,QAAQC,QAAW,CAC1DK,MAAAA,EACAC,OAAAA,EACAhL,KALW,yBAMX,OAJuB,GAAjBg4B,EAINS,EAAAlzB,KAJMyyB,mBAKcS,EAAAnzB,QAAA,MAAA,OAAAmzB,EAAAjzB,gBACb,MAAI,QAAA,OAAAizB,EAAAjzB,gBAEN,CACL4P,YAAanD,SAAS+lB,EAAkB5iB,aACxCH,iBAAkBC,cAChBrO,OAAOmxB,EAAkB/iB,kBACzB,GAEFE,iBAAkBD,cAChBrO,OAAOmxB,EAAkB7iB,kBACzB,GAEFG,uBAAwBzO,OACtBmxB,EAAkB1iB,wBAEpBtB,WAAYgkB,EAAkBhkB,aAC/B,QAAA,UAAA,OAAAykB,EAAAhzB,UAAA+yB,YACF,OAAA,SAAArO,GAAA,OAAA2J,EAAApuB,WAAAC,YAnC6B,GAqC9BnC,EAOak1B,SAAQ,WAAA,IAAAC,EAAA7zB,EAAAC,IAAAC,MAAd,SAAA4zB,EACLzf,GAAqB,IAAApO,EAAAC,EAAAgtB,EAAApe,EAAA,OAAA7U,IAAAI,eAAA0zB,GAAA,cAAAA,EAAAxzB,KAAAwzB,EAAAvzB,MAAA,OAAA,GAEhBS,YAAUoT,IAAc0f,EAAAvzB,OAAA,MAAA,MACrB,IAAIU,sBAAqB,OAMD,OAJ1B+E,EAAQ0pB,GACRzpB,EAAS,CACbnF,QAASsT,EAAcuK,eAEOmV,EAAAvzB,OAIIrC,KAAKwH,QAAQC,QAAW,CAC1DK,MAAAA,EACAC,OAAAA,EACAhL,KAPW,sBAQX,OAJuB,GAAjBg4B,EAINa,EAAAtzB,KAJMyyB,mBAKca,EAAAvzB,QAAA,MAAA,OAAAuzB,EAAArzB,gBACb,MAAI,QAIb,IAFIoU,EACFoe,EAAkBpe,OAEVH,aAAeoW,GAAqB/V,OAAK+e,EAAAvzB,QAAA,MAAA,OAAAuzB,EAAArzB,gBAC1C,CACLK,QAAS+T,EAAMhG,GACf5T,KAAM4Z,EAAM5Z,KACZ6Z,OAAQD,EAAMC,OACdE,SAAUH,EAAMG,SAChB7Z,KAAMyC,kBAAUmX,QACjB,QAAA,GAEQF,EAAMH,aAAeoW,GAAqBlW,QAAMkf,EAAAvzB,QAAA,MAAA,OAAAuzB,EAAArzB,gBAClD,CACLK,QAAS+T,EAAMhG,GACf5T,KAAM4Z,EAAM5Z,KACZ6Z,OAAQD,EAAMC,OACd3Z,KAAMyC,kBAAUgX,SACjB,QAAA,OAAAkf,EAAArzB,gBAEI,MAAI,QAAA,UAAA,OAAAqzB,EAAApzB,UAAAmzB,YACZ,OAAA,SAAAjO,GAAA,OAAAgO,EAAAjzB,WAAAC,YA3CoB,GA2CpBuwB,GAnpB2ChrB,IC/FjC6R,GAA0C,CACrDrI,8BAA4BC,kBAAkBI,YAC5C,wBAECjB,OAAO,WACVkiB,qCAAmCrhB,kBAAkBI,YAAY,QAC9DjB,OAAO,YCOCglB,YAA0B5a,GAAA,SAAA4a,IAAA,OAAA5a,EAAAxY,WAAAC,iBAAA6L,EAAAsnB,EAAA5a,GAAA,IAAA1a,EAAAs1B,EAAAr1B,UAgDpC,OA9CDD,EAOO2sB,2BAAA,SAA2B5b,GAChC,OAAOD,GAAiCC,IAE1C/Q,EAOOsyB,gBAAA,SAAgBvhB,GACrB,ILiJwCC,EKjJlCC,EAAkBuhB,qCACrBrhB,kBACGC,EAAWC,aAAWN,GACtBO,EAAmBL,EAAgBM,YAAY,QAKrD,ML0IK,CACLlP,SAFwC2O,EK7IzBC,EAAgBO,mBAC7BF,EACAF,IL6Ic,GAChBiD,OAAQhR,OAAO2N,EAAO,MK1IxBhR,EAOO4pB,cAAA,SAAc7Y,GACnB,IACE,IAAMhL,EAAOwM,GAAoBxB,EAAMwI,IACvC,MAAO,CACLnJ,GAAIrK,EAAKuK,OAAO,WAChBuZ,aAAc9jB,EAAKvJ,KACnB4I,KAAMiM,aAAWN,GAAM2B,UAAU,EAAG,KAEtC,MAAA8d,GACA,OAAO,OAEV8E,GAhD4C5tB,ICAlC6tB,YAA4B7a,GAAA,SAAA6a,IAAA,OAAA7a,EAAAxY,WAAAC,iBAAA6L,EAAAunB,EAAA7a,GAAA,IAAA1a,EAAAu1B,EAAAt1B,UAuItC,OArIDD,EAOaitB,eAAc,WAAA,IAAAyD,EAAApvB,EAAAC,IAAAC,MAApB,SAAAC,EACL+F,GAA0C,IAAA2lB,EAAAE,EAAAI,EAAAE,EAAArtB,EAAAqyB,EAAArF,EAAAE,EAAAE,EAAA,OAAAnsB,IAAAI,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAOzC,GALKxB,EAASb,KAAKkI,KAAK7G,qBAEnB6xB,EAAsBC,uBAAqB5xB,QAC/CwG,EAAOmO,cACPrV,UAIA6sB,EAAA3lB,EAAO4lB,mBAAPD,EAAwBptB,QACxByH,EAAO4lB,gBAAgBrtB,iBAAMstB,EAAK7lB,EAAOyjB,gBAAPoC,EAAgBttB,SAAM6B,EAAAE,OAAA,MAAA,MAElD,IAAI4L,MACR,2DACD,OAKgD,OAH7C4f,EAAkBC,oBAAkB/lB,EAAO4lB,iBAE3CI,UAAiBC,EAAAjmB,EAAOgH,kBAAPif,EAAkBne,YAAa,EAChDoe,UAAeC,EAAAnmB,EAAOkH,gBAAPif,EAAgBre,YAAa,EAAC1N,EAAAE,OAErB6wB,EAAoB3J,YAC/CiE,eACC/Y,cAAY1M,EAAO+U,aACnB/U,EAAOyjB,SAAW,GAClBqC,EACA3tB,KAAK0P,MAAMme,EAAiB,KAC5B7tB,KAAK0P,MAAMqe,EAAe,KAC1BlmB,EAAOomB,aAAe,EACtBpmB,EAAOqmB,gBAAiB,GACzB,OATkB,OAAAjsB,EAAAI,gBAUdvC,KAAKkI,KAAK1E,qBAVIrB,EAAAG,KAUiCiB,aAAW,QAAA,UAAA,OAAApB,EAAAK,UAAAR,YAClE,OAAA,SAAA4D,GAAA,OAAAqrB,EAAAxuB,WAAAC,YAlC0B,GAmC3BnC,EAOakuB,aAAY,WAAA,IAAAyC,EAAArvB,EAAAC,IAAAC,MAAlB,SAAAsD,EACL0C,GAA0B,IAAAlH,EAAA6tB,EAAA/d,EAAAuiB,EAAA,OAAApxB,IAAAI,eAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,OAWzB,OATKxB,EAASb,KAAKkI,KAAK7G,qBAAoBqtB,EAEfC,mBAC5B5mB,EAAOyP,YADc7G,EAAE+d,EAAF/d,GAIjBuiB,EAAsBC,uBAAqB5xB,QAJ5BmtB,EAAbxY,cAMNrV,GACD2E,EAAAnD,OAEwB6wB,EAAoB3J,YAAY+C,KACvD3b,EACA5I,EAAOukB,MACP,GACD,OAJe,OAAA9mB,EAAAjD,gBAKTvC,KAAKkI,KAAK1E,qBALDgC,EAAAlD,KAKiCiB,aAAW,OAAA,UAAA,OAAAiC,EAAAhD,UAAA6C,YAC7D,OAAA,SAAA8c,GAAA,OAAA+O,EAAAzuB,WAAAC,YApBwB,GAsBzBnC,EAOasuB,gBAAe,WAAA,IAAAsC,EAAAtvB,EAAAC,IAAAC,MAArB,SAAAie,EACLxI,GAAkB,IAAA3W,EAAAiuB,EAAAne,EAAAuiB,EAAA,OAAApxB,IAAAI,eAAAqc,GAAA,cAAAA,EAAAnc,KAAAmc,EAAAlc,MAAA,OAWjB,OATKxB,EAASb,KAAKkI,KAAK7G,qBAAoBytB,EAEfH,mBAC5BnX,GADqB7G,EAAEme,EAAFne,GAIjBuiB,EAAsBC,uBAAqB5xB,QAJ5ButB,EAAb5Y,cAMNrV,GACD0d,EAAAlc,OACwB6wB,EAAoB3J,YAAYwF,QACvDpe,GACD,OAFe,OAAA4N,EAAAhc,gBAGTvC,KAAKkI,KAAK1E,qBAHD+a,EAAAjc,KAGiCiB,aAAW,OAAA,UAAA,OAAAgb,EAAA/b,UAAAwd,YAC7D,OAAA,SAAA+C,GAAA,OAAAoO,EAAA1uB,WAAAC,YAjB2B,GAmB5BnC,EAOa0zB,eAAc,WAAA,IAAA8B,EAAAl0B,EAAAC,IAAAC,MAApB,SAAAwe,EACLxY,GAA4B,IAAAlH,EAAAszB,EAAA,OAAAryB,IAAAI,eAAA+d,GAAA,cAAAA,EAAA7d,KAAA6d,EAAA5d,MAAA,OAM3B,OAJKxB,EAASb,KAAKkI,KAAK7G,qBACnB8yB,EAA0BC,2BAAyB7yB,QACvDwG,EAAO+M,aACPjU,GACDof,EAAA5d,OACwB8xB,EAAwB5K,YAAY8K,SAC3DtsB,EAAOmqB,WACR,OAFe,OAAAjS,EAAA1d,gBAGTvC,KAAKkI,KAAK1E,qBAHDyc,EAAA3d,KAGiCiB,aAAW,OAAA,UAAA,OAAA0c,EAAAzd,UAAA+d,YAC7D,OAAA,SAAA6D,GAAA,OAAA2R,EAAAtzB,WAAAC,YAZ0B,GAc3BnC,EAOa+zB,iBAAgB,WAAA,IAAA0B,EAAAn0B,EAAAC,IAAAC,MAAtB,SAAA8f,EACL/M,GAAoB,IAAAjU,EAAA,OAAAiB,IAAAI,eAAAse,GAAA,cAAAA,EAAApe,KAAAoe,EAAAne,MAAA,OAIN,OAFRxB,EAASb,KAAKkI,KAAK7G,qBAAoBmf,EAAApC,GACtCpe,KAAIwgB,EAAA5B,GACT9J,EAAY0L,EAAAne,OACKxB,EAAOge,aAAY,OAA3B,OAA2B2B,EAAA1B,GAAA0B,EAAAle,KAAAke,EAAAzB,IADpCjK,aAAY0L,EAAA5B,GACZsT,UAAS1R,EAAA1B,IAAA0B,EAAAje,gBAAAie,EAAApC,GAFC6V,eAAc3lB,KAAAkS,EAAApC,GAAAoC,EAAAzB,KAAA,OAAA,UAAA,OAAAyB,EAAAhe,UAAAqf,YAI3B,OAAA,SAAAsC,GAAA,OAAA6R,EAAAvzB,WAAAC,YAR4B,GAQ5BozB,GAvI8C7tB,ICKpCguB,YAAkBhb,GAO7B,SAAAgb,EAAYl2B,SAKiD,OAJ3D+D,EAAAmX,EAAA3M,UAAMvO,UACDwqB,QAAU,IAAI0I,GAAyBlzB,GAC5C+D,EAAK0mB,SAAW,IAAI8H,GAA0BvyB,GAC9C+D,EAAK2mB,SAAW,IAAIoL,GAA0B91B,GAC9C+D,EAAK4mB,WAAa,IAAIoL,GAA4B/1B,GAAS+D,EAC5D,OAb4ByK,EAAA0nB,EAAAhb,GAa5Bgb,GAboChuB,IAc9BguB,YAAW,CAUhBnJ,qBAAsB,SACpB/kB,EACA7G,GAA+B,gBAA/BA,IAAAA,EAAsB,WAEtBoxB,GAA0BxF,qBAAqB/kB,EAAQ7G,MNSjDmxB,GAAAA,8BAAAA,uDAEVA,eO3DK,UAAM6D,GAAwB34B,MAAGC,KAAAA,GAAAC,wfAkC3B04B,GAAyB54B,MAAGI,KAAAA,GAAAF,+lBClC5B24B,GAA8B74B,MAAGC,KAAAA,GAAAC,kJCAjC44B,GAAuB94B,MAAGC,KAAAA,GAAAC,6JCWvB64B,GACd1nB,EACAsG,GAEA,IAAMM,EAAe,IAAI1G,KACQ,IAA/BE,SAASJ,EAAS6G,YAEd1G,EAAY,IAAID,KACW,IAA/BE,SAASJ,EAASG,YAEdE,EAAU,IAAIH,KACW,IAA7BE,SAASJ,EAASK,UAEd+b,EAAgBpc,EAASoc,cAC3B,IAAIlc,KAC+B,IAAnCE,SAASJ,EAASoc,gBAElB,KACJ,MAAO,CACLra,GAAIsa,uBAAqBrc,EAAS+B,IAClCsE,IAAK,CACHrS,QAASgM,EAASqG,IAAItE,GACtB5T,KAAM6R,EAASqG,IAAIG,WAErB8V,eAAgBtc,EAASuc,QACzBjW,SAAU,CACR9M,MAAO8M,EAAS9M,MAChBC,QAAS6M,EAAS7M,QAClBC,YAAa4M,EAAS5M,YACtBC,UAAW2M,EAAS3M,UACpB6iB,MAAOlW,EAASkW,OAElBS,SAAU,CACR0K,WAAY3nB,EAAS+G,OAAO4gB,WAC5BC,aAAc5nB,EAAS4nB,cAEzBlL,oBAAqBtc,SAASJ,EAAS0c,sBAAwB,EAC/D9V,aAAAA,EACAzG,UAAAA,EACAE,QAAAA,EACA+b,cAAAA,EACAO,qBAAsBvc,SAASJ,EAAS2c,uBAAyB,KACjEF,gBAAiBzc,EAASyc,iBAAmB,KAC7CG,QAAS5c,EAAS4c,QAAQpe,KACxB,SAACqe,GACC,MAAO,CACLna,KAAMoB,aAAW+Y,EAAOna,MACxBiG,GAAIkU,EAAOlU,GACXwE,MAAOnY,OAAO6nB,EAAO1P,WAI3BpV,OAAQgI,GAAsBC,GAC9B6nB,UAAW7nB,EAAS8nB,UAAUtpB,KAC5B,SAACupB,GAAQ,OAAKA,EAAShmB,GAAGimB,MAAM,EAAG,iBAIzBC,GACdjoB,EACAsG,GAEA,IAAMnG,EAAY,IAAID,KACW,IAA/BE,SAASJ,EAASG,YAEdE,EAAU,IAAIH,KACW,IAA7BE,SAASJ,EAASK,UAEpB,MAAO,CACL0B,GAAIsa,uBAAqBrc,EAAS+B,IAClCsE,IAAK,CACHrS,QAASgM,EAASqG,IAAItE,GACtB5T,KAAM6R,EAASqG,IAAIG,WAErB8V,eAAgBtc,EAASuc,QACzBjW,SAAU,CACR9M,MAAO8M,EAAS9M,MAChBC,QAAS6M,EAAS7M,SAEpBouB,UAAW7nB,EAAS8nB,UAAUtpB,KAC5B,SAACupB,GAAQ,OAAKA,EAAShmB,GAAGimB,MAAM,EAAG,OAErC/K,SAAU,CACR0K,WAAY3nB,EAAS+G,OAAO4gB,WAC5BC,aAAc5nB,EAAS4nB,cAEzBznB,UAAAA,EACAE,QAAAA,EACAtI,OAAQgI,GAAsBC,QCvErBkoB,YAAuB7b,GAAA,SAAA6b,IAAA,OAAA7b,EAAAxY,WAAAC,iBAAA6L,EAAAuoB,EAAA7b,GAElC6b,EAUOhK,qBAAP,SACE/kB,EACA7G,GAEA,IAAMD,EAAcQ,aAAWP,GAASnE,KACxC,IAAK4C,GAAuBwB,SAASF,GACnC,MAAM,IAAIG,0BAAwBH,GAEpC,IAAM0Q,EAAWqP,kBAAgBC,OAE/B,CACE,YACA,uBAEF,CACElZ,EAAOqlB,QACP,CACErlB,EAAOilB,eAAeuJ,WACtBxuB,EAAOilB,eAAewJ,gBAI5B,MAAO,CACL7lB,GAAIjH,GAAezI,GAAaiJ,aAChCoH,KAAMoB,aAAWf,KAIrB,IAAApR,EAAAu2B,EAAAt2B,UAsFC,OAtFDD,EAOOw2B,mBAAA,SACLhvB,GAEA,IAAKjF,YAAUiF,EAAOmO,eACpB,MAAM,IAAInT,sBAGZ,QAAmC4Y,EAAnCF,EAAAC,EAAqB3T,EAAOqlB,WAAOzR,EAAAF,KAAAG,MACjC,IAAK9Y,YADU6Y,EAAAI,OAEb,MAAM,IAAIhZ,sBAGd,IAEM4O,EAFoBqlB,oBAAkBtlB,kBAETe,mBACjC,eACA,CAAC1K,EAAOqlB,UAEV,MAAO,CACL7V,GAAIxP,EAAOmO,cACX6F,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAGrBpR,EAOO02B,sBAAA,SACLlvB,GAEA,IAAKjF,YAAUiF,EAAOmO,eACpB,MAAM,IAAInT,sBAGZ,QAAmC+jB,EAAnCD,EAAAnL,EAAqB3T,EAAOqlB,WAAOtG,EAAAD,KAAAjL,MACjC,IAAK9Y,YADUgkB,EAAA/K,OAEb,MAAM,IAAIhZ,sBAGd,IAEM4O,EAFoBqlB,oBAAkBtlB,kBAETe,mBACjC,kBACA,CAAC1K,EAAOqlB,UAEV,MAAO,CACL7V,GAAIxP,EAAOmO,cACX6F,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAGrBpR,EAOO22B,6BAAA,SACLnvB,GAEA,IAAKjF,YAAUiF,EAAOmO,eACpB,MAAM,IAAInT,sBAEZ,IAEM4O,EAFoBqlB,oBAAkBtlB,kBAETe,mBACjC,yBACA,CAAC1K,EAAOilB,iBAEV,MAAO,CACLzV,GAAIxP,EAAOmO,cACX6F,MAAOnY,OAAO,GACd0N,KAAMoB,aAAWf,KAEpBmlB,GA9HyC7uB,IC4C/BkvB,YAAsBlc,GAAA,SAAAkc,IAAA,OAAAlc,EAAAxY,WAAAC,iBAAA6L,EAAA4oB,EAAAlc,GAAA,IAAA1a,EAAA42B,EAAA32B,UAsehC,OApeDD,EAOcitB,eAAP,SACLzlB,iJAOC,GALKlH,EAASiD,EAAKoE,KAAK7G,qBAEnB+1B,EAAmBJ,oBAAkBz1B,QACzCwG,EAAOmO,cACPrV,UAIA6sB,EAAA3lB,EAAO4lB,mBAAPD,EAAwBptB,QACxByH,EAAO4lB,gBAAgBrtB,iBAAMstB,EAAK7lB,EAAOyjB,gBAAPoC,EAAgBttB,SAAM6B,EAAAE,OAAA,MAAA,MAElD,IAAI4L,MACR,2DACD,OAKgD,OAH7C4f,EAAkBC,oBAAkB/lB,EAAO4lB,iBAE3CI,UAAiBC,EAAAjmB,EAAOgH,kBAAPif,EAAkBne,YAAa,EAChDoe,UAAeC,EAAAnmB,EAAOkH,gBAAPif,EAAgBre,YAAa,EAAC1N,EAAAE,OAAA2Z,EAElCob,EAAiB5J,eAChC/Y,cAAY1M,EAAO+U,aACnB/U,EAAOyjB,SAAW,GAClBqC,EACA9lB,EAAOmY,UAAW,EAClBnY,EAAOsvB,eAAgB,EACvBn3B,KAAK0P,MAAMme,EAAiB,KAC5B7tB,KAAK0P,MAAMqe,EAAe,OAC3B,OAED,OAVM/Q,EAAE/a,EAAAG,KAAAH,EAAAE,QAUF,CACJ6L,IAAKrP,8BAAsBse,SAC3B7F,OAAQ4F,EAAGvX,MACZ,QAAA,OAAAxD,EAAAE,QAAA2Z,EAEqBkB,EAAGE,QAAM,QAO9B,GAPKhN,EAAOjO,EAAAG,KACPg1B,EAA4BN,oBAC/BtlB,kBACGjB,EAAMN,GACVC,EACAknB,EACA,oBAEMn1B,EAAAE,QAAA,MAAA,MACA,IAAIisB,wBAAuB,QAIY,GADzC1Q,EAAY0Z,EAA0BzZ,SAASpN,GAC/C+G,EAAaoG,EAAUrL,KAAiB,YAC/BpQ,EAAAE,QAAA,MAAA,MACP,IAAIisB,wBAAuB,QAGnC,OAHmCnsB,EAAAE,QAG7B,CACJ6L,IAAKrP,8BAAsBif,KAC3BtG,WAAY+W,mBAAiBxmB,EAAOmO,cAAesY,OAAOhX,KAC3D,QAAA,UAAA,OAAArV,EAAAK,UAAAR,UAGHzB,EAOayd,YAAW,WAAA,IAAAC,EAAApc,EAAAC,IAAAC,MAAjB,SAAAsD,EAAkB0C,GAAwB,IAAA/B,EAAA,OAAAlE,IAAAI,eAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,OAAA,OAAAmD,EAAApD,OAAAoD,EAAAnD,OAE3BrC,KAAKsE,KAAKa,IAAI+Y,KAAKC,UAAUpW,IAAQ,OAA9C,OAAH/B,EAAGR,EAAAlD,KAAAkD,EAAAnD,OACHrC,KAAKsE,KAAKuB,IAAIG,GAAI,OAAA,OAAAR,EAAAjD,0BACPyD,GAAG,OAAA,MAAAR,EAAApD,OAAAoD,EAAA4Y,GAAA5Y,WAEd,IAAI6Y,eAAY7Y,EAAA4Y,IAAG,QAAA,UAAA,OAAA5Y,EAAAhD,UAAA6C,oBAE5B,OAAA,SAAAO,GAAA,OAAAqY,EAAAxb,WAAAC,YARuB,GASxBnC,EAOcg3B,gBAAP,SACLxvB,6HAQC,OANKlH,EAAS0E,EAAK2C,KAAK7G,qBAAoBqtB,EACfC,mBAAiB5mB,EAAOyP,YAA/B7G,EAAE+d,EAAF/d,GAEjBymB,EAAmBJ,oBAAkBz1B,QAFtBmtB,EAAbxY,cAINrV,GACD0d,EAAAlc,OAAA2Z,EAEgBob,EAAiBlX,QAChCvP,EACA5I,EAAOsvB,eACR,OAED,OALMna,EAAEqB,EAAAjc,KAAAic,EAAAlc,OAKF,CACJ6L,IAAKmkB,4BAAoBmF,UACzBlgB,OAAQ4F,EAAGvX,MACZ,OAAA,OAAA4Y,EAAAlc,QAAA2Z,EAEKkB,EAAGE,QAAM,QAEf,OAFemB,EAAAlc,QAET,CACJ6L,IAAKmkB,4BAAoBvU,MAC1B,QAAA,UAAA,OAAAS,EAAA/b,UAAAwd,UAEHzf,EAOcsuB,gBAAP,SACLrX,6HASC,OAPK3W,EAASiF,EAAKoC,KAAK7G,qBAAoBytB,EAEfH,mBAAiBnX,GAAxB7G,EAAEme,EAAFne,GAEjBymB,EAAmBJ,oBAAkBz1B,QAFtButB,EAAb5Y,cAINrV,GACDof,EAAA5d,OAAA2Z,EAEgBob,EAAiBrI,QAChCpe,IACD,OAED,OAJMuM,EAAE+C,EAAA3d,KAAA2d,EAAA5d,OAIF,CACJ6L,IAAKnP,4BAAoBiwB,UACzB1X,OAAQ4F,EAAGvX,MACZ,OAAA,OAAAsa,EAAA5d,QAAA2Z,EAEKkB,EAAGE,QAAM,QAEf,OAFe6C,EAAA5d,QAET,CACJ6L,IAAKnP,4BAAoB+e,MAC1B,QAAA,UAAA,OAAAmC,EAAAzd,UAAA+d,UAEHhgB,EAOcoa,oBAAP,SACL5S,+IAe0D,GAbpDlH,EAASoF,EAAKiC,KAAK7G,qBACnBJ,EAAcgF,EAAKiC,KAAKlH,iBAExBsgB,EAAclF,gCAA8B7a,QAChDmI,GAAezI,GAAa+I,qBAC5BnJ,GAGI42B,EAAuB3b,sBAAoBva,QAC/CmI,GAAezI,GAAaiJ,aAC5BrJ,GAGEgY,EAAqC9Q,EAAO8Q,WAC3C9Q,EAAO8Q,YAAU2H,EAAAne,QAAA,MAAA,OAAAme,EAAAne,OAAA2Z,EACQyb,EACzB,6BACC/tB,GAAezI,GAAaqJ,gBAC7B,OACHuO,EAAa,CACX9C,OALImZ,EAAa1O,EAAAle,MAKI6Z,IAAIpG,MACzBF,QAASqZ,EAAc/S,IAAItG,SAC3B,QAKJ,OAFM6hB,EAA4BZ,GAC/BhK,qBAAqB/kB,EAAO8jB,SAAU5qB,GACzCuf,EAAAne,QAAA2Z,EACiBsF,EAAY3G,oBAC3B5S,EAAO4M,gBACP,CACEmE,eAAgB,CACdC,gBAAiBrP,GAAezI,GAAaiJ,aAC7C2O,WAAYA,GAEdvH,KAAMomB,EAA0BpmB,QAEnC,QAED,OAXM4L,EAAEsD,EAAAle,KAAAke,EAAAne,QAWF,CACJ6L,IAAKlP,gCAAwB0iB,UAC7BpK,OAAQ4F,EAAGvX,MACZ,QAAA,OAAA6a,EAAAne,QAAA2Z,EAEqBkB,EAAGE,QAAM,QAO9B,GAPKhN,EAAOoQ,EAAAle,KACP8sB,EAAuBhT,gCAC1B1K,kBACGjB,EAAMN,GACVC,EACAgf,EACA,yBAEM5O,EAAAne,QAAA,MAAA,MACA,IAAIisB,wBAAuB,QAK0B,GAFvD1Q,EAAYwR,EAAqBvR,SAASpN,GAE1C4e,EAAoBzR,EAAUrL,KAAwB,mBADtD2D,EAAgB0H,EAAUrL,KAAa,SAEtB8c,GAAiB7O,EAAAne,QAAA,MAAA,MAChC,IAAIitB,qCAAoC,QAEhD,OAFgD9O,EAAAne,QAE1C,CACJ6L,IAAKlP,gCAAwB8e,KAC7B5H,cAAAA,EACA2B,WAAYnO,GAAezI,GAAaiJ,aACxC2O,WAAYA,EACZD,YAAayW,EAAkBzW,YAC/B6I,QAAS4N,EAAkB5N,SAC5B,QAAA,UAAA,OAAAjB,EAAAhe,UAAAqf,UAEHthB,EAOao3B,WAAU,WAAA,IAAAC,EAAA/1B,EAAAC,IAAAC,MAAhB,SAAAigB,EACLja,GAAwB,IAAAlH,EAAA4uB,EAAA9e,EAAAymB,EAAA,OAAAt1B,IAAAI,eAAA+f,GAAA,cAAAA,EAAA7f,KAAA6f,EAAA5f,MAAA,OAEqB,GAAvCxB,EAASb,KAAKkI,KAAK7G,qBACpByB,YAAUiF,EAAO8vB,uBAAqB5V,EAAA5f,OAAA,MAAA,MACnC,IAAIsgB,2BAA0B,OAOrC,OAPqC8M,EAERd,mBAAiB5mB,EAAOyP,YAA/B7G,EAAE8e,EAAF9e,GAEjBymB,EAAmBJ,oBAAkBz1B,QAFtBkuB,EAAbvZ,cAINrV,GACDohB,EAAA1f,gBAEM60B,EAAiBO,WAAWhnB,EAAI5I,EAAO8vB,uBAAqB,OAAA,UAAA,OAAA5V,EAAAzf,UAAAwf,YACpE,OAAA,SAAAG,GAAA,OAAAyV,EAAAn1B,WAAAC,YAfsB,GAgBvBnC,EAOaovB,WAAU,WAAA,IAAAC,EAAA/tB,EAAAC,IAAAC,MAAhB,SAAAugB,EACL9K,GAAkB,IAAA3W,EAAAgvB,EAAAlf,EAAAymB,EAAA,OAAAt1B,IAAAI,eAAAugB,GAAA,cAAAA,EAAArgB,KAAAqgB,EAAApgB,MAAA,OASjB,OAPKxB,EAASb,KAAKkI,KAAK7G,qBAAoBwuB,EAEflB,mBAAiBnX,GAAxB7G,EAAEkf,EAAFlf,GAEjBymB,EAAmBJ,oBAAkBz1B,QAFtBsuB,EAAb3Z,cAINrV,GACD4hB,EAAAlgB,gBAEM60B,EAAiBzH,WAAWhf,IAAG,OAAA,UAAA,OAAA8R,EAAAjgB,UAAA8f,YACvC,OAAA,SAAAS,GAAA,OAAA6M,EAAAntB,WAAAC,YAbsB,GAcvBnC,EAOaqwB,kBAAiB,WAAA,IAAAC,EAAAhvB,EAAAC,IAAAC,MAAvB,SAAAkiB,EACL/N,GAAqB,IAAApO,EAAAC,EAAA+vB,EAAA,OAAAh2B,IAAAI,eAAAgiB,GAAA,cAAAA,EAAA9hB,KAAA8hB,EAAA7hB,MAAA,OAAA,GAIhBS,YAAUoT,IAAcgO,EAAA7hB,OAAA,MAAA,MACrB,IAAIsgB,2BAA0B,OAMN,OAJ1B7a,EAAQsuB,GACRruB,EAAS,CACbnF,QAASsT,EAAcuK,eAEOyD,EAAA7hB,OAECrC,KAAKwH,QAAQC,QAAW,CACvDK,MAAAA,EACAC,OAAAA,EACAhL,KALW,sBAMX,OAJoB,OAAAmnB,EAAA3hB,gBAKf,CACLg0B,YANMuB,EAIN5T,EAAA5hB,KAJMw1B,gBAMqBvB,WAC3BC,aAAcsB,EAAetB,eAC9B,QAAA,UAAA,OAAAtS,EAAA1hB,UAAAyhB,YACF,OAAA,SAAAG,GAAA,OAAAyM,EAAApuB,WAAAC,YAvB6B,GAwB9BnC,EAOauvB,WAAU,WAAA,IAAAC,EAAAluB,EAAAC,IAAAC,MAAhB,SAAAmhB,EACLhN,GAAqB,IAAApO,EAAAC,EAAA,OAAAjG,IAAAI,eAAAuhB,GAAA,cAAAA,EAAArhB,KAAAqhB,EAAAphB,MAAA,OAAA,GAIhBS,YAAUoT,IAAcuN,EAAAphB,OAAA,MAAA,MACrB,IAAIsgB,2BAA0B,OAMP,OAJzB7a,EAAQuuB,GACRtuB,EAAS,CACbnF,QAASsT,EAAcuK,eAEMgD,EAAAphB,OAEErC,KAAKwH,QAAQC,QAAW,CACvDK,MAAAA,EACAC,OAAAA,EACAhL,KALW,qBAMX,OAJoB,OAAA0mB,EAAAlhB,gBAIpBkhB,EAAAnhB,KAJMw1B,eAKc1K,QAAQhgB,KAAI,SAAC6iB,GAAM,OAAKA,EAAOrtB,YAAQ,QAAA,UAAA,OAAA6gB,EAAAjhB,UAAA0gB,YAC9D,OAAA,SAAAiB,GAAA,OAAA4L,EAAAttB,WAAAC,YApBsB,GAsBvBnC,EAOa2vB,YAAW,WAAA,IAAAC,EAAAtuB,EAAAC,IAAAC,MAAjB,SAAAwiB,EACL/M,GAAkB,IAAA4Y,EAAAtoB,EAAAC,EAAAgwB,EAAAvV,EAAAtN,EAAA,OAAApT,IAAAI,eAAA4iB,GAAA,cAAAA,EAAA1iB,KAAA0iB,EAAAziB,MAAA,OAAA,GAEbiuB,eAAa9Y,IAAWsN,EAAAziB,OAAA,MAAA,MACrB,IAAIkuB,yBAAwB,OAOJ,OAL1BH,EAAqBI,wBAAsBhZ,GAC3C1P,EAAQouB,GACRnuB,EAAS,CACbyP,WAAY4Y,GAEkBtL,EAAAziB,OAEGrC,KAAKwH,QAAQC,QAAW,CACzDK,MAAAA,EACAC,OAAAA,EACAhL,KALW,sBAMX,OAJsB,GAAhBg7B,EAINjT,EAAAxiB,KAJMy1B,kBAKajT,EAAAziB,QAAA,MAAA,OAAAyiB,EAAAviB,gBACZ,MAAI,QAAA,GACDw1B,EAAiB7iB,UAAQ4P,EAAAziB,QAAA,MAAA,OAAAyiB,EAAAviB,gBAC5B+zB,GACLyB,EACAvvB,KACD,QAG4D,OAH5Dsc,EAAA1iB,QAGKogB,EAAcI,iBAAemV,EAAiB7iB,UAAS4P,EAAAziB,QAChCrC,KAAKsE,KAAKyC,YAAYyb,GAAY,QACA,OAAzDtN,EAAWgJ,KAAK2E,MADFiC,EAAAxiB,MAC2CwiB,EAAAviB,gBACxD+zB,GAAmByB,EAAkB7iB,IAAS,QAAA,GAAA4P,EAAA1iB,QAAA0iB,EAAA1G,GAAA0G,cAGjDA,EAAA1G,cAAe0E,oBAAegC,EAAAziB,QAAA,MAAA,OAAAyiB,EAAAviB,gBACzB+zB,GACLyB,EACA5vB,KACD,QAAA,OAAA2c,EAAAviB,gBAEI+zB,GACLyB,EACAtvB,KACD,QAAA,UAAA,OAAAqc,EAAAtiB,UAAA+hB,sBAEJ,OAAA,SAAAS,GAAA,OAAAmL,EAAA1tB,WAAAC,YA5CuB,GA8CxBnC,EAcakwB,aAAY,WAAA,IAAAC,EAAA7uB,EAAAC,IAAAC,MAAlB,SAAA4kB,EAAA9e,GAAA,IAAAsb,EAAAO,EAAA/c,EAAAyc,EAAAO,EAAAN,EAAAC,EAAAC,EAAAC,EAAA7T,EAAA/M,EAAAtB,EAAAihB,EAAAza,EAAAC,EAAAlB,OAAA,OAAA/E,IAAAI,eAAA8kB,GAAA,cAAAA,EAAA5kB,KAAA4kB,EAAA3kB,MAAA,OASwB,GAP7BqhB,YADeP,EAAAtb,EACf6b,OAAQ,GAAEP,EACVxc,EAAMkB,EAANlB,OACAgd,YADMP,EAAAvb,EACN8b,MAAO,EAACP,EACRE,YADQD,EAAAxb,EACRyb,WAAY7jB,sBAAcmkB,IAAGP,EAC7BG,YAD6BD,EAAA1b,EAC7B2b,QAASjkB,uBAAeskB,WAAUN,EAE9B5T,EAAQ,KACR/M,EARWiF,EAAf8M,kBASWqS,EAAA3kB,QAAA,MAAA,GACJS,YAAUF,IAAQokB,EAAA3kB,QAAA,MAAA,OAAA2kB,EAAA3kB,OACfrC,KAAKkI,KAAKvG,eAAc,OACU,GAAlCL,EAAWtB,KAAKkI,KAAKnH,eACdimB,EAAA3kB,QAAA,MAAA,MACL,IAAI3B,kBAAiB,QAAA,OAAAsmB,EAAA5kB,QAAA4kB,EAAA3kB,QAGGf,EAASohB,YAAY9f,GAAQ,QAAtC,GAAf2f,EAAeyE,EAAA1kB,MACD0kB,EAAA3kB,QAAA,MAAA,MACZ,IAAIsgB,2BAA0B,QAEtC/f,EAAU2f,EAAgByE,EAAA3kB,QAAA,MAAA,QAAA,MAAA2kB,EAAA5kB,QAAA4kB,EAAA5I,GAAA4I,YAEpB,IAAIrE,2BAAwBqE,EAAA5I,IAAG,QAGzCzO,EAAQ,CAAEsF,IAAKrS,EAAQ6d,eAAgB,QAaR,OAX7B9Z,IACFgJ,EAAK4E,KAAQ5E,EAAUD,GAA4B/I,KAE/CmB,EAAQquB,GACRpuB,EAAS,CACb4H,MAAAA,EACA+T,MAAAA,EACAC,KAAAA,EACAL,UAAAA,EACAE,OAAAA,GAE+BwD,EAAA3kB,QAEGrC,KAAKwH,QAAQC,QAAW,CAC1DK,MAAAA,EACAC,OAAAA,EACAhL,KALW,uBAMX,QAJuB,OAAAiqB,EAAAzkB,gBAKlBwC,QAAQ+e,IADbkD,EAAA1kB,KAJM01B,kBAMY5qB,eAAG,IAAA4W,EAAAniB,EAAAC,IAAAC,MACnB,SAAAojB,EACEvW,GAA0C,IAAA4T,EAAAtN,EAAA,OAAApT,IAAAI,eAAAwjB,GAAA,cAAAA,EAAAtjB,KAAAsjB,EAAArjB,MAAA,OAAA,GAErCuM,EAASsG,UAAQwQ,EAAArjB,OAAA,MAAA,OAAAqjB,EAAAnjB,gBACbs0B,GACLjoB,EACApG,KACD,OAIoD,OAJpDkd,EAAAtjB,OAIKogB,EAAcI,iBAAehU,EAASsG,UAASwQ,EAAArjB,OACxBwE,EAAKvC,KAAKyC,YAAYyb,GAAY,OACA,OAAzDtN,EAAWgJ,KAAK2E,MADF6C,EAAApjB,MAC2CojB,EAAAnjB,gBACxDs0B,GAA2BjoB,EAAUsG,IAAS,QAAA,GAAAwQ,EAAAtjB,QAAAsjB,EAAAtH,GAAAsH,aAEjDA,EAAAtH,cAAe0E,oBAAe4C,EAAArjB,QAAA,MAAA,OAAAqjB,EAAAnjB,gBACzBs0B,GACLjoB,EACAzG,KACD,QAAA,OAAAud,EAAAnjB,gBAEIs0B,GACLjoB,EACAnG,KACD,QAAA,UAAA,OAAAid,EAAAljB,UAAA2iB,qBAEJ,gBAAAgC,GAAA,OAAAnD,EAAAvhB,WAAAC,kBAEJ,QAAA,UAAA,OAAAskB,EAAAxkB,UAAAmkB,sBACF,OAAA,SAAAhB,GAAA,OAAA+K,EAAAjuB,WAAAC,YA/EwB,GA+ExBy0B,GAtewClvB,ICrE9B6R,GAA0C,CACrDkd,oBAAkBtlB,kBAAkBI,YAAY,gBAC7CjB,OAAO,WACVmmB,oBAAkBtlB,kBAAkBI,YAClC,mBACAjB,OAAO,WACTmmB,oBAAkBtlB,kBAAkBI,YAClC,0BACAjB,OAAO,YCGEonB,YAAuBhd,GAAA,SAAAgd,IAAA,OAAAhd,EAAAxY,WAAAC,iBAAA6L,EAAA0pB,EAAAhd,GAAA,IAAA1a,EAAA03B,EAAAz3B,UAiFjC,OA/EDD,EAOOw2B,mBAAA,SAAmBzlB,GACxB,IAAM4mB,EAAoBlB,oBAAkBtlB,kBACtCC,EAAWC,aAAWN,GAEtBO,EAAmBqmB,EAAkBpmB,YAAY,gBAKvD,OAJeomB,EAAkBnmB,mBAC/BF,EACAF,GAEY,IAEhBpR,EAOO02B,sBAAA,SAAsB3lB,GAC3B,IAAM4mB,EAAoBlB,oBAAkBtlB,kBACtCC,EAAWC,aAAWN,GACtBO,EAAmBqmB,EAAkBpmB,YACzC,mBAMF,OAJeomB,EAAkBnmB,mBAC/BF,EACAF,GAEY,IAEhBpR,EAOO22B,6BAAA,SACL5lB,GAEA,IAAM4mB,EAAoBlB,oBAAkBtlB,kBACtCC,EAAWC,aAAWN,GACtBO,EAAmBqmB,EAAkBpmB,YACzC,0BAEIP,EAAS2mB,EAAkBnmB,mBAC/BF,EACAF,GAEF,MAAO,CACL6kB,aAAcjlB,EAAO,GAAGilB,aACxBD,WAAYhlB,EAAO,GAAGglB,aAG1Bh2B,EAOO4pB,cAAA,SAAc7Y,GACnB,IACE,IAAMhL,EAAOwM,GAAoBxB,EAAMwI,IACvC,MAAO,CACLnJ,GAAIrK,EAAKuK,OAAO,WAChBuZ,aAAc9jB,EAAKvJ,KACnB4I,KAAMiM,aAAWN,GAAM2B,UAAU,EAAG,KAEtC,MAAA8d,GACA,OAAO,OAEVkH,GAjFyChwB,ICJ/BkwB,YAAyBld,GAAA,SAAAkd,IAAA,OAAAld,EAAAxY,WAAAC,iBAAA6L,EAAA4pB,EAAAld,GAAA,IAAA1a,EAAA43B,EAAA33B,UA+FnC,OA7FDD,EAOaitB,eAAc,WAAA,IAAAyD,EAAApvB,EAAAC,IAAAC,MAApB,SAAAC,EACL+F,GAAoC,IAAA2lB,EAAAE,EAAAI,EAAAE,EAAArtB,EAAAu2B,EAAAvJ,EAAAE,EAAAE,EAAA,OAAAnsB,IAAAI,eAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAOnC,GALKxB,EAASb,KAAKkI,KAAK7G,qBAEnB+1B,EAAmBJ,oBAAkBz1B,QACzCwG,EAAOmO,cACPrV,UAIA6sB,EAAA3lB,EAAO4lB,mBAAPD,EAAwBptB,QACxByH,EAAO4lB,gBAAgBrtB,iBAAMstB,EAAK7lB,EAAOyjB,gBAAPoC,EAAgBttB,SAAM6B,EAAAE,OAAA,MAAA,MAElD,IAAI4L,MACR,2DACD,OAKgD,OAH7C4f,EAAkBC,oBAAkB/lB,EAAO4lB,iBAE3CI,UAAiBC,EAAAjmB,EAAOgH,kBAAPif,EAAkBne,YAAa,EAChDoe,UAAeC,EAAAnmB,EAAOkH,gBAAPif,EAAgBre,YAAa,EAAC1N,EAAAE,OAE1B+0B,EAAiB7N,YAAYiE,eACpD/Y,cAAY1M,EAAO+U,aACnB/U,EAAOyjB,SAAW,GAClBqC,EACA9lB,EAAOmY,UAAW,EAClBnY,EAAOsvB,eAAgB,EACvBn3B,KAAK0P,MAAMme,EAAiB,KAC5B7tB,KAAK0P,MAAMqe,EAAe,MAC3B,OARe,OAAA9rB,EAAAI,gBASTvC,KAAKkI,KAAK1E,qBATDrB,EAAAG,KASiCiB,aAAW,QAAA,UAAA,OAAApB,EAAAK,UAAAR,YAC7D,OAAA,SAAA4D,GAAA,OAAAqrB,EAAAxuB,WAAAC,YAjC0B,GAmC3BnC,EAOag3B,gBAAe,WAAA,IAAAa,EAAAv2B,EAAAC,IAAAC,MAArB,SAAAsD,EACL0C,GAAqC,IAAAlH,EAAA6tB,EAAA/d,EAAAymB,EAAA,OAAAt1B,IAAAI,eAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,OAUpC,OARKxB,EAASb,KAAKkI,KAAK7G,qBAAoBqtB,EACfC,mBAC5B5mB,EAAOyP,YADc7G,EAAE+d,EAAF/d,GAIjBymB,EAAmBJ,oBAAkBz1B,QAJtBmtB,EAAbxY,cAMNrV,GACD2E,EAAAnD,OAEwB+0B,EAAiB7N,YAAYrJ,QACpDvP,EACA5I,EAAOsvB,cACR,OAHe,OAAA7xB,EAAAjD,gBAITvC,KAAKkI,KAAK1E,qBAJDgC,EAAAlD,KAIiCiB,aAAW,OAAA,UAAA,OAAAiC,EAAAhD,UAAA6C,YAC7D,OAAA,SAAA8c,GAAA,OAAAiW,EAAA31B,WAAAC,YAlB2B,GAmB5BnC,EAOasuB,gBAAe,WAAA,IAAAsC,EAAAtvB,EAAAC,IAAAC,MAArB,SAAAie,EACLxI,GAAkB,IAAA3W,EAAAiuB,EAAAne,EAAAymB,EAAA,OAAAt1B,IAAAI,eAAAqc,GAAA,cAAAA,EAAAnc,KAAAmc,EAAAlc,MAAA,OAWjB,OATKxB,EAASb,KAAKkI,KAAK7G,qBAAoBytB,EAEfH,mBAC5BnX,GADqB7G,EAAEme,EAAFne,GAIjBymB,EAAmBJ,oBAAkBz1B,QAJtButB,EAAb5Y,cAMNrV,GACD0d,EAAAlc,OAEwB+0B,EAAiB7N,YAAYwF,QACpDpe,GACD,OAFe,OAAA4N,EAAAhc,gBAGTvC,KAAKkI,KAAK1E,qBAHD+a,EAAAjc,KAGiCiB,aAAW,OAAA,UAAA,OAAAgb,EAAA/b,UAAAwd,YAC7D,OAAA,SAAA+C,GAAA,OAAAoO,EAAA1uB,WAAAC,YAlB2B,GAkB3By1B,GA/F2ClwB,ICUjCowB,YAAepd,GAK1B,SAAAod,EAAYt4B,SAK8C,OAJxD+D,EAAAmX,EAAA3M,UAAMvO,UACDwqB,QAAU,IAAI4M,GAAsBp3B,GACzC+D,EAAK0mB,SAAW,IAAIsM,GAAuB/2B,GAC3C+D,EAAK2mB,SAAW,IAAIwN,GAAuBl4B,GAC3C+D,EAAK4mB,WAAa,IAAIyN,GAAyBp4B,GAAS+D,EACzD,OAXyByK,EAAA8pB,EAAApd,GAWzBod,GAXiCpwB,IAa3BowB,YAAW,CAWhBvL,qBAAsB,SACpB/kB,EACA7G,GAA+B,gBAA/BA,IAAAA,EAAsB,WAEtB41B,GAAuBhK,qBAAqB/kB,EAAQ7G,urB3CnCxD6G,aAEA,MAAO,CACLA,EAAO+U,mBAAW8Q,EAClB7lB,EAAOyjB,SAAOoC,EAAI,GAElB7lB,EAAOgH,UAAY7O,KAAKC,MAAM4H,EAAOgH,UAAUc,UAAY,KAAQ,EAEnE9H,EAAOkH,QAAU/O,KAAKC,MAAM4H,EAAOkH,QAAQY,UAAY,KAAQ,SAACyoB,EAChEvwB,EAAOqmB,gBAAakK,SAASC,EAC7BxwB,EAAOomB,aAAWoK,EAAIj6B,mBAAWgB"}